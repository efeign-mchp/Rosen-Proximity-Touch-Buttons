
TINY3217_QT4.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000076  00803800  000027e0  000028d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         000027da  00000000  00000000  000000f4  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000006  0000a7da  000027da  000028ce  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .bss          00000068  00803876  00803876  0000294a  2**0
                  ALLOC
  4 .fuse         00000009  00820000  00820000  0000294a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  5 .lock         00000001  00830000  00830000  00002953  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .comment      00000060  00000000  00000000  00002954  2**0
                  CONTENTS, READONLY
  7 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  000029b4  2**2
                  CONTENTS, READONLY
  8 .debug_aranges 00000438  00000000  00000000  000029f8  2**3
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_info   00005032  00000000  00000000  00002e30  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_abbrev 000028b2  00000000  00000000  00007e62  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_line   00001f14  00000000  00000000  0000a714  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_frame  00000d0c  00000000  00000000  0000c628  2**2
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00002921  00000000  00000000  0000d334  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_loc    000019c5  00000000  00000000  0000fc55  2**0
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00000348  00000000  00000000  0001161a  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 3e 00 	jmp	0x7c	; 0x7c <__ctors_end>
       4:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       8:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
       c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      10:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      14:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      18:	0c 94 69 00 	jmp	0xd2	; 0xd2 <__vector_6>
      1c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      20:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      24:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      28:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      2c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      30:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      34:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      38:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      3c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      40:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      44:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      48:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      4c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      50:	0c 94 09 06 	jmp	0xc12	; 0xc12 <__vector_20>
      54:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      58:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      5c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      60:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      64:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      68:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      6c:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      70:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      74:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>
      78:	0c 94 5b 00 	jmp	0xb6	; 0xb6 <__bad_interrupt>

0000007c <__ctors_end>:
      7c:	11 24       	eor	r1, r1
      7e:	1f be       	out	0x3f, r1	; 63
      80:	cf ef       	ldi	r28, 0xFF	; 255
      82:	cd bf       	out	0x3d, r28	; 61
      84:	df e3       	ldi	r29, 0x3F	; 63
      86:	de bf       	out	0x3e, r29	; 62

00000088 <__do_copy_data>:
      88:	18 e3       	ldi	r17, 0x38	; 56
      8a:	a0 e0       	ldi	r26, 0x00	; 0
      8c:	b8 e3       	ldi	r27, 0x38	; 56
      8e:	e0 ee       	ldi	r30, 0xE0	; 224
      90:	f7 e2       	ldi	r31, 0x27	; 39
      92:	02 c0       	rjmp	.+4      	; 0x98 <__do_copy_data+0x10>
      94:	05 90       	lpm	r0, Z+
      96:	0d 92       	st	X+, r0
      98:	a6 37       	cpi	r26, 0x76	; 118
      9a:	b1 07       	cpc	r27, r17
      9c:	d9 f7       	brne	.-10     	; 0x94 <__do_copy_data+0xc>

0000009e <__do_clear_bss>:
      9e:	28 e3       	ldi	r18, 0x38	; 56
      a0:	a6 e7       	ldi	r26, 0x76	; 118
      a2:	b8 e3       	ldi	r27, 0x38	; 56
      a4:	01 c0       	rjmp	.+2      	; 0xa8 <.do_clear_bss_start>

000000a6 <.do_clear_bss_loop>:
      a6:	1d 92       	st	X+, r1

000000a8 <.do_clear_bss_start>:
      a8:	ae 3d       	cpi	r26, 0xDE	; 222
      aa:	b2 07       	cpc	r27, r18
      ac:	e1 f7       	brne	.-8      	; 0xa6 <.do_clear_bss_loop>
      ae:	0e 94 4d 02 	call	0x49a	; 0x49a <main>
      b2:	0c 94 eb 13 	jmp	0x27d6	; 0x27d6 <_exit>

000000b6 <__bad_interrupt>:
      b6:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ba <atmel_start_init>:

/**
 * Initializes MCU, drivers and middleware in the project
 **/
void atmel_start_init(void)
{
      ba:	cf 93       	push	r28
      bc:	df 93       	push	r29
      be:	cd b7       	in	r28, 0x3d	; 61
      c0:	de b7       	in	r29, 0x3e	; 62
	system_init();
      c2:	0e 94 d9 09 	call	0x13b2	; 0x13b2 <system_init>

	touch_init();
      c6:	0e 94 22 05 	call	0xa44	; 0xa44 <touch_init>
}
      ca:	00 00       	nop
      cc:	df 91       	pop	r29
      ce:	cf 91       	pop	r28
      d0:	08 95       	ret

000000d2 <__vector_6>:

#include <driver_init.h>
#include <compiler.h>

ISR(RTC_CNT_vect)
{
      d2:	1f 92       	push	r1
      d4:	0f 92       	push	r0
      d6:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <gain_setting_int_cap+0x7f5865>
      da:	0f 92       	push	r0
      dc:	11 24       	eor	r1, r1
      de:	2f 93       	push	r18
      e0:	3f 93       	push	r19
      e2:	4f 93       	push	r20
      e4:	5f 93       	push	r21
      e6:	6f 93       	push	r22
      e8:	7f 93       	push	r23
      ea:	8f 93       	push	r24
      ec:	9f 93       	push	r25
      ee:	af 93       	push	r26
      f0:	bf 93       	push	r27
      f2:	ef 93       	push	r30
      f4:	ff 93       	push	r31
      f6:	cf 93       	push	r28
      f8:	df 93       	push	r29
      fa:	cd b7       	in	r28, 0x3d	; 61
      fc:	de b7       	in	r29, 0x3e	; 62

	/* Insert your RTC Compare interrupt handling code */
	touch_timer_handler();
      fe:	0e 94 84 05 	call	0xb08	; 0xb08 <touch_timer_handler>

	/* Compare interrupt flag has to be cleared manually */
	RTC.INTFLAGS = RTC_CMP_bm;
     102:	80 e4       	ldi	r24, 0x40	; 64
     104:	91 e0       	ldi	r25, 0x01	; 1
     106:	22 e0       	ldi	r18, 0x02	; 2
     108:	fc 01       	movw	r30, r24
     10a:	23 83       	std	Z+3, r18	; 0x03
}
     10c:	00 00       	nop
     10e:	df 91       	pop	r29
     110:	cf 91       	pop	r28
     112:	ff 91       	pop	r31
     114:	ef 91       	pop	r30
     116:	bf 91       	pop	r27
     118:	af 91       	pop	r26
     11a:	9f 91       	pop	r25
     11c:	8f 91       	pop	r24
     11e:	7f 91       	pop	r23
     120:	6f 91       	pop	r22
     122:	5f 91       	pop	r21
     124:	4f 91       	pop	r20
     126:	3f 91       	pop	r19
     128:	2f 91       	pop	r18
     12a:	0f 90       	pop	r0
     12c:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <gain_setting_int_cap+0x7f5865>
     130:	0f 90       	pop	r0
     132:	1f 90       	pop	r1
     134:	18 95       	reti

00000136 <PORTA_set_pin_level>:
 * \param[in] pin       The pin number within port
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
     136:	cf 93       	push	r28
     138:	df 93       	push	r29
     13a:	00 d0       	rcall	.+0      	; 0x13c <PORTA_set_pin_level+0x6>
     13c:	cd b7       	in	r28, 0x3d	; 61
     13e:	de b7       	in	r29, 0x3e	; 62
     140:	89 83       	std	Y+1, r24	; 0x01
     142:	6a 83       	std	Y+2, r22	; 0x02
	if (level == true) {
     144:	8a 81       	ldd	r24, Y+2	; 0x02
     146:	88 23       	and	r24, r24
     148:	a9 f0       	breq	.+42     	; 0x174 <PORTA_set_pin_level+0x3e>
		VPORTA.OUT |= (1 << pin);
     14a:	20 e0       	ldi	r18, 0x00	; 0
     14c:	30 e0       	ldi	r19, 0x00	; 0
     14e:	80 e0       	ldi	r24, 0x00	; 0
     150:	90 e0       	ldi	r25, 0x00	; 0
     152:	fc 01       	movw	r30, r24
     154:	81 81       	ldd	r24, Z+1	; 0x01
     156:	68 2f       	mov	r22, r24
     158:	89 81       	ldd	r24, Y+1	; 0x01
     15a:	48 2f       	mov	r20, r24
     15c:	50 e0       	ldi	r21, 0x00	; 0
     15e:	81 e0       	ldi	r24, 0x01	; 1
     160:	90 e0       	ldi	r25, 0x00	; 0
     162:	02 c0       	rjmp	.+4      	; 0x168 <PORTA_set_pin_level+0x32>
     164:	88 0f       	add	r24, r24
     166:	99 1f       	adc	r25, r25
     168:	4a 95       	dec	r20
     16a:	e2 f7       	brpl	.-8      	; 0x164 <PORTA_set_pin_level+0x2e>
     16c:	86 2b       	or	r24, r22
     16e:	f9 01       	movw	r30, r18
     170:	81 83       	std	Z+1, r24	; 0x01
	} else {
		VPORTA.OUT &= ~(1 << pin);
	}
}
     172:	15 c0       	rjmp	.+42     	; 0x19e <PORTA_set_pin_level+0x68>
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     174:	20 e0       	ldi	r18, 0x00	; 0
     176:	30 e0       	ldi	r19, 0x00	; 0
     178:	80 e0       	ldi	r24, 0x00	; 0
     17a:	90 e0       	ldi	r25, 0x00	; 0
     17c:	fc 01       	movw	r30, r24
     17e:	81 81       	ldd	r24, Z+1	; 0x01
     180:	68 2f       	mov	r22, r24
     182:	89 81       	ldd	r24, Y+1	; 0x01
     184:	48 2f       	mov	r20, r24
     186:	50 e0       	ldi	r21, 0x00	; 0
     188:	81 e0       	ldi	r24, 0x01	; 1
     18a:	90 e0       	ldi	r25, 0x00	; 0
     18c:	02 c0       	rjmp	.+4      	; 0x192 <PORTA_set_pin_level+0x5c>
     18e:	88 0f       	add	r24, r24
     190:	99 1f       	adc	r25, r25
     192:	4a 95       	dec	r20
     194:	e2 f7       	brpl	.-8      	; 0x18e <PORTA_set_pin_level+0x58>
     196:	80 95       	com	r24
     198:	86 23       	and	r24, r22
     19a:	f9 01       	movw	r30, r18
     19c:	81 83       	std	Z+1, r24	; 0x01
	}
}
     19e:	00 00       	nop
     1a0:	0f 90       	pop	r0
     1a2:	0f 90       	pop	r0
     1a4:	df 91       	pop	r29
     1a6:	cf 91       	pop	r28
     1a8:	08 95       	ret

000001aa <PORTB_set_pin_level>:
 * \param[in] pin       The pin number within port
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
     1aa:	cf 93       	push	r28
     1ac:	df 93       	push	r29
     1ae:	00 d0       	rcall	.+0      	; 0x1b0 <PORTB_set_pin_level+0x6>
     1b0:	cd b7       	in	r28, 0x3d	; 61
     1b2:	de b7       	in	r29, 0x3e	; 62
     1b4:	89 83       	std	Y+1, r24	; 0x01
     1b6:	6a 83       	std	Y+2, r22	; 0x02
	if (level == true) {
     1b8:	8a 81       	ldd	r24, Y+2	; 0x02
     1ba:	88 23       	and	r24, r24
     1bc:	a9 f0       	breq	.+42     	; 0x1e8 <PORTB_set_pin_level+0x3e>
		VPORTB.OUT |= (1 << pin);
     1be:	84 e0       	ldi	r24, 0x04	; 4
     1c0:	90 e0       	ldi	r25, 0x00	; 0
     1c2:	24 e0       	ldi	r18, 0x04	; 4
     1c4:	30 e0       	ldi	r19, 0x00	; 0
     1c6:	f9 01       	movw	r30, r18
     1c8:	21 81       	ldd	r18, Z+1	; 0x01
     1ca:	62 2f       	mov	r22, r18
     1cc:	29 81       	ldd	r18, Y+1	; 0x01
     1ce:	42 2f       	mov	r20, r18
     1d0:	50 e0       	ldi	r21, 0x00	; 0
     1d2:	21 e0       	ldi	r18, 0x01	; 1
     1d4:	30 e0       	ldi	r19, 0x00	; 0
     1d6:	02 c0       	rjmp	.+4      	; 0x1dc <PORTB_set_pin_level+0x32>
     1d8:	22 0f       	add	r18, r18
     1da:	33 1f       	adc	r19, r19
     1dc:	4a 95       	dec	r20
     1de:	e2 f7       	brpl	.-8      	; 0x1d8 <PORTB_set_pin_level+0x2e>
     1e0:	26 2b       	or	r18, r22
     1e2:	fc 01       	movw	r30, r24
     1e4:	21 83       	std	Z+1, r18	; 0x01
	} else {
		VPORTB.OUT &= ~(1 << pin);
	}
}
     1e6:	15 c0       	rjmp	.+42     	; 0x212 <PORTB_set_pin_level+0x68>
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
     1e8:	84 e0       	ldi	r24, 0x04	; 4
     1ea:	90 e0       	ldi	r25, 0x00	; 0
     1ec:	24 e0       	ldi	r18, 0x04	; 4
     1ee:	30 e0       	ldi	r19, 0x00	; 0
     1f0:	f9 01       	movw	r30, r18
     1f2:	21 81       	ldd	r18, Z+1	; 0x01
     1f4:	62 2f       	mov	r22, r18
     1f6:	29 81       	ldd	r18, Y+1	; 0x01
     1f8:	42 2f       	mov	r20, r18
     1fa:	50 e0       	ldi	r21, 0x00	; 0
     1fc:	21 e0       	ldi	r18, 0x01	; 1
     1fe:	30 e0       	ldi	r19, 0x00	; 0
     200:	02 c0       	rjmp	.+4      	; 0x206 <PORTB_set_pin_level+0x5c>
     202:	22 0f       	add	r18, r18
     204:	33 1f       	adc	r19, r19
     206:	4a 95       	dec	r20
     208:	e2 f7       	brpl	.-8      	; 0x202 <PORTB_set_pin_level+0x58>
     20a:	20 95       	com	r18
     20c:	26 23       	and	r18, r22
     20e:	fc 01       	movw	r30, r24
     210:	21 83       	std	Z+1, r18	; 0x01
	}
}
     212:	00 00       	nop
     214:	0f 90       	pop	r0
     216:	0f 90       	pop	r0
     218:	df 91       	pop	r29
     21a:	cf 91       	pop	r28
     21c:	08 95       	ret

0000021e <PORTB_get_pin_level>:
 * \brief Get level on pin
 *
 * Reads the level on pins connected to a port
 */
static inline bool PORTB_get_pin_level(const uint8_t pin)
{
     21e:	cf 93       	push	r28
     220:	df 93       	push	r29
     222:	1f 92       	push	r1
     224:	cd b7       	in	r28, 0x3d	; 61
     226:	de b7       	in	r29, 0x3e	; 62
     228:	89 83       	std	Y+1, r24	; 0x01
	return VPORTB.IN & (1 << pin);
     22a:	84 e0       	ldi	r24, 0x04	; 4
     22c:	90 e0       	ldi	r25, 0x00	; 0
     22e:	fc 01       	movw	r30, r24
     230:	82 81       	ldd	r24, Z+2	; 0x02
     232:	28 2f       	mov	r18, r24
     234:	30 e0       	ldi	r19, 0x00	; 0
     236:	89 81       	ldd	r24, Y+1	; 0x01
     238:	48 2f       	mov	r20, r24
     23a:	50 e0       	ldi	r21, 0x00	; 0
     23c:	81 e0       	ldi	r24, 0x01	; 1
     23e:	90 e0       	ldi	r25, 0x00	; 0
     240:	02 c0       	rjmp	.+4      	; 0x246 <PORTB_get_pin_level+0x28>
     242:	88 0f       	add	r24, r24
     244:	99 1f       	adc	r25, r25
     246:	4a 95       	dec	r20
     248:	e2 f7       	brpl	.-8      	; 0x242 <PORTB_get_pin_level+0x24>
     24a:	82 23       	and	r24, r18
     24c:	93 23       	and	r25, r19
     24e:	21 e0       	ldi	r18, 0x01	; 1
     250:	89 2b       	or	r24, r25
     252:	09 f4       	brne	.+2      	; 0x256 <PORTB_get_pin_level+0x38>
     254:	20 e0       	ldi	r18, 0x00	; 0
     256:	82 2f       	mov	r24, r18
}
     258:	0f 90       	pop	r0
     25a:	df 91       	pop	r29
     25c:	cf 91       	pop	r28
     25e:	08 95       	ret

00000260 <LED3_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void LED3_set_level(const bool level)
{
     260:	cf 93       	push	r28
     262:	df 93       	push	r29
     264:	1f 92       	push	r1
     266:	cd b7       	in	r28, 0x3d	; 61
     268:	de b7       	in	r29, 0x3e	; 62
     26a:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_level(4, level);
     26c:	69 81       	ldd	r22, Y+1	; 0x01
     26e:	84 e0       	ldi	r24, 0x04	; 4
     270:	0e 94 9b 00 	call	0x136	; 0x136 <PORTA_set_pin_level>
}
     274:	00 00       	nop
     276:	0f 90       	pop	r0
     278:	df 91       	pop	r29
     27a:	cf 91       	pop	r28
     27c:	08 95       	ret

0000027e <LED2_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void LED2_set_level(const bool level)
{
     27e:	cf 93       	push	r28
     280:	df 93       	push	r29
     282:	1f 92       	push	r1
     284:	cd b7       	in	r28, 0x3d	; 61
     286:	de b7       	in	r29, 0x3e	; 62
     288:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_level(5, level);
     28a:	69 81       	ldd	r22, Y+1	; 0x01
     28c:	85 e0       	ldi	r24, 0x05	; 5
     28e:	0e 94 9b 00 	call	0x136	; 0x136 <PORTA_set_pin_level>
}
     292:	00 00       	nop
     294:	0f 90       	pop	r0
     296:	df 91       	pop	r29
     298:	cf 91       	pop	r28
     29a:	08 95       	ret

0000029c <LED0_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void LED0_set_level(const bool level)
{
     29c:	cf 93       	push	r28
     29e:	df 93       	push	r29
     2a0:	1f 92       	push	r1
     2a2:	cd b7       	in	r28, 0x3d	; 61
     2a4:	de b7       	in	r29, 0x3e	; 62
     2a6:	89 83       	std	Y+1, r24	; 0x01
	PORTB_set_pin_level(0, level);
     2a8:	69 81       	ldd	r22, Y+1	; 0x01
     2aa:	80 e0       	ldi	r24, 0x00	; 0
     2ac:	0e 94 d5 00 	call	0x1aa	; 0x1aa <PORTB_set_pin_level>
}
     2b0:	00 00       	nop
     2b2:	0f 90       	pop	r0
     2b4:	df 91       	pop	r29
     2b6:	cf 91       	pop	r28
     2b8:	08 95       	ret

000002ba <LED1_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void LED1_set_level(const bool level)
{
     2ba:	cf 93       	push	r28
     2bc:	df 93       	push	r29
     2be:	1f 92       	push	r1
     2c0:	cd b7       	in	r28, 0x3d	; 61
     2c2:	de b7       	in	r29, 0x3e	; 62
     2c4:	89 83       	std	Y+1, r24	; 0x01
	PORTB_set_pin_level(1, level);
     2c6:	69 81       	ldd	r22, Y+1	; 0x01
     2c8:	81 e0       	ldi	r24, 0x01	; 1
     2ca:	0e 94 d5 00 	call	0x1aa	; 0x1aa <PORTB_set_pin_level>
}
     2ce:	00 00       	nop
     2d0:	0f 90       	pop	r0
     2d2:	df 91       	pop	r29
     2d4:	cf 91       	pop	r28
     2d6:	08 95       	ret

000002d8 <PB5_get_level>:
 * \brief Get level on PB5
 *
 * Reads the level on a pin
 */
static inline bool PB5_get_level()
{
     2d8:	cf 93       	push	r28
     2da:	df 93       	push	r29
     2dc:	cd b7       	in	r28, 0x3d	; 61
     2de:	de b7       	in	r29, 0x3e	; 62
	return PORTB_get_pin_level(5);
     2e0:	85 e0       	ldi	r24, 0x05	; 5
     2e2:	0e 94 0f 01 	call	0x21e	; 0x21e <PORTB_get_pin_level>
}
     2e6:	df 91       	pop	r29
     2e8:	cf 91       	pop	r28
     2ea:	08 95       	ret

000002ec <LED_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void LED_set_level(const bool level)
{
     2ec:	cf 93       	push	r28
     2ee:	df 93       	push	r29
     2f0:	1f 92       	push	r1
     2f2:	cd b7       	in	r28, 0x3d	; 61
     2f4:	de b7       	in	r29, 0x3e	; 62
     2f6:	89 83       	std	Y+1, r24	; 0x01
	PORTB_set_pin_level(6, level);
     2f8:	69 81       	ldd	r22, Y+1	; 0x01
     2fa:	86 e0       	ldi	r24, 0x06	; 6
     2fc:	0e 94 d5 00 	call	0x1aa	; 0x1aa <PORTB_set_pin_level>
}
     300:	00 00       	nop
     302:	0f 90       	pop	r0
     304:	df 91       	pop	r29
     306:	cf 91       	pop	r28
     308:	08 95       	ret

0000030a <ccp_write_io>:
 * \note Using IAR Embedded workbench, the choice of memory model has an impact
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
     30a:	cf 93       	push	r28
     30c:	df 93       	push	r29
     30e:	00 d0       	rcall	.+0      	; 0x310 <ccp_write_io+0x6>
     310:	1f 92       	push	r1
     312:	cd b7       	in	r28, 0x3d	; 61
     314:	de b7       	in	r29, 0x3e	; 62
     316:	89 83       	std	Y+1, r24	; 0x01
     318:	9a 83       	std	Y+2, r25	; 0x02
     31a:	6b 83       	std	Y+3, r22	; 0x03
	protected_write_io(addr, CCP_IOREG_gc, value);
     31c:	89 81       	ldd	r24, Y+1	; 0x01
     31e:	9a 81       	ldd	r25, Y+2	; 0x02
     320:	4b 81       	ldd	r20, Y+3	; 0x03
     322:	68 ed       	ldi	r22, 0xD8	; 216
     324:	0e 94 1f 0a 	call	0x143e	; 0x143e <protected_write_io>
}
     328:	00 00       	nop
     32a:	23 96       	adiw	r28, 0x03	; 3
     32c:	cd bf       	out	0x3d, r28	; 61
     32e:	de bf       	out	0x3e, r29	; 62
     330:	df 91       	pop	r29
     332:	cf 91       	pop	r28
     334:	08 95       	ret

00000336 <RSTCTRL_reset>:
#endif

#include <ccp.h>

static inline void RSTCTRL_reset(void)
{
     336:	cf 93       	push	r28
     338:	df 93       	push	r29
     33a:	cd b7       	in	r28, 0x3d	; 61
     33c:	de b7       	in	r29, 0x3e	; 62
	/* SWRR is protected with CCP */
	ccp_write_io((void *)&RSTCTRL.SWRR, 0x1);
     33e:	61 e0       	ldi	r22, 0x01	; 1
     340:	81 e4       	ldi	r24, 0x41	; 65
     342:	90 e0       	ldi	r25, 0x00	; 0
     344:	0e 94 85 01 	call	0x30a	; 0x30a <ccp_write_io>
}
     348:	00 00       	nop
     34a:	df 91       	pop	r29
     34c:	cf 91       	pop	r28
     34e:	08 95       	ret

00000350 <touch_example>:
Notes  : The content on this function has to be copied to the main() function
         on main.c file.
============================================================================*/

void touch_example(void)
{
     350:	cf 93       	push	r28
     352:	df 93       	push	r29
     354:	cd b7       	in	r28, 0x3d	; 61
     356:	de b7       	in	r29, 0x3e	; 62
	 *
	 * Note: This is a sample file to provide reference on using touch status in a user application. This file is not
	 * linked to a project build.
	 */

	cpu_irq_enable(); /* Global Interrupt Enable */
     358:	78 94       	sei

	touch_process();
     35a:	0e 94 33 05 	call	0xa66	; 0xa66 <touch_process>
	if (measurement_done_touch == 1) {
     35e:	80 91 7b 38 	lds	r24, 0x387B	; 0x80387b <measurement_done_touch>
     362:	81 30       	cpi	r24, 0x01	; 1
     364:	31 f4       	brne	.+12     	; 0x372 <touch_example+0x22>
		measurement_done_touch = 0;
     366:	10 92 7b 38 	sts	0x387B, r1	; 0x80387b <measurement_done_touch>
		touch_status_display();
     36a:	0e 94 bd 01 	call	0x37a	; 0x37a <touch_status_display>

		sample_reset_switch();	// Used during development; may not be required in your application
     36e:	0e 94 30 02 	call	0x460	; 0x460 <sample_reset_switch>
		// Note that the UPDI pin also serves as an external hardware reset input but only if enabled by fuses.
		// If set to external hardware reset with fuses, then the UPDI function is not available.  This is very inconvenient during development.
	}
}
     372:	00 00       	nop
     374:	df 91       	pop	r29
     376:	cf 91       	pop	r28
     378:	08 95       	ret

0000037a <touch_status_display>:
Input  : none
Output : none
Notes  : none
============================================================================*/
void touch_status_display(void)
{
     37a:	cf 93       	push	r28
     37c:	df 93       	push	r29
     37e:	1f 92       	push	r1
     380:	cd b7       	in	r28, 0x3d	; 61
     382:	de b7       	in	r29, 0x3e	; 62
	uint8_t i = 0;
     384:	19 82       	std	Y+1, r1	; 0x01
	
	key_status = 0;
     386:	10 92 76 38 	sts	0x3876, r1	; 0x803876 <__data_end>
	for (i = 0; i < DEF_NUM_SENSORS; i++) {
     38a:	19 82       	std	Y+1, r1	; 0x01
     38c:	1a c0       	rjmp	.+52     	; 0x3c2 <touch_status_display+0x48>
		if (0u != (get_sensor_state(i) & KEY_TOUCHED_MASK)) {
     38e:	89 81       	ldd	r24, Y+1	; 0x01
     390:	88 2f       	mov	r24, r24
     392:	90 e0       	ldi	r25, 0x00	; 0
     394:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <get_sensor_state>
     398:	88 23       	and	r24, r24
     39a:	84 f4       	brge	.+32     	; 0x3bc <touch_status_display+0x42>
			key_status |= 1 << i;
     39c:	89 81       	ldd	r24, Y+1	; 0x01
     39e:	28 2f       	mov	r18, r24
     3a0:	30 e0       	ldi	r19, 0x00	; 0
     3a2:	81 e0       	ldi	r24, 0x01	; 1
     3a4:	90 e0       	ldi	r25, 0x00	; 0
     3a6:	02 c0       	rjmp	.+4      	; 0x3ac <touch_status_display+0x32>
     3a8:	88 0f       	add	r24, r24
     3aa:	99 1f       	adc	r25, r25
     3ac:	2a 95       	dec	r18
     3ae:	e2 f7       	brpl	.-8      	; 0x3a8 <touch_status_display+0x2e>
     3b0:	98 2f       	mov	r25, r24
     3b2:	80 91 76 38 	lds	r24, 0x3876	; 0x803876 <__data_end>
     3b6:	89 2b       	or	r24, r25
     3b8:	80 93 76 38 	sts	0x3876, r24	; 0x803876 <__data_end>
void touch_status_display(void)
{
	uint8_t i = 0;
	
	key_status = 0;
	for (i = 0; i < DEF_NUM_SENSORS; i++) {
     3bc:	89 81       	ldd	r24, Y+1	; 0x01
     3be:	8f 5f       	subi	r24, 0xFF	; 255
     3c0:	89 83       	std	Y+1, r24	; 0x01
     3c2:	89 81       	ldd	r24, Y+1	; 0x01
     3c4:	84 30       	cpi	r24, 0x04	; 4
     3c6:	18 f3       	brcs	.-58     	; 0x38e <touch_status_display+0x14>
			key_status |= 1 << i;
		}
	}

    // Note if any key is pressed
    if (0u != key_status) {
     3c8:	80 91 76 38 	lds	r24, 0x3876	; 0x803876 <__data_end>
     3cc:	88 23       	and	r24, r24
     3ce:	21 f0       	breq	.+8      	; 0x3d8 <touch_status_display+0x5e>
	    LED_set_level(false);	// LED on
     3d0:	80 e0       	ldi	r24, 0x00	; 0
     3d2:	0e 94 76 01 	call	0x2ec	; 0x2ec <LED_set_level>
     3d6:	03 c0       	rjmp	.+6      	; 0x3de <touch_status_display+0x64>
	    } else {
	    LED_set_level(true);	// LED off
     3d8:	81 e0       	ldi	r24, 0x01	; 1
     3da:	0e 94 76 01 	call	0x2ec	; 0x2ec <LED_set_level>
    }

    // PROXIMITY - UNSHIELDED
	if (0u != (key_status & (1<<0))) {
     3de:	80 91 76 38 	lds	r24, 0x3876	; 0x803876 <__data_end>
     3e2:	88 2f       	mov	r24, r24
     3e4:	90 e0       	ldi	r25, 0x00	; 0
     3e6:	81 70       	andi	r24, 0x01	; 1
     3e8:	99 27       	eor	r25, r25
     3ea:	89 2b       	or	r24, r25
     3ec:	21 f0       	breq	.+8      	; 0x3f6 <touch_status_display+0x7c>
        LED0_set_level(false);	// LED on
     3ee:	80 e0       	ldi	r24, 0x00	; 0
     3f0:	0e 94 4e 01 	call	0x29c	; 0x29c <LED0_set_level>
     3f4:	03 c0       	rjmp	.+6      	; 0x3fc <touch_status_display+0x82>
	} else {
        LED0_set_level(true);	// LED off    
     3f6:	81 e0       	ldi	r24, 0x01	; 1
     3f8:	0e 94 4e 01 	call	0x29c	; 0x29c <LED0_set_level>
    }

    // PROXIMITY - DRIVEN SHIELD    
    if (0u != (key_status & (1<<1))) {
     3fc:	80 91 76 38 	lds	r24, 0x3876	; 0x803876 <__data_end>
     400:	88 2f       	mov	r24, r24
     402:	90 e0       	ldi	r25, 0x00	; 0
     404:	82 70       	andi	r24, 0x02	; 2
     406:	99 27       	eor	r25, r25
     408:	89 2b       	or	r24, r25
     40a:	21 f0       	breq	.+8      	; 0x414 <__LOCK_REGION_LENGTH__+0x14>
        LED3_set_level(false);	// LED on
     40c:	80 e0       	ldi	r24, 0x00	; 0
     40e:	0e 94 30 01 	call	0x260	; 0x260 <LED3_set_level>
     412:	03 c0       	rjmp	.+6      	; 0x41a <__LOCK_REGION_LENGTH__+0x1a>
     } else {
        LED3_set_level(true);	// LED off
     414:	81 e0       	ldi	r24, 0x01	; 1
     416:	0e 94 30 01 	call	0x260	; 0x260 <LED3_set_level>
    }

    // BUTTON1
    if (0u != (key_status & (1<<2))) {
     41a:	80 91 76 38 	lds	r24, 0x3876	; 0x803876 <__data_end>
     41e:	88 2f       	mov	r24, r24
     420:	90 e0       	ldi	r25, 0x00	; 0
     422:	84 70       	andi	r24, 0x04	; 4
     424:	99 27       	eor	r25, r25
     426:	89 2b       	or	r24, r25
     428:	21 f0       	breq	.+8      	; 0x432 <__LOCK_REGION_LENGTH__+0x32>
	    LED1_set_level(false);	// LED on
     42a:	80 e0       	ldi	r24, 0x00	; 0
     42c:	0e 94 5d 01 	call	0x2ba	; 0x2ba <LED1_set_level>
     430:	03 c0       	rjmp	.+6      	; 0x438 <__LOCK_REGION_LENGTH__+0x38>
	    } else {
	    LED1_set_level(true);	// LED off
     432:	81 e0       	ldi	r24, 0x01	; 1
     434:	0e 94 5d 01 	call	0x2ba	; 0x2ba <LED1_set_level>
    }

    // BUTTON2
    if (0u != (key_status & (1<<3))) {
     438:	80 91 76 38 	lds	r24, 0x3876	; 0x803876 <__data_end>
     43c:	88 2f       	mov	r24, r24
     43e:	90 e0       	ldi	r25, 0x00	; 0
     440:	88 70       	andi	r24, 0x08	; 8
     442:	99 27       	eor	r25, r25
     444:	89 2b       	or	r24, r25
     446:	21 f0       	breq	.+8      	; 0x450 <__LOCK_REGION_LENGTH__+0x50>
	    LED2_set_level(false);	// LED on
     448:	80 e0       	ldi	r24, 0x00	; 0
     44a:	0e 94 3f 01 	call	0x27e	; 0x27e <LED2_set_level>
	    } else {
	    LED2_set_level(true);	// LED off
    }
}
     44e:	03 c0       	rjmp	.+6      	; 0x456 <__LOCK_REGION_LENGTH__+0x56>

    // BUTTON2
    if (0u != (key_status & (1<<3))) {
	    LED2_set_level(false);	// LED on
	    } else {
	    LED2_set_level(true);	// LED off
     450:	81 e0       	ldi	r24, 0x01	; 1
     452:	0e 94 3f 01 	call	0x27e	; 0x27e <LED2_set_level>
    }
}
     456:	00 00       	nop
     458:	0f 90       	pop	r0
     45a:	df 91       	pop	r29
     45c:	cf 91       	pop	r28
     45e:	08 95       	ret

00000460 <sample_reset_switch>:

void sample_reset_switch(void)
{
     460:	cf 93       	push	r28
     462:	df 93       	push	r29
     464:	cd b7       	in	r28, 0x3d	; 61
     466:	de b7       	in	r29, 0x3e	; 62
	/* Check the status of SW0 User Button on ATTINY3217-XPRO*/
	/* 0: Pressed */
	/* If pressed, reset the system */
	if (!PB5_get_level()) {
     468:	0e 94 6c 01 	call	0x2d8	; 0x2d8 <PB5_get_level>
     46c:	98 2f       	mov	r25, r24
     46e:	81 e0       	ldi	r24, 0x01	; 1
     470:	89 27       	eor	r24, r25
     472:	88 23       	and	r24, r24
     474:	31 f0       	breq	.+12     	; 0x482 <sample_reset_switch+0x22>
		sw0_debounce++;	// indicate pressed
     476:	80 91 77 38 	lds	r24, 0x3877	; 0x803877 <sw0_debounce>
     47a:	8f 5f       	subi	r24, 0xFF	; 255
     47c:	80 93 77 38 	sts	0x3877, r24	; 0x803877 <sw0_debounce>
     480:	02 c0       	rjmp	.+4      	; 0x486 <sample_reset_switch+0x26>
	}
	else {
		sw0_debounce = 0;	// indicate released
     482:	10 92 77 38 	sts	0x3877, r1	; 0x803877 <sw0_debounce>
	}
	
	if (sw0_debounce == 0x03 )	// check that SW0 has been held for 3 consecutive samples
     486:	80 91 77 38 	lds	r24, 0x3877	; 0x803877 <sw0_debounce>
     48a:	83 30       	cpi	r24, 0x03	; 3
     48c:	11 f4       	brne	.+4      	; 0x492 <sample_reset_switch+0x32>
	{
		RSTCTRL_reset(); /* Assert Software Reset */
     48e:	0e 94 9b 01 	call	0x336	; 0x336 <RSTCTRL_reset>
	}
}
     492:	00 00       	nop
     494:	df 91       	pop	r29
     496:	cf 91       	pop	r28
     498:	08 95       	ret

0000049a <main>:
LOCKBITS = LB_NOLOCK_gc;	/* No locks */
// LOCKBITS = LB_RWLOCK_gc;	/* Read and write lock */


int main(void)
{
     49a:	cf 93       	push	r28
     49c:	df 93       	push	r29
     49e:	cd b7       	in	r28, 0x3d	; 61
     4a0:	de b7       	in	r29, 0x3e	; 62
	/* Initializes MCU, drivers and middleware */
	atmel_start_init();
     4a2:	0e 94 5d 00 	call	0xba	; 0xba <atmel_start_init>

	set_sleep_mode(SLEEP_MODE_IDLE);
     4a6:	80 e5       	ldi	r24, 0x50	; 80
     4a8:	90 e0       	ldi	r25, 0x00	; 0
     4aa:	20 e5       	ldi	r18, 0x50	; 80
     4ac:	30 e0       	ldi	r19, 0x00	; 0
     4ae:	f9 01       	movw	r30, r18
     4b0:	20 81       	ld	r18, Z
     4b2:	29 7f       	andi	r18, 0xF9	; 249
     4b4:	fc 01       	movw	r30, r24
     4b6:	20 83       	st	Z, r18

	/* Replace with your application code */
	while (1) {
		
		touch_example();
     4b8:	0e 94 a8 01 	call	0x350	; 0x350 <touch_example>
				
		sleep_mode();
     4bc:	80 e5       	ldi	r24, 0x50	; 80
     4be:	90 e0       	ldi	r25, 0x00	; 0
     4c0:	20 e5       	ldi	r18, 0x50	; 80
     4c2:	30 e0       	ldi	r19, 0x00	; 0
     4c4:	f9 01       	movw	r30, r18
     4c6:	20 81       	ld	r18, Z
     4c8:	21 60       	ori	r18, 0x01	; 1
     4ca:	fc 01       	movw	r30, r24
     4cc:	20 83       	st	Z, r18
     4ce:	88 95       	sleep
     4d0:	80 e5       	ldi	r24, 0x50	; 80
     4d2:	90 e0       	ldi	r25, 0x00	; 0
     4d4:	20 e5       	ldi	r18, 0x50	; 80
     4d6:	30 e0       	ldi	r19, 0x00	; 0
     4d8:	f9 01       	movw	r30, r18
     4da:	20 81       	ld	r18, Z
     4dc:	2e 7f       	andi	r18, 0xFE	; 254
     4de:	fc 01       	movw	r30, r24
     4e0:	20 83       	st	Z, r18
	}
     4e2:	ea cf       	rjmp	.-44     	; 0x4b8 <main+0x1e>

000004e4 <datastreamer_init>:
Input  : none
Output : none
Notes  :
============================================================================*/
void datastreamer_init(void)
{
     4e4:	cf 93       	push	r28
     4e6:	df 93       	push	r29
     4e8:	cd b7       	in	r28, 0x3d	; 61
     4ea:	de b7       	in	r29, 0x3e	; 62
}
     4ec:	00 00       	nop
     4ee:	df 91       	pop	r29
     4f0:	cf 91       	pop	r28
     4f2:	08 95       	ret

000004f4 <datastreamer_transmit>:
Input  : Byte to be transmitted
Output : none
Notes  :
============================================================================*/
void datastreamer_transmit(uint8_t data_byte)
{
     4f4:	cf 93       	push	r28
     4f6:	df 93       	push	r29
     4f8:	1f 92       	push	r1
     4fa:	cd b7       	in	r28, 0x3d	; 61
     4fc:	de b7       	in	r29, 0x3e	; 62
     4fe:	89 83       	std	Y+1, r24	; 0x01
	while (!USART_is_tx_ready())
     500:	00 00       	nop
     502:	0e 94 58 0a 	call	0x14b0	; 0x14b0 <USART_is_tx_ready>
     506:	98 2f       	mov	r25, r24
     508:	81 e0       	ldi	r24, 0x01	; 1
     50a:	89 27       	eor	r24, r25
     50c:	88 23       	and	r24, r24
     50e:	c9 f7       	brne	.-14     	; 0x502 <datastreamer_transmit+0xe>
		;

	USART_write(data_byte);
     510:	89 81       	ldd	r24, Y+1	; 0x01
     512:	0e 94 80 0a 	call	0x1500	; 0x1500 <USART_write>

	while (USART_is_tx_busy())
     516:	00 00       	nop
     518:	0e 94 6c 0a 	call	0x14d8	; 0x14d8 <USART_is_tx_busy>
     51c:	88 23       	and	r24, r24
     51e:	e1 f7       	brne	.-8      	; 0x518 <datastreamer_transmit+0x24>
		;
}
     520:	00 00       	nop
     522:	0f 90       	pop	r0
     524:	df 91       	pop	r29
     526:	cf 91       	pop	r28
     528:	08 95       	ret

0000052a <datastreamer_output>:
Output : none
Notes  : The data visualizer scripts that are generated in the project should be
         set on the data visualizer software.
============================================================================*/
void datastreamer_output(void)
{
     52a:	cf 93       	push	r28
     52c:	df 93       	push	r29
     52e:	cd b7       	in	r28, 0x3d	; 61
     530:	de b7       	in	r29, 0x3e	; 62
     532:	2b 97       	sbiw	r28, 0x0b	; 11
     534:	cd bf       	out	0x3d, r28	; 61
     536:	de bf       	out	0x3e, r29	; 62
	static uint8_t    sequence = 0u;
	uint16_t          u16temp_output;
	uint8_t           u8temp_output, send_header;
	volatile uint16_t count_bytes_out;

	send_header = sequence & (0x0f);
     538:	80 91 78 38 	lds	r24, 0x3878	; 0x803878 <sequence.4248>
     53c:	8f 70       	andi	r24, 0x0F	; 15
     53e:	8c 83       	std	Y+4, r24	; 0x04
	if (send_header == 0) {
     540:	8c 81       	ldd	r24, Y+4	; 0x04
     542:	88 23       	and	r24, r24
     544:	a1 f4       	brne	.+40     	; 0x56e <datastreamer_output+0x44>
		for (i = 0; i < sizeof(data); i++) {
     546:	19 82       	std	Y+1, r1	; 0x01
     548:	1a 82       	std	Y+2, r1	; 0x02
     54a:	0d c0       	rjmp	.+26     	; 0x566 <datastreamer_output+0x3c>
			datastreamer_transmit(data[i]);
     54c:	89 81       	ldd	r24, Y+1	; 0x01
     54e:	9a 81       	ldd	r25, Y+2	; 0x02
     550:	80 50       	subi	r24, 0x00	; 0
     552:	98 4c       	sbci	r25, 0xC8	; 200
     554:	fc 01       	movw	r30, r24
     556:	80 81       	ld	r24, Z
     558:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <datastreamer_transmit>
	uint8_t           u8temp_output, send_header;
	volatile uint16_t count_bytes_out;

	send_header = sequence & (0x0f);
	if (send_header == 0) {
		for (i = 0; i < sizeof(data); i++) {
     55c:	89 81       	ldd	r24, Y+1	; 0x01
     55e:	9a 81       	ldd	r25, Y+2	; 0x02
     560:	01 96       	adiw	r24, 0x01	; 1
     562:	89 83       	std	Y+1, r24	; 0x01
     564:	9a 83       	std	Y+2, r25	; 0x02
     566:	89 81       	ldd	r24, Y+1	; 0x01
     568:	9a 81       	ldd	r25, Y+2	; 0x02
     56a:	43 97       	sbiw	r24, 0x13	; 19
     56c:	78 f3       	brcs	.-34     	; 0x54c <datastreamer_output+0x22>
			datastreamer_transmit(data[i]);
		}
	}

	// Start token
	datastreamer_transmit(0x55);
     56e:	85 e5       	ldi	r24, 0x55	; 85
     570:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <datastreamer_transmit>

	// Frame Start
	datastreamer_transmit(sequence);
     574:	80 91 78 38 	lds	r24, 0x3878	; 0x803878 <sequence.4248>
     578:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <datastreamer_transmit>
	for (count_bytes_out = 0u; count_bytes_out < DEF_NUM_CHANNELS; count_bytes_out++) {
     57c:	1a 86       	std	Y+10, r1	; 0x0a
     57e:	1b 86       	std	Y+11, r1	; 0x0b
     580:	6c c0       	rjmp	.+216    	; 0x65a <datastreamer_output+0x130>

		/* Signals */
		u16temp_output = get_sensor_node_signal(count_bytes_out);
     582:	8a 85       	ldd	r24, Y+10	; 0x0a
     584:	9b 85       	ldd	r25, Y+11	; 0x0b
     586:	0e 94 9e 05 	call	0xb3c	; 0xb3c <get_sensor_node_signal>
     58a:	8d 83       	std	Y+5, r24	; 0x05
     58c:	9e 83       	std	Y+6, r25	; 0x06
		datastreamer_transmit((uint8_t)u16temp_output);
     58e:	8d 81       	ldd	r24, Y+5	; 0x05
     590:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <datastreamer_transmit>
		datastreamer_transmit((uint8_t)(u16temp_output >> 8u));
     594:	8d 81       	ldd	r24, Y+5	; 0x05
     596:	9e 81       	ldd	r25, Y+6	; 0x06
     598:	89 2f       	mov	r24, r25
     59a:	99 27       	eor	r25, r25
     59c:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <datastreamer_transmit>

		/* Reference */
		u16temp_output = get_sensor_node_reference(count_bytes_out);
     5a0:	8a 85       	ldd	r24, Y+10	; 0x0a
     5a2:	9b 85       	ldd	r25, Y+11	; 0x0b
     5a4:	0e 94 b8 05 	call	0xb70	; 0xb70 <get_sensor_node_reference>
     5a8:	8d 83       	std	Y+5, r24	; 0x05
     5aa:	9e 83       	std	Y+6, r25	; 0x06
		datastreamer_transmit((uint8_t)u16temp_output);
     5ac:	8d 81       	ldd	r24, Y+5	; 0x05
     5ae:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <datastreamer_transmit>
		datastreamer_transmit((uint8_t)(u16temp_output >> 8u));
     5b2:	8d 81       	ldd	r24, Y+5	; 0x05
     5b4:	9e 81       	ldd	r25, Y+6	; 0x06
     5b6:	89 2f       	mov	r24, r25
     5b8:	99 27       	eor	r25, r25
     5ba:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <datastreamer_transmit>

		/* Touch delta */
		temp_int_calc = get_sensor_node_signal(count_bytes_out);
     5be:	8a 85       	ldd	r24, Y+10	; 0x0a
     5c0:	9b 85       	ldd	r25, Y+11	; 0x0b
     5c2:	0e 94 9e 05 	call	0xb3c	; 0xb3c <get_sensor_node_signal>
     5c6:	8f 83       	std	Y+7, r24	; 0x07
     5c8:	98 87       	std	Y+8, r25	; 0x08
		temp_int_calc -= get_sensor_node_reference(count_bytes_out);
     5ca:	8a 85       	ldd	r24, Y+10	; 0x0a
     5cc:	9b 85       	ldd	r25, Y+11	; 0x0b
     5ce:	0e 94 b8 05 	call	0xb70	; 0xb70 <get_sensor_node_reference>
     5d2:	9c 01       	movw	r18, r24
     5d4:	8f 81       	ldd	r24, Y+7	; 0x07
     5d6:	98 85       	ldd	r25, Y+8	; 0x08
     5d8:	82 1b       	sub	r24, r18
     5da:	93 0b       	sbc	r25, r19
     5dc:	8f 83       	std	Y+7, r24	; 0x07
     5de:	98 87       	std	Y+8, r25	; 0x08
		u16temp_output = (uint16_t)(temp_int_calc);
     5e0:	8f 81       	ldd	r24, Y+7	; 0x07
     5e2:	98 85       	ldd	r25, Y+8	; 0x08
     5e4:	8d 83       	std	Y+5, r24	; 0x05
     5e6:	9e 83       	std	Y+6, r25	; 0x06
		datastreamer_transmit((uint8_t)u16temp_output);
     5e8:	8d 81       	ldd	r24, Y+5	; 0x05
     5ea:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <datastreamer_transmit>
		datastreamer_transmit((uint8_t)(u16temp_output >> 8u));
     5ee:	8d 81       	ldd	r24, Y+5	; 0x05
     5f0:	9e 81       	ldd	r25, Y+6	; 0x06
     5f2:	89 2f       	mov	r24, r25
     5f4:	99 27       	eor	r25, r25
     5f6:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <datastreamer_transmit>

		/* Comp Caps */
		u16temp_output = get_sensor_cc_val(count_bytes_out);
     5fa:	8a 85       	ldd	r24, Y+10	; 0x0a
     5fc:	9b 85       	ldd	r25, Y+11	; 0x0b
     5fe:	0e 94 d2 05 	call	0xba4	; 0xba4 <get_sensor_cc_val>
     602:	8d 83       	std	Y+5, r24	; 0x05
     604:	9e 83       	std	Y+6, r25	; 0x06
		datastreamer_transmit((uint8_t)u16temp_output);
     606:	8d 81       	ldd	r24, Y+5	; 0x05
     608:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <datastreamer_transmit>
		datastreamer_transmit((uint8_t)(u16temp_output >> 8u));
     60c:	8d 81       	ldd	r24, Y+5	; 0x05
     60e:	9e 81       	ldd	r25, Y+6	; 0x06
     610:	89 2f       	mov	r24, r25
     612:	99 27       	eor	r25, r25
     614:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <datastreamer_transmit>
		datastreamer_transmit(u8temp_output);
#endif
#endif

		/* State */
		u8temp_output = get_sensor_state(count_bytes_out);
     618:	8a 85       	ldd	r24, Y+10	; 0x0a
     61a:	9b 85       	ldd	r25, Y+11	; 0x0b
     61c:	0e 94 ec 05 	call	0xbd8	; 0xbd8 <get_sensor_state>
     620:	89 87       	std	Y+9, r24	; 0x09
		if (0u != (u8temp_output & 0x80)) {
     622:	89 85       	ldd	r24, Y+9	; 0x09
     624:	88 23       	and	r24, r24
     626:	24 f4       	brge	.+8      	; 0x630 <datastreamer_output+0x106>
			datastreamer_transmit(0x01);
     628:	81 e0       	ldi	r24, 0x01	; 1
     62a:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <datastreamer_transmit>
     62e:	03 c0       	rjmp	.+6      	; 0x636 <datastreamer_output+0x10c>
		} else {
			datastreamer_transmit(0x00);
     630:	80 e0       	ldi	r24, 0x00	; 0
     632:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <datastreamer_transmit>
		}

		/* Threshold */
		datastreamer_transmit(qtlib_key_configs_set1[count_bytes_out].channel_threshold);
     636:	2a 85       	ldd	r18, Y+10	; 0x0a
     638:	3b 85       	ldd	r19, Y+11	; 0x0b
     63a:	c9 01       	movw	r24, r18
     63c:	88 0f       	add	r24, r24
     63e:	99 1f       	adc	r25, r25
     640:	82 0f       	add	r24, r18
     642:	93 1f       	adc	r25, r19
     644:	8f 59       	subi	r24, 0x9F	; 159
     646:	97 4c       	sbci	r25, 0xC7	; 199
     648:	fc 01       	movw	r30, r24
     64a:	80 81       	ld	r24, Z
     64c:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <datastreamer_transmit>
	// Start token
	datastreamer_transmit(0x55);

	// Frame Start
	datastreamer_transmit(sequence);
	for (count_bytes_out = 0u; count_bytes_out < DEF_NUM_CHANNELS; count_bytes_out++) {
     650:	8a 85       	ldd	r24, Y+10	; 0x0a
     652:	9b 85       	ldd	r25, Y+11	; 0x0b
     654:	01 96       	adiw	r24, 0x01	; 1
     656:	8a 87       	std	Y+10, r24	; 0x0a
     658:	9b 87       	std	Y+11, r25	; 0x0b
     65a:	8a 85       	ldd	r24, Y+10	; 0x0a
     65c:	9b 85       	ldd	r25, Y+11	; 0x0b
     65e:	04 97       	sbiw	r24, 0x04	; 4
     660:	08 f4       	brcc	.+2      	; 0x664 <datastreamer_output+0x13a>
     662:	8f cf       	rjmp	.-226    	; 0x582 <datastreamer_output+0x58>
#endif

#if (FREQ_HOP_AUTO_MODULE_OUTPUT == 1)

	/* Frequency selection - from acq module */
	datastreamer_transmit(qtlib_acq_set1.qtm_acq_node_group_config->freq_option_select);
     664:	80 91 38 38 	lds	r24, 0x3838	; 0x803838 <qtlib_acq_set1>
     668:	90 91 39 38 	lds	r25, 0x3839	; 0x803839 <qtlib_acq_set1+0x1>
     66c:	fc 01       	movw	r30, r24
     66e:	84 81       	ldd	r24, Z+4	; 0x04
     670:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <datastreamer_transmit>

	for (uint8_t count = 0u; count < qtm_freq_hop_autotune_control1.qtm_freq_hop_autotune_config->num_freqs; count++) {
     674:	1b 82       	std	Y+3, r1	; 0x03
     676:	13 c0       	rjmp	.+38     	; 0x69e <datastreamer_output+0x174>
		/* Frequencies */
		datastreamer_transmit(qtm_freq_hop_autotune_control1.qtm_freq_hop_autotune_config->median_filter_freq[count]);
     678:	80 91 55 38 	lds	r24, 0x3855	; 0x803855 <qtm_freq_hop_autotune_control1+0x2>
     67c:	90 91 56 38 	lds	r25, 0x3856	; 0x803856 <qtm_freq_hop_autotune_control1+0x3>
     680:	fc 01       	movw	r30, r24
     682:	25 81       	ldd	r18, Z+5	; 0x05
     684:	36 81       	ldd	r19, Z+6	; 0x06
     686:	8b 81       	ldd	r24, Y+3	; 0x03
     688:	88 2f       	mov	r24, r24
     68a:	90 e0       	ldi	r25, 0x00	; 0
     68c:	82 0f       	add	r24, r18
     68e:	93 1f       	adc	r25, r19
     690:	fc 01       	movw	r30, r24
     692:	80 81       	ld	r24, Z
     694:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <datastreamer_transmit>
#if (FREQ_HOP_AUTO_MODULE_OUTPUT == 1)

	/* Frequency selection - from acq module */
	datastreamer_transmit(qtlib_acq_set1.qtm_acq_node_group_config->freq_option_select);

	for (uint8_t count = 0u; count < qtm_freq_hop_autotune_control1.qtm_freq_hop_autotune_config->num_freqs; count++) {
     698:	8b 81       	ldd	r24, Y+3	; 0x03
     69a:	8f 5f       	subi	r24, 0xFF	; 255
     69c:	8b 83       	std	Y+3, r24	; 0x03
     69e:	80 91 55 38 	lds	r24, 0x3855	; 0x803855 <qtm_freq_hop_autotune_control1+0x2>
     6a2:	90 91 56 38 	lds	r25, 0x3856	; 0x803856 <qtm_freq_hop_autotune_control1+0x3>
     6a6:	fc 01       	movw	r30, r24
     6a8:	92 81       	ldd	r25, Z+2	; 0x02
     6aa:	8b 81       	ldd	r24, Y+3	; 0x03
     6ac:	89 17       	cp	r24, r25
     6ae:	20 f3       	brcs	.-56     	; 0x678 <datastreamer_output+0x14e>
		datastreamer_transmit(qtm_freq_hop_autotune_control1.qtm_freq_hop_autotune_config->median_filter_freq[count]);
	}
#endif

	/* Other Debug Parameters */
	datastreamer_transmit(module_error_code);
     6b0:	80 91 7c 38 	lds	r24, 0x387C	; 0x80387c <module_error_code>
     6b4:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <datastreamer_transmit>

	/* Frame End */
	datastreamer_transmit(sequence++);
     6b8:	80 91 78 38 	lds	r24, 0x3878	; 0x803878 <sequence.4248>
     6bc:	91 e0       	ldi	r25, 0x01	; 1
     6be:	98 0f       	add	r25, r24
     6c0:	90 93 78 38 	sts	0x3878, r25	; 0x803878 <sequence.4248>
     6c4:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <datastreamer_transmit>

	/* End token */
	datastreamer_transmit(~0x55);
     6c8:	8a ea       	ldi	r24, 0xAA	; 170
     6ca:	0e 94 7a 02 	call	0x4f4	; 0x4f4 <datastreamer_transmit>
}
     6ce:	00 00       	nop
     6d0:	2b 96       	adiw	r28, 0x0b	; 11
     6d2:	cd bf       	out	0x3d, r28	; 61
     6d4:	de bf       	out	0x3e, r29	; 62
     6d6:	df 91       	pop	r29
     6d8:	cf 91       	pop	r28
     6da:	08 95       	ret

000006dc <PORTA_set_pin_pull_mode>:
{
	/* Calibrate Node */
	qtm_calibrate_sensor_node(&qtlib_acq_set1, sensor_node);
	/* Initialize key */
	qtm_init_sensor_key(&qtlib_key_set1, sensor_node, &ptc_qtlib_node_stat1[sensor_node]);
}
     6dc:	cf 93       	push	r28
     6de:	df 93       	push	r29
     6e0:	00 d0       	rcall	.+0      	; 0x6e2 <PORTA_set_pin_pull_mode+0x6>
     6e2:	00 d0       	rcall	.+0      	; 0x6e4 <PORTA_set_pin_pull_mode+0x8>
     6e4:	cd b7       	in	r28, 0x3d	; 61
     6e6:	de b7       	in	r29, 0x3e	; 62
     6e8:	8b 83       	std	Y+3, r24	; 0x03
     6ea:	6c 83       	std	Y+4, r22	; 0x04
     6ec:	8b 81       	ldd	r24, Y+3	; 0x03
     6ee:	88 2f       	mov	r24, r24
     6f0:	90 e0       	ldi	r25, 0x00	; 0
     6f2:	80 5f       	subi	r24, 0xF0	; 240
     6f4:	9b 4f       	sbci	r25, 0xFB	; 251
     6f6:	89 83       	std	Y+1, r24	; 0x01
     6f8:	9a 83       	std	Y+2, r25	; 0x02
     6fa:	8c 81       	ldd	r24, Y+4	; 0x04
     6fc:	81 30       	cpi	r24, 0x01	; 1
     6fe:	59 f4       	brne	.+22     	; 0x716 <PORTA_set_pin_pull_mode+0x3a>
     700:	89 81       	ldd	r24, Y+1	; 0x01
     702:	9a 81       	ldd	r25, Y+2	; 0x02
     704:	fc 01       	movw	r30, r24
     706:	80 81       	ld	r24, Z
     708:	28 2f       	mov	r18, r24
     70a:	28 60       	ori	r18, 0x08	; 8
     70c:	89 81       	ldd	r24, Y+1	; 0x01
     70e:	9a 81       	ldd	r25, Y+2	; 0x02
     710:	fc 01       	movw	r30, r24
     712:	20 83       	st	Z, r18
     714:	0d c0       	rjmp	.+26     	; 0x730 <PORTA_set_pin_pull_mode+0x54>
     716:	8c 81       	ldd	r24, Y+4	; 0x04
     718:	88 23       	and	r24, r24
     71a:	51 f4       	brne	.+20     	; 0x730 <PORTA_set_pin_pull_mode+0x54>
     71c:	89 81       	ldd	r24, Y+1	; 0x01
     71e:	9a 81       	ldd	r25, Y+2	; 0x02
     720:	fc 01       	movw	r30, r24
     722:	80 81       	ld	r24, Z
     724:	28 2f       	mov	r18, r24
     726:	27 7f       	andi	r18, 0xF7	; 247
     728:	89 81       	ldd	r24, Y+1	; 0x01
     72a:	9a 81       	ldd	r25, Y+2	; 0x02
     72c:	fc 01       	movw	r30, r24
     72e:	20 83       	st	Z, r18
     730:	00 00       	nop
     732:	24 96       	adiw	r28, 0x04	; 4
     734:	cd bf       	out	0x3d, r28	; 61
     736:	de bf       	out	0x3e, r29	; 62
     738:	df 91       	pop	r29
     73a:	cf 91       	pop	r28
     73c:	08 95       	ret

0000073e <PORTA_pin_set_isc>:
     73e:	cf 93       	push	r28
     740:	df 93       	push	r29
     742:	00 d0       	rcall	.+0      	; 0x744 <PORTA_pin_set_isc+0x6>
     744:	00 d0       	rcall	.+0      	; 0x746 <PORTA_pin_set_isc+0x8>
     746:	cd b7       	in	r28, 0x3d	; 61
     748:	de b7       	in	r29, 0x3e	; 62
     74a:	8b 83       	std	Y+3, r24	; 0x03
     74c:	6c 83       	std	Y+4, r22	; 0x04
     74e:	8b 81       	ldd	r24, Y+3	; 0x03
     750:	88 2f       	mov	r24, r24
     752:	90 e0       	ldi	r25, 0x00	; 0
     754:	80 5f       	subi	r24, 0xF0	; 240
     756:	9b 4f       	sbci	r25, 0xFB	; 251
     758:	89 83       	std	Y+1, r24	; 0x01
     75a:	9a 83       	std	Y+2, r25	; 0x02
     75c:	89 81       	ldd	r24, Y+1	; 0x01
     75e:	9a 81       	ldd	r25, Y+2	; 0x02
     760:	fc 01       	movw	r30, r24
     762:	80 81       	ld	r24, Z
     764:	98 2f       	mov	r25, r24
     766:	98 7f       	andi	r25, 0xF8	; 248
     768:	8c 81       	ldd	r24, Y+4	; 0x04
     76a:	89 2b       	or	r24, r25
     76c:	28 2f       	mov	r18, r24
     76e:	89 81       	ldd	r24, Y+1	; 0x01
     770:	9a 81       	ldd	r25, Y+2	; 0x02
     772:	fc 01       	movw	r30, r24
     774:	20 83       	st	Z, r18
     776:	00 00       	nop
     778:	24 96       	adiw	r28, 0x04	; 4
     77a:	cd bf       	out	0x3d, r28	; 61
     77c:	de bf       	out	0x3e, r29	; 62
     77e:	df 91       	pop	r29
     780:	cf 91       	pop	r28
     782:	08 95       	ret

00000784 <PORTB_set_pin_pull_mode>:
     784:	cf 93       	push	r28
     786:	df 93       	push	r29
     788:	00 d0       	rcall	.+0      	; 0x78a <PORTB_set_pin_pull_mode+0x6>
     78a:	00 d0       	rcall	.+0      	; 0x78c <PORTB_set_pin_pull_mode+0x8>
     78c:	cd b7       	in	r28, 0x3d	; 61
     78e:	de b7       	in	r29, 0x3e	; 62
     790:	8b 83       	std	Y+3, r24	; 0x03
     792:	6c 83       	std	Y+4, r22	; 0x04
     794:	8b 81       	ldd	r24, Y+3	; 0x03
     796:	88 2f       	mov	r24, r24
     798:	90 e0       	ldi	r25, 0x00	; 0
     79a:	80 5d       	subi	r24, 0xD0	; 208
     79c:	9b 4f       	sbci	r25, 0xFB	; 251
     79e:	89 83       	std	Y+1, r24	; 0x01
     7a0:	9a 83       	std	Y+2, r25	; 0x02
     7a2:	8c 81       	ldd	r24, Y+4	; 0x04
     7a4:	81 30       	cpi	r24, 0x01	; 1
     7a6:	59 f4       	brne	.+22     	; 0x7be <PORTB_set_pin_pull_mode+0x3a>
     7a8:	89 81       	ldd	r24, Y+1	; 0x01
     7aa:	9a 81       	ldd	r25, Y+2	; 0x02
     7ac:	fc 01       	movw	r30, r24
     7ae:	80 81       	ld	r24, Z
     7b0:	28 2f       	mov	r18, r24
     7b2:	28 60       	ori	r18, 0x08	; 8
     7b4:	89 81       	ldd	r24, Y+1	; 0x01
     7b6:	9a 81       	ldd	r25, Y+2	; 0x02
     7b8:	fc 01       	movw	r30, r24
     7ba:	20 83       	st	Z, r18
     7bc:	0d c0       	rjmp	.+26     	; 0x7d8 <PORTB_set_pin_pull_mode+0x54>
     7be:	8c 81       	ldd	r24, Y+4	; 0x04
     7c0:	88 23       	and	r24, r24
     7c2:	51 f4       	brne	.+20     	; 0x7d8 <PORTB_set_pin_pull_mode+0x54>
     7c4:	89 81       	ldd	r24, Y+1	; 0x01
     7c6:	9a 81       	ldd	r25, Y+2	; 0x02
     7c8:	fc 01       	movw	r30, r24
     7ca:	80 81       	ld	r24, Z
     7cc:	28 2f       	mov	r18, r24
     7ce:	27 7f       	andi	r18, 0xF7	; 247
     7d0:	89 81       	ldd	r24, Y+1	; 0x01
     7d2:	9a 81       	ldd	r25, Y+2	; 0x02
     7d4:	fc 01       	movw	r30, r24
     7d6:	20 83       	st	Z, r18
     7d8:	00 00       	nop
     7da:	24 96       	adiw	r28, 0x04	; 4
     7dc:	cd bf       	out	0x3d, r28	; 61
     7de:	de bf       	out	0x3e, r29	; 62
     7e0:	df 91       	pop	r29
     7e2:	cf 91       	pop	r28
     7e4:	08 95       	ret

000007e6 <PORTB_pin_set_isc>:
     7e6:	cf 93       	push	r28
     7e8:	df 93       	push	r29
     7ea:	00 d0       	rcall	.+0      	; 0x7ec <PORTB_pin_set_isc+0x6>
     7ec:	00 d0       	rcall	.+0      	; 0x7ee <PORTB_pin_set_isc+0x8>
     7ee:	cd b7       	in	r28, 0x3d	; 61
     7f0:	de b7       	in	r29, 0x3e	; 62
     7f2:	8b 83       	std	Y+3, r24	; 0x03
     7f4:	6c 83       	std	Y+4, r22	; 0x04
     7f6:	8b 81       	ldd	r24, Y+3	; 0x03
     7f8:	88 2f       	mov	r24, r24
     7fa:	90 e0       	ldi	r25, 0x00	; 0
     7fc:	80 5d       	subi	r24, 0xD0	; 208
     7fe:	9b 4f       	sbci	r25, 0xFB	; 251
     800:	89 83       	std	Y+1, r24	; 0x01
     802:	9a 83       	std	Y+2, r25	; 0x02
     804:	89 81       	ldd	r24, Y+1	; 0x01
     806:	9a 81       	ldd	r25, Y+2	; 0x02
     808:	fc 01       	movw	r30, r24
     80a:	80 81       	ld	r24, Z
     80c:	98 2f       	mov	r25, r24
     80e:	98 7f       	andi	r25, 0xF8	; 248
     810:	8c 81       	ldd	r24, Y+4	; 0x04
     812:	89 2b       	or	r24, r25
     814:	28 2f       	mov	r18, r24
     816:	89 81       	ldd	r24, Y+1	; 0x01
     818:	9a 81       	ldd	r25, Y+2	; 0x02
     81a:	fc 01       	movw	r30, r24
     81c:	20 83       	st	Z, r18
     81e:	00 00       	nop
     820:	24 96       	adiw	r28, 0x04	; 4
     822:	cd bf       	out	0x3d, r28	; 61
     824:	de bf       	out	0x3e, r29	; 62
     826:	df 91       	pop	r29
     828:	cf 91       	pop	r28
     82a:	08 95       	ret

0000082c <PORTC_set_pin_pull_mode>:
     82c:	cf 93       	push	r28
     82e:	df 93       	push	r29
     830:	00 d0       	rcall	.+0      	; 0x832 <PORTC_set_pin_pull_mode+0x6>
     832:	00 d0       	rcall	.+0      	; 0x834 <PORTC_set_pin_pull_mode+0x8>
     834:	cd b7       	in	r28, 0x3d	; 61
     836:	de b7       	in	r29, 0x3e	; 62
     838:	8b 83       	std	Y+3, r24	; 0x03
     83a:	6c 83       	std	Y+4, r22	; 0x04
     83c:	8b 81       	ldd	r24, Y+3	; 0x03
     83e:	88 2f       	mov	r24, r24
     840:	90 e0       	ldi	r25, 0x00	; 0
     842:	80 5b       	subi	r24, 0xB0	; 176
     844:	9b 4f       	sbci	r25, 0xFB	; 251
     846:	89 83       	std	Y+1, r24	; 0x01
     848:	9a 83       	std	Y+2, r25	; 0x02
     84a:	8c 81       	ldd	r24, Y+4	; 0x04
     84c:	81 30       	cpi	r24, 0x01	; 1
     84e:	59 f4       	brne	.+22     	; 0x866 <PORTC_set_pin_pull_mode+0x3a>
     850:	89 81       	ldd	r24, Y+1	; 0x01
     852:	9a 81       	ldd	r25, Y+2	; 0x02
     854:	fc 01       	movw	r30, r24
     856:	80 81       	ld	r24, Z
     858:	28 2f       	mov	r18, r24
     85a:	28 60       	ori	r18, 0x08	; 8
     85c:	89 81       	ldd	r24, Y+1	; 0x01
     85e:	9a 81       	ldd	r25, Y+2	; 0x02
     860:	fc 01       	movw	r30, r24
     862:	20 83       	st	Z, r18
     864:	0d c0       	rjmp	.+26     	; 0x880 <PORTC_set_pin_pull_mode+0x54>
     866:	8c 81       	ldd	r24, Y+4	; 0x04
     868:	88 23       	and	r24, r24
     86a:	51 f4       	brne	.+20     	; 0x880 <PORTC_set_pin_pull_mode+0x54>
     86c:	89 81       	ldd	r24, Y+1	; 0x01
     86e:	9a 81       	ldd	r25, Y+2	; 0x02
     870:	fc 01       	movw	r30, r24
     872:	80 81       	ld	r24, Z
     874:	28 2f       	mov	r18, r24
     876:	27 7f       	andi	r18, 0xF7	; 247
     878:	89 81       	ldd	r24, Y+1	; 0x01
     87a:	9a 81       	ldd	r25, Y+2	; 0x02
     87c:	fc 01       	movw	r30, r24
     87e:	20 83       	st	Z, r18
     880:	00 00       	nop
     882:	24 96       	adiw	r28, 0x04	; 4
     884:	cd bf       	out	0x3d, r28	; 61
     886:	de bf       	out	0x3e, r29	; 62
     888:	df 91       	pop	r29
     88a:	cf 91       	pop	r28
     88c:	08 95       	ret

0000088e <PORTC_pin_set_isc>:
     88e:	cf 93       	push	r28
     890:	df 93       	push	r29
     892:	00 d0       	rcall	.+0      	; 0x894 <PORTC_pin_set_isc+0x6>
     894:	00 d0       	rcall	.+0      	; 0x896 <PORTC_pin_set_isc+0x8>
     896:	cd b7       	in	r28, 0x3d	; 61
     898:	de b7       	in	r29, 0x3e	; 62
     89a:	8b 83       	std	Y+3, r24	; 0x03
     89c:	6c 83       	std	Y+4, r22	; 0x04
     89e:	8b 81       	ldd	r24, Y+3	; 0x03
     8a0:	88 2f       	mov	r24, r24
     8a2:	90 e0       	ldi	r25, 0x00	; 0
     8a4:	80 5b       	subi	r24, 0xB0	; 176
     8a6:	9b 4f       	sbci	r25, 0xFB	; 251
     8a8:	89 83       	std	Y+1, r24	; 0x01
     8aa:	9a 83       	std	Y+2, r25	; 0x02
     8ac:	89 81       	ldd	r24, Y+1	; 0x01
     8ae:	9a 81       	ldd	r25, Y+2	; 0x02
     8b0:	fc 01       	movw	r30, r24
     8b2:	80 81       	ld	r24, Z
     8b4:	98 2f       	mov	r25, r24
     8b6:	98 7f       	andi	r25, 0xF8	; 248
     8b8:	8c 81       	ldd	r24, Y+4	; 0x04
     8ba:	89 2b       	or	r24, r25
     8bc:	28 2f       	mov	r18, r24
     8be:	89 81       	ldd	r24, Y+1	; 0x01
     8c0:	9a 81       	ldd	r25, Y+2	; 0x02
     8c2:	fc 01       	movw	r30, r24
     8c4:	20 83       	st	Z, r18
     8c6:	00 00       	nop
     8c8:	24 96       	adiw	r28, 0x04	; 4
     8ca:	cd bf       	out	0x3d, r28	; 61
     8cc:	de bf       	out	0x3e, r29	; 62
     8ce:	df 91       	pop	r29
     8d0:	cf 91       	pop	r28
     8d2:	08 95       	ret

000008d4 <touch_ptc_pin_config>:
     8d4:	cf 93       	push	r28
     8d6:	df 93       	push	r29
     8d8:	cd b7       	in	r28, 0x3d	; 61
     8da:	de b7       	in	r29, 0x3e	; 62
     8dc:	60 e0       	ldi	r22, 0x00	; 0
     8de:	84 e0       	ldi	r24, 0x04	; 4
     8e0:	0e 94 c2 03 	call	0x784	; 0x784 <PORTB_set_pin_pull_mode>
     8e4:	64 e0       	ldi	r22, 0x04	; 4
     8e6:	84 e0       	ldi	r24, 0x04	; 4
     8e8:	0e 94 f3 03 	call	0x7e6	; 0x7e6 <PORTB_pin_set_isc>
     8ec:	60 e0       	ldi	r22, 0x00	; 0
     8ee:	87 e0       	ldi	r24, 0x07	; 7
     8f0:	0e 94 6e 03 	call	0x6dc	; 0x6dc <PORTA_set_pin_pull_mode>
     8f4:	64 e0       	ldi	r22, 0x04	; 4
     8f6:	87 e0       	ldi	r24, 0x07	; 7
     8f8:	0e 94 9f 03 	call	0x73e	; 0x73e <PORTA_pin_set_isc>
     8fc:	60 e0       	ldi	r22, 0x00	; 0
     8fe:	82 e0       	ldi	r24, 0x02	; 2
     900:	0e 94 16 04 	call	0x82c	; 0x82c <PORTC_set_pin_pull_mode>
     904:	64 e0       	ldi	r22, 0x04	; 4
     906:	82 e0       	ldi	r24, 0x02	; 2
     908:	0e 94 47 04 	call	0x88e	; 0x88e <PORTC_pin_set_isc>
     90c:	60 e0       	ldi	r22, 0x00	; 0
     90e:	86 e0       	ldi	r24, 0x06	; 6
     910:	0e 94 6e 03 	call	0x6dc	; 0x6dc <PORTA_set_pin_pull_mode>
     914:	64 e0       	ldi	r22, 0x04	; 4
     916:	86 e0       	ldi	r24, 0x06	; 6
     918:	0e 94 9f 03 	call	0x73e	; 0x73e <PORTA_pin_set_isc>
     91c:	60 e0       	ldi	r22, 0x00	; 0
     91e:	81 e0       	ldi	r24, 0x01	; 1
     920:	0e 94 16 04 	call	0x82c	; 0x82c <PORTC_set_pin_pull_mode>
     924:	64 e0       	ldi	r22, 0x04	; 4
     926:	81 e0       	ldi	r24, 0x01	; 1
     928:	0e 94 47 04 	call	0x88e	; 0x88e <PORTC_pin_set_isc>
     92c:	00 00       	nop
     92e:	df 91       	pop	r29
     930:	cf 91       	pop	r28
     932:	08 95       	ret

00000934 <touch_sensors_config>:
     934:	cf 93       	push	r28
     936:	df 93       	push	r29
     938:	00 d0       	rcall	.+0      	; 0x93a <touch_sensors_config+0x6>
     93a:	1f 92       	push	r1
     93c:	cd b7       	in	r28, 0x3d	; 61
     93e:	de b7       	in	r29, 0x3e	; 62
     940:	1b 82       	std	Y+3, r1	; 0x03
     942:	88 e3       	ldi	r24, 0x38	; 56
     944:	98 e3       	ldi	r25, 0x38	; 56
     946:	0e 94 a7 12 	call	0x254e	; 0x254e <qtm_ptc_init_acquisition_module>
     94a:	8a eb       	ldi	r24, 0xBA	; 186
     94c:	98 e3       	ldi	r25, 0x38	; 56
     94e:	0e 94 ed 12 	call	0x25da	; 0x25da <qtm_ptc_qtlib_assign_signal_memory>
     952:	19 82       	std	Y+1, r1	; 0x01
     954:	1a 82       	std	Y+2, r1	; 0x02
     956:	13 c0       	rjmp	.+38     	; 0x97e <touch_sensors_config+0x4a>
     958:	89 81       	ldd	r24, Y+1	; 0x01
     95a:	9a 81       	ldd	r25, Y+2	; 0x02
     95c:	bc 01       	movw	r22, r24
     95e:	88 e3       	ldi	r24, 0x38	; 56
     960:	98 e3       	ldi	r25, 0x38	; 56
     962:	0e 94 5f 13 	call	0x26be	; 0x26be <qtm_enable_sensor_node>
     966:	89 81       	ldd	r24, Y+1	; 0x01
     968:	9a 81       	ldd	r25, Y+2	; 0x02
     96a:	bc 01       	movw	r22, r24
     96c:	88 e3       	ldi	r24, 0x38	; 56
     96e:	98 e3       	ldi	r25, 0x38	; 56
     970:	0e 94 7e 13 	call	0x26fc	; 0x26fc <qtm_calibrate_sensor_node>
     974:	89 81       	ldd	r24, Y+1	; 0x01
     976:	9a 81       	ldd	r25, Y+2	; 0x02
     978:	01 96       	adiw	r24, 0x01	; 1
     97a:	89 83       	std	Y+1, r24	; 0x01
     97c:	9a 83       	std	Y+2, r25	; 0x02
     97e:	89 81       	ldd	r24, Y+1	; 0x01
     980:	9a 81       	ldd	r25, Y+2	; 0x02
     982:	04 97       	sbiw	r24, 0x04	; 4
     984:	48 f3       	brcs	.-46     	; 0x958 <touch_sensors_config+0x24>
     986:	19 82       	std	Y+1, r1	; 0x01
     988:	1a 82       	std	Y+2, r1	; 0x02
     98a:	17 c0       	rjmp	.+46     	; 0x9ba <touch_sensors_config+0x86>
     98c:	29 81       	ldd	r18, Y+1	; 0x01
     98e:	3a 81       	ldd	r19, Y+2	; 0x02
     990:	c9 01       	movw	r24, r18
     992:	88 0f       	add	r24, r24
     994:	99 1f       	adc	r25, r25
     996:	88 0f       	add	r24, r24
     998:	99 1f       	adc	r25, r25
     99a:	82 0f       	add	r24, r18
     99c:	93 1f       	adc	r25, r19
     99e:	8a 55       	subi	r24, 0x5A	; 90
     9a0:	97 4c       	sbci	r25, 0xC7	; 199
     9a2:	29 81       	ldd	r18, Y+1	; 0x01
     9a4:	ac 01       	movw	r20, r24
     9a6:	62 2f       	mov	r22, r18
     9a8:	8d e6       	ldi	r24, 0x6D	; 109
     9aa:	98 e3       	ldi	r25, 0x38	; 56
     9ac:	0e 94 0f 0b 	call	0x161e	; 0x161e <qtm_init_sensor_key>
     9b0:	89 81       	ldd	r24, Y+1	; 0x01
     9b2:	9a 81       	ldd	r25, Y+2	; 0x02
     9b4:	01 96       	adiw	r24, 0x01	; 1
     9b6:	89 83       	std	Y+1, r24	; 0x01
     9b8:	9a 83       	std	Y+2, r25	; 0x02
     9ba:	89 81       	ldd	r24, Y+1	; 0x01
     9bc:	9a 81       	ldd	r25, Y+2	; 0x02
     9be:	04 97       	sbiw	r24, 0x04	; 4
     9c0:	28 f3       	brcs	.-54     	; 0x98c <touch_sensors_config+0x58>
     9c2:	8b 81       	ldd	r24, Y+3	; 0x03
     9c4:	23 96       	adiw	r28, 0x03	; 3
     9c6:	cd bf       	out	0x3d, r28	; 61
     9c8:	de bf       	out	0x3e, r29	; 62
     9ca:	df 91       	pop	r29
     9cc:	cf 91       	pop	r28
     9ce:	08 95       	ret

000009d0 <qtm_measure_complete_callback>:
     9d0:	cf 93       	push	r28
     9d2:	df 93       	push	r29
     9d4:	cd b7       	in	r28, 0x3d	; 61
     9d6:	de b7       	in	r29, 0x3e	; 62
     9d8:	81 e0       	ldi	r24, 0x01	; 1
     9da:	80 93 7a 38 	sts	0x387A, r24	; 0x80387a <touch_postprocess_request>
     9de:	00 00       	nop
     9e0:	df 91       	pop	r29
     9e2:	cf 91       	pop	r28
     9e4:	08 95       	ret

000009e6 <qtm_error_callback>:
     9e6:	cf 93       	push	r28
     9e8:	df 93       	push	r29
     9ea:	1f 92       	push	r1
     9ec:	cd b7       	in	r28, 0x3d	; 61
     9ee:	de b7       	in	r29, 0x3e	; 62
     9f0:	89 83       	std	Y+1, r24	; 0x01
     9f2:	89 81       	ldd	r24, Y+1	; 0x01
     9f4:	8f 5f       	subi	r24, 0xFF	; 255
     9f6:	80 93 7c 38 	sts	0x387C, r24	; 0x80387c <module_error_code>
     9fa:	0e 94 95 02 	call	0x52a	; 0x52a <datastreamer_output>
     9fe:	00 00       	nop
     a00:	0f 90       	pop	r0
     a02:	df 91       	pop	r29
     a04:	cf 91       	pop	r28
     a06:	08 95       	ret

00000a08 <Timer_set_period>:
     a08:	cf 93       	push	r28
     a0a:	df 93       	push	r29
     a0c:	1f 92       	push	r1
     a0e:	cd b7       	in	r28, 0x3d	; 61
     a10:	de b7       	in	r29, 0x3e	; 62
     a12:	89 83       	std	Y+1, r24	; 0x01
     a14:	00 00       	nop
     a16:	80 e4       	ldi	r24, 0x40	; 64
     a18:	91 e0       	ldi	r25, 0x01	; 1
     a1a:	fc 01       	movw	r30, r24
     a1c:	81 81       	ldd	r24, Z+1	; 0x01
     a1e:	88 2f       	mov	r24, r24
     a20:	90 e0       	ldi	r25, 0x00	; 0
     a22:	84 70       	andi	r24, 0x04	; 4
     a24:	99 27       	eor	r25, r25
     a26:	89 2b       	or	r24, r25
     a28:	b1 f7       	brne	.-20     	; 0xa16 <Timer_set_period+0xe>
     a2a:	80 e4       	ldi	r24, 0x40	; 64
     a2c:	91 e0       	ldi	r25, 0x01	; 1
     a2e:	29 81       	ldd	r18, Y+1	; 0x01
     a30:	22 2f       	mov	r18, r18
     a32:	30 e0       	ldi	r19, 0x00	; 0
     a34:	fc 01       	movw	r30, r24
     a36:	22 87       	std	Z+10, r18	; 0x0a
     a38:	33 87       	std	Z+11, r19	; 0x0b
     a3a:	00 00       	nop
     a3c:	0f 90       	pop	r0
     a3e:	df 91       	pop	r29
     a40:	cf 91       	pop	r28
     a42:	08 95       	ret

00000a44 <touch_init>:
     a44:	cf 93       	push	r28
     a46:	df 93       	push	r29
     a48:	cd b7       	in	r28, 0x3d	; 61
     a4a:	de b7       	in	r29, 0x3e	; 62
     a4c:	80 e2       	ldi	r24, 0x20	; 32
     a4e:	0e 94 04 05 	call	0xa08	; 0xa08 <Timer_set_period>
     a52:	0e 94 6a 04 	call	0x8d4	; 0x8d4 <touch_ptc_pin_config>
     a56:	0e 94 9a 04 	call	0x934	; 0x934 <touch_sensors_config>
     a5a:	0e 94 72 02 	call	0x4e4	; 0x4e4 <datastreamer_init>
     a5e:	00 00       	nop
     a60:	df 91       	pop	r29
     a62:	cf 91       	pop	r28
     a64:	08 95       	ret

00000a66 <touch_process>:
     a66:	cf 93       	push	r28
     a68:	df 93       	push	r29
     a6a:	1f 92       	push	r1
     a6c:	cd b7       	in	r28, 0x3d	; 61
     a6e:	de b7       	in	r29, 0x3e	; 62
     a70:	80 91 79 38 	lds	r24, 0x3879	; 0x803879 <time_to_measure_touch_flag>
     a74:	81 30       	cpi	r24, 0x01	; 1
     a76:	61 f4       	brne	.+24     	; 0xa90 <touch_process+0x2a>
     a78:	68 ee       	ldi	r22, 0xE8	; 232
     a7a:	74 e0       	ldi	r23, 0x04	; 4
     a7c:	88 e3       	ldi	r24, 0x38	; 56
     a7e:	98 e3       	ldi	r25, 0x38	; 56
     a80:	0e 94 f7 12 	call	0x25ee	; 0x25ee <qtm_ptc_start_measurement_seq>
     a84:	89 83       	std	Y+1, r24	; 0x01
     a86:	89 81       	ldd	r24, Y+1	; 0x01
     a88:	88 23       	and	r24, r24
     a8a:	11 f4       	brne	.+4      	; 0xa90 <touch_process+0x2a>
     a8c:	10 92 79 38 	sts	0x3879, r1	; 0x803879 <time_to_measure_touch_flag>
     a90:	80 91 7a 38 	lds	r24, 0x387A	; 0x80387a <touch_postprocess_request>
     a94:	81 30       	cpi	r24, 0x01	; 1
     a96:	99 f5       	brne	.+102    	; 0xafe <touch_process+0x98>
     a98:	10 92 7a 38 	sts	0x387A, r1	; 0x80387a <touch_postprocess_request>
     a9c:	0e 94 29 11 	call	0x2252	; 0x2252 <qtm_acquisition_process>
     aa0:	89 83       	std	Y+1, r24	; 0x01
     aa2:	89 81       	ldd	r24, Y+1	; 0x01
     aa4:	88 23       	and	r24, r24
     aa6:	b9 f4       	brne	.+46     	; 0xad6 <touch_process+0x70>
     aa8:	83 e5       	ldi	r24, 0x53	; 83
     aaa:	98 e3       	ldi	r25, 0x38	; 56
     aac:	0e 94 d4 0e 	call	0x1da8	; 0x1da8 <qtm_freq_hop_autotune>
     ab0:	89 83       	std	Y+1, r24	; 0x01
     ab2:	89 81       	ldd	r24, Y+1	; 0x01
     ab4:	88 23       	and	r24, r24
     ab6:	19 f0       	breq	.+6      	; 0xabe <touch_process+0x58>
     ab8:	81 e0       	ldi	r24, 0x01	; 1
     aba:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <qtm_error_callback>
     abe:	8d e6       	ldi	r24, 0x6D	; 109
     ac0:	98 e3       	ldi	r25, 0x38	; 56
     ac2:	0e 94 2e 0b 	call	0x165c	; 0x165c <qtm_key_sensors_process>
     ac6:	89 83       	std	Y+1, r24	; 0x01
     ac8:	89 81       	ldd	r24, Y+1	; 0x01
     aca:	88 23       	and	r24, r24
     acc:	39 f0       	breq	.+14     	; 0xadc <touch_process+0x76>
     ace:	82 e0       	ldi	r24, 0x02	; 2
     ad0:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <qtm_error_callback>
     ad4:	03 c0       	rjmp	.+6      	; 0xadc <touch_process+0x76>
     ad6:	80 e0       	ldi	r24, 0x00	; 0
     ad8:	0e 94 f3 04 	call	0x9e6	; 0x9e6 <qtm_error_callback>
     adc:	80 91 6d 38 	lds	r24, 0x386D	; 0x80386d <qtlib_key_set1>
     ae0:	90 91 6e 38 	lds	r25, 0x386E	; 0x80386e <qtlib_key_set1+0x1>
     ae4:	fc 01       	movw	r30, r24
     ae6:	80 81       	ld	r24, Z
     ae8:	88 23       	and	r24, r24
     aea:	24 f4       	brge	.+8      	; 0xaf4 <touch_process+0x8e>
     aec:	81 e0       	ldi	r24, 0x01	; 1
     aee:	80 93 79 38 	sts	0x3879, r24	; 0x803879 <time_to_measure_touch_flag>
     af2:	03 c0       	rjmp	.+6      	; 0xafa <touch_process+0x94>
     af4:	81 e0       	ldi	r24, 0x01	; 1
     af6:	80 93 7b 38 	sts	0x387B, r24	; 0x80387b <measurement_done_touch>
     afa:	0e 94 95 02 	call	0x52a	; 0x52a <datastreamer_output>
     afe:	00 00       	nop
     b00:	0f 90       	pop	r0
     b02:	df 91       	pop	r29
     b04:	cf 91       	pop	r28
     b06:	08 95       	ret

00000b08 <touch_timer_handler>:
     b08:	cf 93       	push	r28
     b0a:	df 93       	push	r29
     b0c:	cd b7       	in	r28, 0x3d	; 61
     b0e:	de b7       	in	r29, 0x3e	; 62
     b10:	80 91 a2 38 	lds	r24, 0x38A2	; 0x8038a2 <interrupt_cnt>
     b14:	8f 5f       	subi	r24, 0xFF	; 255
     b16:	80 93 a2 38 	sts	0x38A2, r24	; 0x8038a2 <interrupt_cnt>
     b1a:	80 91 a2 38 	lds	r24, 0x38A2	; 0x8038a2 <interrupt_cnt>
     b1e:	84 31       	cpi	r24, 0x14	; 20
     b20:	48 f0       	brcs	.+18     	; 0xb34 <touch_timer_handler+0x2c>
     b22:	10 92 a2 38 	sts	0x38A2, r1	; 0x8038a2 <interrupt_cnt>
     b26:	81 e0       	ldi	r24, 0x01	; 1
     b28:	80 93 79 38 	sts	0x3879, r24	; 0x803879 <time_to_measure_touch_flag>
     b2c:	84 e1       	ldi	r24, 0x14	; 20
     b2e:	90 e0       	ldi	r25, 0x00	; 0
     b30:	0e 94 04 0b 	call	0x1608	; 0x1608 <qtm_update_qtlib_timer>
     b34:	00 00       	nop
     b36:	df 91       	pop	r29
     b38:	cf 91       	pop	r28
     b3a:	08 95       	ret

00000b3c <get_sensor_node_signal>:
     b3c:	cf 93       	push	r28
     b3e:	df 93       	push	r29
     b40:	00 d0       	rcall	.+0      	; 0xb42 <get_sensor_node_signal+0x6>
     b42:	cd b7       	in	r28, 0x3d	; 61
     b44:	de b7       	in	r29, 0x3e	; 62
     b46:	89 83       	std	Y+1, r24	; 0x01
     b48:	9a 83       	std	Y+2, r25	; 0x02
     b4a:	29 81       	ldd	r18, Y+1	; 0x01
     b4c:	3a 81       	ldd	r19, Y+2	; 0x02
     b4e:	c9 01       	movw	r24, r18
     b50:	88 0f       	add	r24, r24
     b52:	99 1f       	adc	r25, r25
     b54:	88 0f       	add	r24, r24
     b56:	99 1f       	adc	r25, r25
     b58:	82 0f       	add	r24, r18
     b5a:	93 1f       	adc	r25, r19
     b5c:	89 55       	subi	r24, 0x59	; 89
     b5e:	97 4c       	sbci	r25, 0xC7	; 199
     b60:	fc 01       	movw	r30, r24
     b62:	80 81       	ld	r24, Z
     b64:	91 81       	ldd	r25, Z+1	; 0x01
     b66:	0f 90       	pop	r0
     b68:	0f 90       	pop	r0
     b6a:	df 91       	pop	r29
     b6c:	cf 91       	pop	r28
     b6e:	08 95       	ret

00000b70 <get_sensor_node_reference>:
     b70:	cf 93       	push	r28
     b72:	df 93       	push	r29
     b74:	00 d0       	rcall	.+0      	; 0xb76 <get_sensor_node_reference+0x6>
     b76:	cd b7       	in	r28, 0x3d	; 61
     b78:	de b7       	in	r29, 0x3e	; 62
     b7a:	89 83       	std	Y+1, r24	; 0x01
     b7c:	9a 83       	std	Y+2, r25	; 0x02
     b7e:	29 81       	ldd	r18, Y+1	; 0x01
     b80:	3a 81       	ldd	r19, Y+2	; 0x02
     b82:	c9 01       	movw	r24, r18
     b84:	88 0f       	add	r24, r24
     b86:	99 1f       	adc	r25, r25
     b88:	82 0f       	add	r24, r18
     b8a:	93 1f       	adc	r25, r19
     b8c:	88 0f       	add	r24, r24
     b8e:	99 1f       	adc	r25, r25
     b90:	8a 53       	subi	r24, 0x3A	; 58
     b92:	97 4c       	sbci	r25, 0xC7	; 199
     b94:	fc 01       	movw	r30, r24
     b96:	80 81       	ld	r24, Z
     b98:	91 81       	ldd	r25, Z+1	; 0x01
     b9a:	0f 90       	pop	r0
     b9c:	0f 90       	pop	r0
     b9e:	df 91       	pop	r29
     ba0:	cf 91       	pop	r28
     ba2:	08 95       	ret

00000ba4 <get_sensor_cc_val>:
     ba4:	cf 93       	push	r28
     ba6:	df 93       	push	r29
     ba8:	00 d0       	rcall	.+0      	; 0xbaa <get_sensor_cc_val+0x6>
     baa:	cd b7       	in	r28, 0x3d	; 61
     bac:	de b7       	in	r29, 0x3e	; 62
     bae:	89 83       	std	Y+1, r24	; 0x01
     bb0:	9a 83       	std	Y+2, r25	; 0x02
     bb2:	29 81       	ldd	r18, Y+1	; 0x01
     bb4:	3a 81       	ldd	r19, Y+2	; 0x02
     bb6:	c9 01       	movw	r24, r18
     bb8:	88 0f       	add	r24, r24
     bba:	99 1f       	adc	r25, r25
     bbc:	88 0f       	add	r24, r24
     bbe:	99 1f       	adc	r25, r25
     bc0:	82 0f       	add	r24, r18
     bc2:	93 1f       	adc	r25, r19
     bc4:	87 55       	subi	r24, 0x57	; 87
     bc6:	97 4c       	sbci	r25, 0xC7	; 199
     bc8:	fc 01       	movw	r30, r24
     bca:	80 81       	ld	r24, Z
     bcc:	91 81       	ldd	r25, Z+1	; 0x01
     bce:	0f 90       	pop	r0
     bd0:	0f 90       	pop	r0
     bd2:	df 91       	pop	r29
     bd4:	cf 91       	pop	r28
     bd6:	08 95       	ret

00000bd8 <get_sensor_state>:
     bd8:	cf 93       	push	r28
     bda:	df 93       	push	r29
     bdc:	00 d0       	rcall	.+0      	; 0xbde <get_sensor_state+0x6>
     bde:	cd b7       	in	r28, 0x3d	; 61
     be0:	de b7       	in	r29, 0x3e	; 62
     be2:	89 83       	std	Y+1, r24	; 0x01
     be4:	9a 83       	std	Y+2, r25	; 0x02
     be6:	40 91 71 38 	lds	r20, 0x3871	; 0x803871 <qtlib_key_set1+0x4>
     bea:	50 91 72 38 	lds	r21, 0x3872	; 0x803872 <qtlib_key_set1+0x5>
     bee:	29 81       	ldd	r18, Y+1	; 0x01
     bf0:	3a 81       	ldd	r19, Y+2	; 0x02
     bf2:	c9 01       	movw	r24, r18
     bf4:	88 0f       	add	r24, r24
     bf6:	99 1f       	adc	r25, r25
     bf8:	82 0f       	add	r24, r18
     bfa:	93 1f       	adc	r25, r19
     bfc:	88 0f       	add	r24, r24
     bfe:	99 1f       	adc	r25, r25
     c00:	84 0f       	add	r24, r20
     c02:	95 1f       	adc	r25, r21
     c04:	fc 01       	movw	r30, r24
     c06:	80 81       	ld	r24, Z
     c08:	0f 90       	pop	r0
     c0a:	0f 90       	pop	r0
     c0c:	df 91       	pop	r29
     c0e:	cf 91       	pop	r28
     c10:	08 95       	ret

00000c12 <__vector_20>:
Input    :  none
Output  :  none
Notes    :  none
============================================================================*/
ISR(ADC0_RESRDY_vect)
{
     c12:	1f 92       	push	r1
     c14:	0f 92       	push	r0
     c16:	00 90 3f 00 	lds	r0, 0x003F	; 0x80003f <gain_setting_int_cap+0x7f5865>
     c1a:	0f 92       	push	r0
     c1c:	11 24       	eor	r1, r1
     c1e:	2f 93       	push	r18
     c20:	3f 93       	push	r19
     c22:	4f 93       	push	r20
     c24:	5f 93       	push	r21
     c26:	6f 93       	push	r22
     c28:	7f 93       	push	r23
     c2a:	8f 93       	push	r24
     c2c:	9f 93       	push	r25
     c2e:	af 93       	push	r26
     c30:	bf 93       	push	r27
     c32:	ef 93       	push	r30
     c34:	ff 93       	push	r31
     c36:	cf 93       	push	r28
     c38:	df 93       	push	r29
     c3a:	cd b7       	in	r28, 0x3d	; 61
     c3c:	de b7       	in	r29, 0x3e	; 62
	qtm_t321x_ptc_handler_eoc();
     c3e:	0e 94 bf 13 	call	0x277e	; 0x277e <qtm_t161x_ptc_handler_eoc>
}
     c42:	00 00       	nop
     c44:	df 91       	pop	r29
     c46:	cf 91       	pop	r28
     c48:	ff 91       	pop	r31
     c4a:	ef 91       	pop	r30
     c4c:	bf 91       	pop	r27
     c4e:	af 91       	pop	r26
     c50:	9f 91       	pop	r25
     c52:	8f 91       	pop	r24
     c54:	7f 91       	pop	r23
     c56:	6f 91       	pop	r22
     c58:	5f 91       	pop	r21
     c5a:	4f 91       	pop	r20
     c5c:	3f 91       	pop	r19
     c5e:	2f 91       	pop	r18
     c60:	0f 90       	pop	r0
     c62:	00 92 3f 00 	sts	0x003F, r0	; 0x80003f <gain_setting_int_cap+0x7f5865>
     c66:	0f 90       	pop	r0
     c68:	1f 90       	pop	r1
     c6a:	18 95       	reti

00000c6c <BOD_init>:
 * \brief Initialize Brownout Detector
 *
 * \return Initialization status.
 */
int8_t BOD_init()
{
     c6c:	cf 93       	push	r28
     c6e:	df 93       	push	r29
     c70:	cd b7       	in	r28, 0x3d	; 61
     c72:	de b7       	in	r29, 0x3e	; 62
	// BOD.INTCTRL = 0 << BOD_VLMIE_bp /* voltage level monitor interrrupt enable: disabled */
	//		 | BOD_VLMCFG_BELOW_gc; /* Interrupt when supply goes below VLM level */

	// BOD.VLMCTRLA = BOD_VLMLVL_5ABOVE_gc; /* VLM threshold 5% above BOD level */

	return 0;
     c74:	80 e0       	ldi	r24, 0x00	; 0
}
     c76:	df 91       	pop	r29
     c78:	cf 91       	pop	r28
     c7a:	08 95       	ret

00000c7c <ccp_write_io>:
 * \note Using IAR Embedded workbench, the choice of memory model has an impact
 *       on calling convention. The memory model is not visible to the
 *       preprocessor, so it must be defined in the Assembler preprocessor directives.
 */
static inline void ccp_write_io(void *addr, uint8_t value)
{
     c7c:	cf 93       	push	r28
     c7e:	df 93       	push	r29
     c80:	00 d0       	rcall	.+0      	; 0xc82 <ccp_write_io+0x6>
     c82:	1f 92       	push	r1
     c84:	cd b7       	in	r28, 0x3d	; 61
     c86:	de b7       	in	r29, 0x3e	; 62
     c88:	89 83       	std	Y+1, r24	; 0x01
     c8a:	9a 83       	std	Y+2, r25	; 0x02
     c8c:	6b 83       	std	Y+3, r22	; 0x03
	protected_write_io(addr, CCP_IOREG_gc, value);
     c8e:	89 81       	ldd	r24, Y+1	; 0x01
     c90:	9a 81       	ldd	r25, Y+2	; 0x02
     c92:	4b 81       	ldd	r20, Y+3	; 0x03
     c94:	68 ed       	ldi	r22, 0xD8	; 216
     c96:	0e 94 1f 0a 	call	0x143e	; 0x143e <protected_write_io>
}
     c9a:	00 00       	nop
     c9c:	23 96       	adiw	r28, 0x03	; 3
     c9e:	cd bf       	out	0x3d, r28	; 61
     ca0:	de bf       	out	0x3e, r29	; 62
     ca2:	df 91       	pop	r29
     ca4:	cf 91       	pop	r28
     ca6:	08 95       	ret

00000ca8 <CLKCTRL_init>:
 * \brief Initialize clkctrl interface
 *
 * \return Initialization status.
 */
int8_t CLKCTRL_init()
{
     ca8:	cf 93       	push	r28
     caa:	df 93       	push	r29
     cac:	cd b7       	in	r28, 0x3d	; 61
     cae:	de b7       	in	r29, 0x3e	; 62
	//		 | 0 << CLKCTRL_RUNSTDBY_bp /* Run standby: disabled */
	//		 | 0 << CLKCTRL_SEL_bp /* Select: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.OSC20MCTRLA),0 << CLKCTRL_RUNSTDBY_bp /* Run standby: disabled */);

	ccp_write_io((void *)&(CLKCTRL.MCLKCTRLB),
     cb0:	61 e0       	ldi	r22, 0x01	; 1
     cb2:	81 e6       	ldi	r24, 0x61	; 97
     cb4:	90 e0       	ldi	r25, 0x00	; 0
     cb6:	0e 94 3e 06 	call	0xc7c	; 0xc7c <ccp_write_io>
	// ccp_write_io((void*)&(CLKCTRL.MCLKCTRLA),CLKCTRL_CLKSEL_OSC20M_gc /* 20MHz Internal Oscillator (OSC20M) */
	//		 | 0 << CLKCTRL_CLKOUT_bp /* System clock out: disabled */);

	// ccp_write_io((void*)&(CLKCTRL.MCLKLOCK),0 << CLKCTRL_LOCKEN_bp /* lock enable: disabled */);

	return 0;
     cba:	80 e0       	ldi	r24, 0x00	; 0
}
     cbc:	df 91       	pop	r29
     cbe:	cf 91       	pop	r28
     cc0:	08 95       	ret

00000cc2 <CPUINT_init>:
 * \brief Initialize cpuint interface
 *
 * \return Initialization status
 */
int8_t CPUINT_init()
{
     cc2:	cf 93       	push	r28
     cc4:	df 93       	push	r29
     cc6:	cd b7       	in	r28, 0x3d	; 61
     cc8:	de b7       	in	r29, 0x3e	; 62

	// CPUINT.LVL0PRI = 0x0 << CPUINT_LVL0PRI_gp; /* Interrupt Level Priority: 0x0 */

	// CPUINT.LVL1VEC = 0x0 << CPUINT_LVL1VEC_gp; /* Interrupt Vector with High Priority: 0x0 */

	ENABLE_INTERRUPTS();
     cca:	78 94       	sei

	return 0;
     ccc:	80 e0       	ldi	r24, 0x00	; 0
}
     cce:	df 91       	pop	r29
     cd0:	cf 91       	pop	r28
     cd2:	08 95       	ret

00000cd4 <PORTA_set_pin_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
     cd4:	cf 93       	push	r28
     cd6:	df 93       	push	r29
     cd8:	00 d0       	rcall	.+0      	; 0xcda <PORTA_set_pin_dir+0x6>
     cda:	cd b7       	in	r28, 0x3d	; 61
     cdc:	de b7       	in	r29, 0x3e	; 62
     cde:	89 83       	std	Y+1, r24	; 0x01
     ce0:	6a 83       	std	Y+2, r22	; 0x02
	switch (dir) {
     ce2:	8a 81       	ldd	r24, Y+2	; 0x02
     ce4:	88 2f       	mov	r24, r24
     ce6:	90 e0       	ldi	r25, 0x00	; 0
     ce8:	81 30       	cpi	r24, 0x01	; 1
     cea:	91 05       	cpc	r25, r1
     cec:	e1 f0       	breq	.+56     	; 0xd26 <PORTA_set_pin_dir+0x52>
     cee:	82 30       	cpi	r24, 0x02	; 2
     cf0:	91 05       	cpc	r25, r1
     cf2:	71 f1       	breq	.+92     	; 0xd50 <PORTA_set_pin_dir+0x7c>
     cf4:	89 2b       	or	r24, r25
     cf6:	09 f0       	breq	.+2      	; 0xcfa <PORTA_set_pin_dir+0x26>
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTA + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
		break;
	default:
		break;
     cf8:	3b c0       	rjmp	.+118    	; 0xd70 <PORTA_set_pin_dir+0x9c>
 */
static inline void PORTA_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTA.DIR &= ~(1 << pin);
     cfa:	20 e0       	ldi	r18, 0x00	; 0
     cfc:	30 e0       	ldi	r19, 0x00	; 0
     cfe:	80 e0       	ldi	r24, 0x00	; 0
     d00:	90 e0       	ldi	r25, 0x00	; 0
     d02:	fc 01       	movw	r30, r24
     d04:	80 81       	ld	r24, Z
     d06:	68 2f       	mov	r22, r24
     d08:	89 81       	ldd	r24, Y+1	; 0x01
     d0a:	48 2f       	mov	r20, r24
     d0c:	50 e0       	ldi	r21, 0x00	; 0
     d0e:	81 e0       	ldi	r24, 0x01	; 1
     d10:	90 e0       	ldi	r25, 0x00	; 0
     d12:	02 c0       	rjmp	.+4      	; 0xd18 <PORTA_set_pin_dir+0x44>
     d14:	88 0f       	add	r24, r24
     d16:	99 1f       	adc	r25, r25
     d18:	4a 95       	dec	r20
     d1a:	e2 f7       	brpl	.-8      	; 0xd14 <PORTA_set_pin_dir+0x40>
     d1c:	80 95       	com	r24
     d1e:	86 23       	and	r24, r22
     d20:	f9 01       	movw	r30, r18
     d22:	80 83       	st	Z, r24
		break;
     d24:	25 c0       	rjmp	.+74     	; 0xd70 <PORTA_set_pin_dir+0x9c>
	case PORT_DIR_OUT:
		VPORTA.DIR |= (1 << pin);
     d26:	20 e0       	ldi	r18, 0x00	; 0
     d28:	30 e0       	ldi	r19, 0x00	; 0
     d2a:	80 e0       	ldi	r24, 0x00	; 0
     d2c:	90 e0       	ldi	r25, 0x00	; 0
     d2e:	fc 01       	movw	r30, r24
     d30:	80 81       	ld	r24, Z
     d32:	68 2f       	mov	r22, r24
     d34:	89 81       	ldd	r24, Y+1	; 0x01
     d36:	48 2f       	mov	r20, r24
     d38:	50 e0       	ldi	r21, 0x00	; 0
     d3a:	81 e0       	ldi	r24, 0x01	; 1
     d3c:	90 e0       	ldi	r25, 0x00	; 0
     d3e:	02 c0       	rjmp	.+4      	; 0xd44 <PORTA_set_pin_dir+0x70>
     d40:	88 0f       	add	r24, r24
     d42:	99 1f       	adc	r25, r25
     d44:	4a 95       	dec	r20
     d46:	e2 f7       	brpl	.-8      	; 0xd40 <PORTA_set_pin_dir+0x6c>
     d48:	86 2b       	or	r24, r22
     d4a:	f9 01       	movw	r30, r18
     d4c:	80 83       	st	Z, r24
		break;
     d4e:	10 c0       	rjmp	.+32     	; 0xd70 <PORTA_set_pin_dir+0x9c>
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTA + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
     d50:	89 81       	ldd	r24, Y+1	; 0x01
     d52:	88 2f       	mov	r24, r24
     d54:	90 e0       	ldi	r25, 0x00	; 0
     d56:	80 5f       	subi	r24, 0xF0	; 240
     d58:	9b 4f       	sbci	r25, 0xFB	; 251
     d5a:	29 81       	ldd	r18, Y+1	; 0x01
     d5c:	22 2f       	mov	r18, r18
     d5e:	30 e0       	ldi	r19, 0x00	; 0
     d60:	20 5f       	subi	r18, 0xF0	; 240
     d62:	3b 4f       	sbci	r19, 0xFB	; 251
     d64:	f9 01       	movw	r30, r18
     d66:	20 81       	ld	r18, Z
     d68:	28 60       	ori	r18, 0x08	; 8
     d6a:	fc 01       	movw	r30, r24
     d6c:	20 83       	st	Z, r18
		break;
     d6e:	00 00       	nop
	default:
		break;
	}
}
     d70:	00 00       	nop
     d72:	0f 90       	pop	r0
     d74:	0f 90       	pop	r0
     d76:	df 91       	pop	r29
     d78:	cf 91       	pop	r28
     d7a:	08 95       	ret

00000d7c <PORTA_set_pin_level>:
 * \param[in] pin       The pin number within port
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
     d7c:	cf 93       	push	r28
     d7e:	df 93       	push	r29
     d80:	00 d0       	rcall	.+0      	; 0xd82 <PORTA_set_pin_level+0x6>
     d82:	cd b7       	in	r28, 0x3d	; 61
     d84:	de b7       	in	r29, 0x3e	; 62
     d86:	89 83       	std	Y+1, r24	; 0x01
     d88:	6a 83       	std	Y+2, r22	; 0x02
	if (level == true) {
     d8a:	8a 81       	ldd	r24, Y+2	; 0x02
     d8c:	88 23       	and	r24, r24
     d8e:	a9 f0       	breq	.+42     	; 0xdba <PORTA_set_pin_level+0x3e>
		VPORTA.OUT |= (1 << pin);
     d90:	20 e0       	ldi	r18, 0x00	; 0
     d92:	30 e0       	ldi	r19, 0x00	; 0
     d94:	80 e0       	ldi	r24, 0x00	; 0
     d96:	90 e0       	ldi	r25, 0x00	; 0
     d98:	fc 01       	movw	r30, r24
     d9a:	81 81       	ldd	r24, Z+1	; 0x01
     d9c:	68 2f       	mov	r22, r24
     d9e:	89 81       	ldd	r24, Y+1	; 0x01
     da0:	48 2f       	mov	r20, r24
     da2:	50 e0       	ldi	r21, 0x00	; 0
     da4:	81 e0       	ldi	r24, 0x01	; 1
     da6:	90 e0       	ldi	r25, 0x00	; 0
     da8:	02 c0       	rjmp	.+4      	; 0xdae <PORTA_set_pin_level+0x32>
     daa:	88 0f       	add	r24, r24
     dac:	99 1f       	adc	r25, r25
     dae:	4a 95       	dec	r20
     db0:	e2 f7       	brpl	.-8      	; 0xdaa <PORTA_set_pin_level+0x2e>
     db2:	86 2b       	or	r24, r22
     db4:	f9 01       	movw	r30, r18
     db6:	81 83       	std	Z+1, r24	; 0x01
	} else {
		VPORTA.OUT &= ~(1 << pin);
	}
}
     db8:	15 c0       	rjmp	.+42     	; 0xde4 <PORTA_set_pin_level+0x68>
static inline void PORTA_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTA.OUT |= (1 << pin);
	} else {
		VPORTA.OUT &= ~(1 << pin);
     dba:	20 e0       	ldi	r18, 0x00	; 0
     dbc:	30 e0       	ldi	r19, 0x00	; 0
     dbe:	80 e0       	ldi	r24, 0x00	; 0
     dc0:	90 e0       	ldi	r25, 0x00	; 0
     dc2:	fc 01       	movw	r30, r24
     dc4:	81 81       	ldd	r24, Z+1	; 0x01
     dc6:	68 2f       	mov	r22, r24
     dc8:	89 81       	ldd	r24, Y+1	; 0x01
     dca:	48 2f       	mov	r20, r24
     dcc:	50 e0       	ldi	r21, 0x00	; 0
     dce:	81 e0       	ldi	r24, 0x01	; 1
     dd0:	90 e0       	ldi	r25, 0x00	; 0
     dd2:	02 c0       	rjmp	.+4      	; 0xdd8 <PORTA_set_pin_level+0x5c>
     dd4:	88 0f       	add	r24, r24
     dd6:	99 1f       	adc	r25, r25
     dd8:	4a 95       	dec	r20
     dda:	e2 f7       	brpl	.-8      	; 0xdd4 <PORTA_set_pin_level+0x58>
     ddc:	80 95       	com	r24
     dde:	86 23       	and	r24, r22
     de0:	f9 01       	movw	r30, r18
     de2:	81 83       	std	Z+1, r24	; 0x01
	}
}
     de4:	00 00       	nop
     de6:	0f 90       	pop	r0
     de8:	0f 90       	pop	r0
     dea:	df 91       	pop	r29
     dec:	cf 91       	pop	r28
     dee:	08 95       	ret

00000df0 <PORTB_set_pin_pull_mode>:
 *
 * \param[in] pin       The pin number within port
 * \param[in] pull_mode Pin pull mode
 */
static inline void PORTB_set_pin_pull_mode(const uint8_t pin, const enum port_pull_mode pull_mode)
{
     df0:	cf 93       	push	r28
     df2:	df 93       	push	r29
     df4:	00 d0       	rcall	.+0      	; 0xdf6 <PORTB_set_pin_pull_mode+0x6>
     df6:	00 d0       	rcall	.+0      	; 0xdf8 <PORTB_set_pin_pull_mode+0x8>
     df8:	cd b7       	in	r28, 0x3d	; 61
     dfa:	de b7       	in	r29, 0x3e	; 62
     dfc:	8b 83       	std	Y+3, r24	; 0x03
     dfe:	6c 83       	std	Y+4, r22	; 0x04
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);
     e00:	8b 81       	ldd	r24, Y+3	; 0x03
     e02:	88 2f       	mov	r24, r24
     e04:	90 e0       	ldi	r25, 0x00	; 0
     e06:	80 5d       	subi	r24, 0xD0	; 208
     e08:	9b 4f       	sbci	r25, 0xFB	; 251
     e0a:	89 83       	std	Y+1, r24	; 0x01
     e0c:	9a 83       	std	Y+2, r25	; 0x02

	if (pull_mode == PORT_PULL_UP) {
     e0e:	8c 81       	ldd	r24, Y+4	; 0x04
     e10:	81 30       	cpi	r24, 0x01	; 1
     e12:	59 f4       	brne	.+22     	; 0xe2a <PORTB_set_pin_pull_mode+0x3a>
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
     e14:	89 81       	ldd	r24, Y+1	; 0x01
     e16:	9a 81       	ldd	r25, Y+2	; 0x02
     e18:	fc 01       	movw	r30, r24
     e1a:	80 81       	ld	r24, Z
     e1c:	28 2f       	mov	r18, r24
     e1e:	28 60       	ori	r18, 0x08	; 8
     e20:	89 81       	ldd	r24, Y+1	; 0x01
     e22:	9a 81       	ldd	r25, Y+2	; 0x02
     e24:	fc 01       	movw	r30, r24
     e26:	20 83       	st	Z, r18
	} else if (pull_mode == PORT_PULL_OFF) {
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
	}
}
     e28:	0d c0       	rjmp	.+26     	; 0xe44 <PORTB_set_pin_pull_mode+0x54>
{
	volatile uint8_t *port_pin_ctrl = ((uint8_t *)&PORTB + 0x10 + pin);

	if (pull_mode == PORT_PULL_UP) {
		*port_pin_ctrl |= PORT_PULLUPEN_bm;
	} else if (pull_mode == PORT_PULL_OFF) {
     e2a:	8c 81       	ldd	r24, Y+4	; 0x04
     e2c:	88 23       	and	r24, r24
     e2e:	51 f4       	brne	.+20     	; 0xe44 <PORTB_set_pin_pull_mode+0x54>
		*port_pin_ctrl &= ~PORT_PULLUPEN_bm;
     e30:	89 81       	ldd	r24, Y+1	; 0x01
     e32:	9a 81       	ldd	r25, Y+2	; 0x02
     e34:	fc 01       	movw	r30, r24
     e36:	80 81       	ld	r24, Z
     e38:	28 2f       	mov	r18, r24
     e3a:	27 7f       	andi	r18, 0xF7	; 247
     e3c:	89 81       	ldd	r24, Y+1	; 0x01
     e3e:	9a 81       	ldd	r25, Y+2	; 0x02
     e40:	fc 01       	movw	r30, r24
     e42:	20 83       	st	Z, r18
	}
}
     e44:	00 00       	nop
     e46:	24 96       	adiw	r28, 0x04	; 4
     e48:	cd bf       	out	0x3d, r28	; 61
     e4a:	de bf       	out	0x3e, r29	; 62
     e4c:	df 91       	pop	r29
     e4e:	cf 91       	pop	r28
     e50:	08 95       	ret

00000e52 <PORTB_set_pin_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
     e52:	cf 93       	push	r28
     e54:	df 93       	push	r29
     e56:	00 d0       	rcall	.+0      	; 0xe58 <PORTB_set_pin_dir+0x6>
     e58:	cd b7       	in	r28, 0x3d	; 61
     e5a:	de b7       	in	r29, 0x3e	; 62
     e5c:	89 83       	std	Y+1, r24	; 0x01
     e5e:	6a 83       	std	Y+2, r22	; 0x02
	switch (dir) {
     e60:	8a 81       	ldd	r24, Y+2	; 0x02
     e62:	88 2f       	mov	r24, r24
     e64:	90 e0       	ldi	r25, 0x00	; 0
     e66:	81 30       	cpi	r24, 0x01	; 1
     e68:	91 05       	cpc	r25, r1
     e6a:	e1 f0       	breq	.+56     	; 0xea4 <PORTB_set_pin_dir+0x52>
     e6c:	82 30       	cpi	r24, 0x02	; 2
     e6e:	91 05       	cpc	r25, r1
     e70:	71 f1       	breq	.+92     	; 0xece <PORTB_set_pin_dir+0x7c>
     e72:	89 2b       	or	r24, r25
     e74:	09 f0       	breq	.+2      	; 0xe78 <PORTB_set_pin_dir+0x26>
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTB + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
		break;
	default:
		break;
     e76:	3b c0       	rjmp	.+118    	; 0xeee <PORTB_set_pin_dir+0x9c>
 */
static inline void PORTB_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTB.DIR &= ~(1 << pin);
     e78:	84 e0       	ldi	r24, 0x04	; 4
     e7a:	90 e0       	ldi	r25, 0x00	; 0
     e7c:	24 e0       	ldi	r18, 0x04	; 4
     e7e:	30 e0       	ldi	r19, 0x00	; 0
     e80:	f9 01       	movw	r30, r18
     e82:	20 81       	ld	r18, Z
     e84:	62 2f       	mov	r22, r18
     e86:	29 81       	ldd	r18, Y+1	; 0x01
     e88:	42 2f       	mov	r20, r18
     e8a:	50 e0       	ldi	r21, 0x00	; 0
     e8c:	21 e0       	ldi	r18, 0x01	; 1
     e8e:	30 e0       	ldi	r19, 0x00	; 0
     e90:	02 c0       	rjmp	.+4      	; 0xe96 <PORTB_set_pin_dir+0x44>
     e92:	22 0f       	add	r18, r18
     e94:	33 1f       	adc	r19, r19
     e96:	4a 95       	dec	r20
     e98:	e2 f7       	brpl	.-8      	; 0xe92 <PORTB_set_pin_dir+0x40>
     e9a:	20 95       	com	r18
     e9c:	26 23       	and	r18, r22
     e9e:	fc 01       	movw	r30, r24
     ea0:	20 83       	st	Z, r18
		break;
     ea2:	25 c0       	rjmp	.+74     	; 0xeee <PORTB_set_pin_dir+0x9c>
	case PORT_DIR_OUT:
		VPORTB.DIR |= (1 << pin);
     ea4:	84 e0       	ldi	r24, 0x04	; 4
     ea6:	90 e0       	ldi	r25, 0x00	; 0
     ea8:	24 e0       	ldi	r18, 0x04	; 4
     eaa:	30 e0       	ldi	r19, 0x00	; 0
     eac:	f9 01       	movw	r30, r18
     eae:	20 81       	ld	r18, Z
     eb0:	62 2f       	mov	r22, r18
     eb2:	29 81       	ldd	r18, Y+1	; 0x01
     eb4:	42 2f       	mov	r20, r18
     eb6:	50 e0       	ldi	r21, 0x00	; 0
     eb8:	21 e0       	ldi	r18, 0x01	; 1
     eba:	30 e0       	ldi	r19, 0x00	; 0
     ebc:	02 c0       	rjmp	.+4      	; 0xec2 <PORTB_set_pin_dir+0x70>
     ebe:	22 0f       	add	r18, r18
     ec0:	33 1f       	adc	r19, r19
     ec2:	4a 95       	dec	r20
     ec4:	e2 f7       	brpl	.-8      	; 0xebe <PORTB_set_pin_dir+0x6c>
     ec6:	26 2b       	or	r18, r22
     ec8:	fc 01       	movw	r30, r24
     eca:	20 83       	st	Z, r18
		break;
     ecc:	10 c0       	rjmp	.+32     	; 0xeee <PORTB_set_pin_dir+0x9c>
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTB + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
     ece:	89 81       	ldd	r24, Y+1	; 0x01
     ed0:	88 2f       	mov	r24, r24
     ed2:	90 e0       	ldi	r25, 0x00	; 0
     ed4:	80 5d       	subi	r24, 0xD0	; 208
     ed6:	9b 4f       	sbci	r25, 0xFB	; 251
     ed8:	29 81       	ldd	r18, Y+1	; 0x01
     eda:	22 2f       	mov	r18, r18
     edc:	30 e0       	ldi	r19, 0x00	; 0
     ede:	20 5d       	subi	r18, 0xD0	; 208
     ee0:	3b 4f       	sbci	r19, 0xFB	; 251
     ee2:	f9 01       	movw	r30, r18
     ee4:	20 81       	ld	r18, Z
     ee6:	28 60       	ori	r18, 0x08	; 8
     ee8:	fc 01       	movw	r30, r24
     eea:	20 83       	st	Z, r18
		break;
     eec:	00 00       	nop
	default:
		break;
	}
}
     eee:	00 00       	nop
     ef0:	0f 90       	pop	r0
     ef2:	0f 90       	pop	r0
     ef4:	df 91       	pop	r29
     ef6:	cf 91       	pop	r28
     ef8:	08 95       	ret

00000efa <PORTB_set_pin_level>:
 * \param[in] pin       The pin number within port
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
     efa:	cf 93       	push	r28
     efc:	df 93       	push	r29
     efe:	00 d0       	rcall	.+0      	; 0xf00 <PORTB_set_pin_level+0x6>
     f00:	cd b7       	in	r28, 0x3d	; 61
     f02:	de b7       	in	r29, 0x3e	; 62
     f04:	89 83       	std	Y+1, r24	; 0x01
     f06:	6a 83       	std	Y+2, r22	; 0x02
	if (level == true) {
     f08:	8a 81       	ldd	r24, Y+2	; 0x02
     f0a:	88 23       	and	r24, r24
     f0c:	a9 f0       	breq	.+42     	; 0xf38 <PORTB_set_pin_level+0x3e>
		VPORTB.OUT |= (1 << pin);
     f0e:	84 e0       	ldi	r24, 0x04	; 4
     f10:	90 e0       	ldi	r25, 0x00	; 0
     f12:	24 e0       	ldi	r18, 0x04	; 4
     f14:	30 e0       	ldi	r19, 0x00	; 0
     f16:	f9 01       	movw	r30, r18
     f18:	21 81       	ldd	r18, Z+1	; 0x01
     f1a:	62 2f       	mov	r22, r18
     f1c:	29 81       	ldd	r18, Y+1	; 0x01
     f1e:	42 2f       	mov	r20, r18
     f20:	50 e0       	ldi	r21, 0x00	; 0
     f22:	21 e0       	ldi	r18, 0x01	; 1
     f24:	30 e0       	ldi	r19, 0x00	; 0
     f26:	02 c0       	rjmp	.+4      	; 0xf2c <PORTB_set_pin_level+0x32>
     f28:	22 0f       	add	r18, r18
     f2a:	33 1f       	adc	r19, r19
     f2c:	4a 95       	dec	r20
     f2e:	e2 f7       	brpl	.-8      	; 0xf28 <PORTB_set_pin_level+0x2e>
     f30:	26 2b       	or	r18, r22
     f32:	fc 01       	movw	r30, r24
     f34:	21 83       	std	Z+1, r18	; 0x01
	} else {
		VPORTB.OUT &= ~(1 << pin);
	}
}
     f36:	15 c0       	rjmp	.+42     	; 0xf62 <PORTB_set_pin_level+0x68>
static inline void PORTB_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTB.OUT |= (1 << pin);
	} else {
		VPORTB.OUT &= ~(1 << pin);
     f38:	84 e0       	ldi	r24, 0x04	; 4
     f3a:	90 e0       	ldi	r25, 0x00	; 0
     f3c:	24 e0       	ldi	r18, 0x04	; 4
     f3e:	30 e0       	ldi	r19, 0x00	; 0
     f40:	f9 01       	movw	r30, r18
     f42:	21 81       	ldd	r18, Z+1	; 0x01
     f44:	62 2f       	mov	r22, r18
     f46:	29 81       	ldd	r18, Y+1	; 0x01
     f48:	42 2f       	mov	r20, r18
     f4a:	50 e0       	ldi	r21, 0x00	; 0
     f4c:	21 e0       	ldi	r18, 0x01	; 1
     f4e:	30 e0       	ldi	r19, 0x00	; 0
     f50:	02 c0       	rjmp	.+4      	; 0xf56 <PORTB_set_pin_level+0x5c>
     f52:	22 0f       	add	r18, r18
     f54:	33 1f       	adc	r19, r19
     f56:	4a 95       	dec	r20
     f58:	e2 f7       	brpl	.-8      	; 0xf52 <PORTB_set_pin_level+0x58>
     f5a:	20 95       	com	r18
     f5c:	26 23       	and	r18, r22
     f5e:	fc 01       	movw	r30, r24
     f60:	21 83       	std	Z+1, r18	; 0x01
	}
}
     f62:	00 00       	nop
     f64:	0f 90       	pop	r0
     f66:	0f 90       	pop	r0
     f68:	df 91       	pop	r29
     f6a:	cf 91       	pop	r28
     f6c:	08 95       	ret

00000f6e <PORTC_set_pin_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
     f6e:	cf 93       	push	r28
     f70:	df 93       	push	r29
     f72:	00 d0       	rcall	.+0      	; 0xf74 <PORTC_set_pin_dir+0x6>
     f74:	cd b7       	in	r28, 0x3d	; 61
     f76:	de b7       	in	r29, 0x3e	; 62
     f78:	89 83       	std	Y+1, r24	; 0x01
     f7a:	6a 83       	std	Y+2, r22	; 0x02
	switch (dir) {
     f7c:	8a 81       	ldd	r24, Y+2	; 0x02
     f7e:	88 2f       	mov	r24, r24
     f80:	90 e0       	ldi	r25, 0x00	; 0
     f82:	81 30       	cpi	r24, 0x01	; 1
     f84:	91 05       	cpc	r25, r1
     f86:	e1 f0       	breq	.+56     	; 0xfc0 <PORTC_set_pin_dir+0x52>
     f88:	82 30       	cpi	r24, 0x02	; 2
     f8a:	91 05       	cpc	r25, r1
     f8c:	71 f1       	breq	.+92     	; 0xfea <PORTC_set_pin_dir+0x7c>
     f8e:	89 2b       	or	r24, r25
     f90:	09 f0       	breq	.+2      	; 0xf94 <PORTC_set_pin_dir+0x26>
		break;
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTC + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
		break;
	default:
		break;
     f92:	3b c0       	rjmp	.+118    	; 0x100a <PORTC_set_pin_dir+0x9c>
 */
static inline void PORTC_set_pin_dir(const uint8_t pin, const enum port_dir dir)
{
	switch (dir) {
	case PORT_DIR_IN:
		VPORTC.DIR &= ~(1 << pin);
     f94:	88 e0       	ldi	r24, 0x08	; 8
     f96:	90 e0       	ldi	r25, 0x00	; 0
     f98:	28 e0       	ldi	r18, 0x08	; 8
     f9a:	30 e0       	ldi	r19, 0x00	; 0
     f9c:	f9 01       	movw	r30, r18
     f9e:	20 81       	ld	r18, Z
     fa0:	62 2f       	mov	r22, r18
     fa2:	29 81       	ldd	r18, Y+1	; 0x01
     fa4:	42 2f       	mov	r20, r18
     fa6:	50 e0       	ldi	r21, 0x00	; 0
     fa8:	21 e0       	ldi	r18, 0x01	; 1
     faa:	30 e0       	ldi	r19, 0x00	; 0
     fac:	02 c0       	rjmp	.+4      	; 0xfb2 <PORTC_set_pin_dir+0x44>
     fae:	22 0f       	add	r18, r18
     fb0:	33 1f       	adc	r19, r19
     fb2:	4a 95       	dec	r20
     fb4:	e2 f7       	brpl	.-8      	; 0xfae <PORTC_set_pin_dir+0x40>
     fb6:	20 95       	com	r18
     fb8:	26 23       	and	r18, r22
     fba:	fc 01       	movw	r30, r24
     fbc:	20 83       	st	Z, r18
		break;
     fbe:	25 c0       	rjmp	.+74     	; 0x100a <PORTC_set_pin_dir+0x9c>
	case PORT_DIR_OUT:
		VPORTC.DIR |= (1 << pin);
     fc0:	88 e0       	ldi	r24, 0x08	; 8
     fc2:	90 e0       	ldi	r25, 0x00	; 0
     fc4:	28 e0       	ldi	r18, 0x08	; 8
     fc6:	30 e0       	ldi	r19, 0x00	; 0
     fc8:	f9 01       	movw	r30, r18
     fca:	20 81       	ld	r18, Z
     fcc:	62 2f       	mov	r22, r18
     fce:	29 81       	ldd	r18, Y+1	; 0x01
     fd0:	42 2f       	mov	r20, r18
     fd2:	50 e0       	ldi	r21, 0x00	; 0
     fd4:	21 e0       	ldi	r18, 0x01	; 1
     fd6:	30 e0       	ldi	r19, 0x00	; 0
     fd8:	02 c0       	rjmp	.+4      	; 0xfde <PORTC_set_pin_dir+0x70>
     fda:	22 0f       	add	r18, r18
     fdc:	33 1f       	adc	r19, r19
     fde:	4a 95       	dec	r20
     fe0:	e2 f7       	brpl	.-8      	; 0xfda <PORTC_set_pin_dir+0x6c>
     fe2:	26 2b       	or	r18, r22
     fe4:	fc 01       	movw	r30, r24
     fe6:	20 83       	st	Z, r18
		break;
     fe8:	10 c0       	rjmp	.+32     	; 0x100a <PORTC_set_pin_dir+0x9c>
	case PORT_DIR_OFF:
		*((uint8_t *)&PORTC + 0x10 + pin) |= 1 << PORT_PULLUPEN_bp;
     fea:	89 81       	ldd	r24, Y+1	; 0x01
     fec:	88 2f       	mov	r24, r24
     fee:	90 e0       	ldi	r25, 0x00	; 0
     ff0:	80 5b       	subi	r24, 0xB0	; 176
     ff2:	9b 4f       	sbci	r25, 0xFB	; 251
     ff4:	29 81       	ldd	r18, Y+1	; 0x01
     ff6:	22 2f       	mov	r18, r18
     ff8:	30 e0       	ldi	r19, 0x00	; 0
     ffa:	20 5b       	subi	r18, 0xB0	; 176
     ffc:	3b 4f       	sbci	r19, 0xFB	; 251
     ffe:	f9 01       	movw	r30, r18
    1000:	20 81       	ld	r18, Z
    1002:	28 60       	ori	r18, 0x08	; 8
    1004:	fc 01       	movw	r30, r24
    1006:	20 83       	st	Z, r18
		break;
    1008:	00 00       	nop
	default:
		break;
	}
}
    100a:	00 00       	nop
    100c:	0f 90       	pop	r0
    100e:	0f 90       	pop	r0
    1010:	df 91       	pop	r29
    1012:	cf 91       	pop	r28
    1014:	08 95       	ret

00001016 <PORTC_set_pin_level>:
 * \param[in] pin       The pin number within port
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
    1016:	cf 93       	push	r28
    1018:	df 93       	push	r29
    101a:	00 d0       	rcall	.+0      	; 0x101c <PORTC_set_pin_level+0x6>
    101c:	cd b7       	in	r28, 0x3d	; 61
    101e:	de b7       	in	r29, 0x3e	; 62
    1020:	89 83       	std	Y+1, r24	; 0x01
    1022:	6a 83       	std	Y+2, r22	; 0x02
	if (level == true) {
    1024:	8a 81       	ldd	r24, Y+2	; 0x02
    1026:	88 23       	and	r24, r24
    1028:	a9 f0       	breq	.+42     	; 0x1054 <PORTC_set_pin_level+0x3e>
		VPORTC.OUT |= (1 << pin);
    102a:	88 e0       	ldi	r24, 0x08	; 8
    102c:	90 e0       	ldi	r25, 0x00	; 0
    102e:	28 e0       	ldi	r18, 0x08	; 8
    1030:	30 e0       	ldi	r19, 0x00	; 0
    1032:	f9 01       	movw	r30, r18
    1034:	21 81       	ldd	r18, Z+1	; 0x01
    1036:	62 2f       	mov	r22, r18
    1038:	29 81       	ldd	r18, Y+1	; 0x01
    103a:	42 2f       	mov	r20, r18
    103c:	50 e0       	ldi	r21, 0x00	; 0
    103e:	21 e0       	ldi	r18, 0x01	; 1
    1040:	30 e0       	ldi	r19, 0x00	; 0
    1042:	02 c0       	rjmp	.+4      	; 0x1048 <PORTC_set_pin_level+0x32>
    1044:	22 0f       	add	r18, r18
    1046:	33 1f       	adc	r19, r19
    1048:	4a 95       	dec	r20
    104a:	e2 f7       	brpl	.-8      	; 0x1044 <PORTC_set_pin_level+0x2e>
    104c:	26 2b       	or	r18, r22
    104e:	fc 01       	movw	r30, r24
    1050:	21 83       	std	Z+1, r18	; 0x01
	} else {
		VPORTC.OUT &= ~(1 << pin);
	}
}
    1052:	15 c0       	rjmp	.+42     	; 0x107e <PORTC_set_pin_level+0x68>
static inline void PORTC_set_pin_level(const uint8_t pin, const bool level)
{
	if (level == true) {
		VPORTC.OUT |= (1 << pin);
	} else {
		VPORTC.OUT &= ~(1 << pin);
    1054:	88 e0       	ldi	r24, 0x08	; 8
    1056:	90 e0       	ldi	r25, 0x00	; 0
    1058:	28 e0       	ldi	r18, 0x08	; 8
    105a:	30 e0       	ldi	r19, 0x00	; 0
    105c:	f9 01       	movw	r30, r18
    105e:	21 81       	ldd	r18, Z+1	; 0x01
    1060:	62 2f       	mov	r22, r18
    1062:	29 81       	ldd	r18, Y+1	; 0x01
    1064:	42 2f       	mov	r20, r18
    1066:	50 e0       	ldi	r21, 0x00	; 0
    1068:	21 e0       	ldi	r18, 0x01	; 1
    106a:	30 e0       	ldi	r19, 0x00	; 0
    106c:	02 c0       	rjmp	.+4      	; 0x1072 <PORTC_set_pin_level+0x5c>
    106e:	22 0f       	add	r18, r18
    1070:	33 1f       	adc	r19, r19
    1072:	4a 95       	dec	r20
    1074:	e2 f7       	brpl	.-8      	; 0x106e <PORTC_set_pin_level+0x58>
    1076:	20 95       	com	r18
    1078:	26 23       	and	r18, r22
    107a:	fc 01       	movw	r30, r24
    107c:	21 83       	std	Z+1, r18	; 0x01
	}
}
    107e:	00 00       	nop
    1080:	0f 90       	pop	r0
    1082:	0f 90       	pop	r0
    1084:	df 91       	pop	r29
    1086:	cf 91       	pop	r28
    1088:	08 95       	ret

0000108a <LED3_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void LED3_set_dir(const enum port_dir dir)
{
    108a:	cf 93       	push	r28
    108c:	df 93       	push	r29
    108e:	1f 92       	push	r1
    1090:	cd b7       	in	r28, 0x3d	; 61
    1092:	de b7       	in	r29, 0x3e	; 62
    1094:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_dir(4, dir);
    1096:	69 81       	ldd	r22, Y+1	; 0x01
    1098:	84 e0       	ldi	r24, 0x04	; 4
    109a:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <PORTA_set_pin_dir>
}
    109e:	00 00       	nop
    10a0:	0f 90       	pop	r0
    10a2:	df 91       	pop	r29
    10a4:	cf 91       	pop	r28
    10a6:	08 95       	ret

000010a8 <LED3_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void LED3_set_level(const bool level)
{
    10a8:	cf 93       	push	r28
    10aa:	df 93       	push	r29
    10ac:	1f 92       	push	r1
    10ae:	cd b7       	in	r28, 0x3d	; 61
    10b0:	de b7       	in	r29, 0x3e	; 62
    10b2:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_level(4, level);
    10b4:	69 81       	ldd	r22, Y+1	; 0x01
    10b6:	84 e0       	ldi	r24, 0x04	; 4
    10b8:	0e 94 be 06 	call	0xd7c	; 0xd7c <PORTA_set_pin_level>
}
    10bc:	00 00       	nop
    10be:	0f 90       	pop	r0
    10c0:	df 91       	pop	r29
    10c2:	cf 91       	pop	r28
    10c4:	08 95       	ret

000010c6 <LED2_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void LED2_set_dir(const enum port_dir dir)
{
    10c6:	cf 93       	push	r28
    10c8:	df 93       	push	r29
    10ca:	1f 92       	push	r1
    10cc:	cd b7       	in	r28, 0x3d	; 61
    10ce:	de b7       	in	r29, 0x3e	; 62
    10d0:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_dir(5, dir);
    10d2:	69 81       	ldd	r22, Y+1	; 0x01
    10d4:	85 e0       	ldi	r24, 0x05	; 5
    10d6:	0e 94 6a 06 	call	0xcd4	; 0xcd4 <PORTA_set_pin_dir>
}
    10da:	00 00       	nop
    10dc:	0f 90       	pop	r0
    10de:	df 91       	pop	r29
    10e0:	cf 91       	pop	r28
    10e2:	08 95       	ret

000010e4 <LED2_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void LED2_set_level(const bool level)
{
    10e4:	cf 93       	push	r28
    10e6:	df 93       	push	r29
    10e8:	1f 92       	push	r1
    10ea:	cd b7       	in	r28, 0x3d	; 61
    10ec:	de b7       	in	r29, 0x3e	; 62
    10ee:	89 83       	std	Y+1, r24	; 0x01
	PORTA_set_pin_level(5, level);
    10f0:	69 81       	ldd	r22, Y+1	; 0x01
    10f2:	85 e0       	ldi	r24, 0x05	; 5
    10f4:	0e 94 be 06 	call	0xd7c	; 0xd7c <PORTA_set_pin_level>
}
    10f8:	00 00       	nop
    10fa:	0f 90       	pop	r0
    10fc:	df 91       	pop	r29
    10fe:	cf 91       	pop	r28
    1100:	08 95       	ret

00001102 <LED0_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void LED0_set_dir(const enum port_dir dir)
{
    1102:	cf 93       	push	r28
    1104:	df 93       	push	r29
    1106:	1f 92       	push	r1
    1108:	cd b7       	in	r28, 0x3d	; 61
    110a:	de b7       	in	r29, 0x3e	; 62
    110c:	89 83       	std	Y+1, r24	; 0x01
	PORTB_set_pin_dir(0, dir);
    110e:	69 81       	ldd	r22, Y+1	; 0x01
    1110:	80 e0       	ldi	r24, 0x00	; 0
    1112:	0e 94 29 07 	call	0xe52	; 0xe52 <PORTB_set_pin_dir>
}
    1116:	00 00       	nop
    1118:	0f 90       	pop	r0
    111a:	df 91       	pop	r29
    111c:	cf 91       	pop	r28
    111e:	08 95       	ret

00001120 <LED0_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void LED0_set_level(const bool level)
{
    1120:	cf 93       	push	r28
    1122:	df 93       	push	r29
    1124:	1f 92       	push	r1
    1126:	cd b7       	in	r28, 0x3d	; 61
    1128:	de b7       	in	r29, 0x3e	; 62
    112a:	89 83       	std	Y+1, r24	; 0x01
	PORTB_set_pin_level(0, level);
    112c:	69 81       	ldd	r22, Y+1	; 0x01
    112e:	80 e0       	ldi	r24, 0x00	; 0
    1130:	0e 94 7d 07 	call	0xefa	; 0xefa <PORTB_set_pin_level>
}
    1134:	00 00       	nop
    1136:	0f 90       	pop	r0
    1138:	df 91       	pop	r29
    113a:	cf 91       	pop	r28
    113c:	08 95       	ret

0000113e <LED1_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void LED1_set_dir(const enum port_dir dir)
{
    113e:	cf 93       	push	r28
    1140:	df 93       	push	r29
    1142:	1f 92       	push	r1
    1144:	cd b7       	in	r28, 0x3d	; 61
    1146:	de b7       	in	r29, 0x3e	; 62
    1148:	89 83       	std	Y+1, r24	; 0x01
	PORTB_set_pin_dir(1, dir);
    114a:	69 81       	ldd	r22, Y+1	; 0x01
    114c:	81 e0       	ldi	r24, 0x01	; 1
    114e:	0e 94 29 07 	call	0xe52	; 0xe52 <PORTB_set_pin_dir>
}
    1152:	00 00       	nop
    1154:	0f 90       	pop	r0
    1156:	df 91       	pop	r29
    1158:	cf 91       	pop	r28
    115a:	08 95       	ret

0000115c <LED1_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void LED1_set_level(const bool level)
{
    115c:	cf 93       	push	r28
    115e:	df 93       	push	r29
    1160:	1f 92       	push	r1
    1162:	cd b7       	in	r28, 0x3d	; 61
    1164:	de b7       	in	r29, 0x3e	; 62
    1166:	89 83       	std	Y+1, r24	; 0x01
	PORTB_set_pin_level(1, level);
    1168:	69 81       	ldd	r22, Y+1	; 0x01
    116a:	81 e0       	ldi	r24, 0x01	; 1
    116c:	0e 94 7d 07 	call	0xefa	; 0xefa <PORTB_set_pin_level>
}
    1170:	00 00       	nop
    1172:	0f 90       	pop	r0
    1174:	df 91       	pop	r29
    1176:	cf 91       	pop	r28
    1178:	08 95       	ret

0000117a <PB2_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PB2_set_dir(const enum port_dir dir)
{
    117a:	cf 93       	push	r28
    117c:	df 93       	push	r29
    117e:	1f 92       	push	r1
    1180:	cd b7       	in	r28, 0x3d	; 61
    1182:	de b7       	in	r29, 0x3e	; 62
    1184:	89 83       	std	Y+1, r24	; 0x01
	PORTB_set_pin_dir(2, dir);
    1186:	69 81       	ldd	r22, Y+1	; 0x01
    1188:	82 e0       	ldi	r24, 0x02	; 2
    118a:	0e 94 29 07 	call	0xe52	; 0xe52 <PORTB_set_pin_dir>
}
    118e:	00 00       	nop
    1190:	0f 90       	pop	r0
    1192:	df 91       	pop	r29
    1194:	cf 91       	pop	r28
    1196:	08 95       	ret

00001198 <PB2_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void PB2_set_level(const bool level)
{
    1198:	cf 93       	push	r28
    119a:	df 93       	push	r29
    119c:	1f 92       	push	r1
    119e:	cd b7       	in	r28, 0x3d	; 61
    11a0:	de b7       	in	r29, 0x3e	; 62
    11a2:	89 83       	std	Y+1, r24	; 0x01
	PORTB_set_pin_level(2, level);
    11a4:	69 81       	ldd	r22, Y+1	; 0x01
    11a6:	82 e0       	ldi	r24, 0x02	; 2
    11a8:	0e 94 7d 07 	call	0xefa	; 0xefa <PORTB_set_pin_level>
}
    11ac:	00 00       	nop
    11ae:	0f 90       	pop	r0
    11b0:	df 91       	pop	r29
    11b2:	cf 91       	pop	r28
    11b4:	08 95       	ret

000011b6 <PB3_set_pull_mode>:
 * modes are defined by device used
 *
 * \param[in] pull_mode Pin pull mode
 */
static inline void PB3_set_pull_mode(const enum port_pull_mode pull_mode)
{
    11b6:	cf 93       	push	r28
    11b8:	df 93       	push	r29
    11ba:	1f 92       	push	r1
    11bc:	cd b7       	in	r28, 0x3d	; 61
    11be:	de b7       	in	r29, 0x3e	; 62
    11c0:	89 83       	std	Y+1, r24	; 0x01
	PORTB_set_pin_pull_mode(3, pull_mode);
    11c2:	69 81       	ldd	r22, Y+1	; 0x01
    11c4:	83 e0       	ldi	r24, 0x03	; 3
    11c6:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <PORTB_set_pin_pull_mode>
}
    11ca:	00 00       	nop
    11cc:	0f 90       	pop	r0
    11ce:	df 91       	pop	r29
    11d0:	cf 91       	pop	r28
    11d2:	08 95       	ret

000011d4 <PB3_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PB3_set_dir(const enum port_dir dir)
{
    11d4:	cf 93       	push	r28
    11d6:	df 93       	push	r29
    11d8:	1f 92       	push	r1
    11da:	cd b7       	in	r28, 0x3d	; 61
    11dc:	de b7       	in	r29, 0x3e	; 62
    11de:	89 83       	std	Y+1, r24	; 0x01
	PORTB_set_pin_dir(3, dir);
    11e0:	69 81       	ldd	r22, Y+1	; 0x01
    11e2:	83 e0       	ldi	r24, 0x03	; 3
    11e4:	0e 94 29 07 	call	0xe52	; 0xe52 <PORTB_set_pin_dir>
}
    11e8:	00 00       	nop
    11ea:	0f 90       	pop	r0
    11ec:	df 91       	pop	r29
    11ee:	cf 91       	pop	r28
    11f0:	08 95       	ret

000011f2 <PB5_set_pull_mode>:
 * modes are defined by device used
 *
 * \param[in] pull_mode Pin pull mode
 */
static inline void PB5_set_pull_mode(const enum port_pull_mode pull_mode)
{
    11f2:	cf 93       	push	r28
    11f4:	df 93       	push	r29
    11f6:	1f 92       	push	r1
    11f8:	cd b7       	in	r28, 0x3d	; 61
    11fa:	de b7       	in	r29, 0x3e	; 62
    11fc:	89 83       	std	Y+1, r24	; 0x01
	PORTB_set_pin_pull_mode(5, pull_mode);
    11fe:	69 81       	ldd	r22, Y+1	; 0x01
    1200:	85 e0       	ldi	r24, 0x05	; 5
    1202:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <PORTB_set_pin_pull_mode>
}
    1206:	00 00       	nop
    1208:	0f 90       	pop	r0
    120a:	df 91       	pop	r29
    120c:	cf 91       	pop	r28
    120e:	08 95       	ret

00001210 <PB5_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void PB5_set_dir(const enum port_dir dir)
{
    1210:	cf 93       	push	r28
    1212:	df 93       	push	r29
    1214:	1f 92       	push	r1
    1216:	cd b7       	in	r28, 0x3d	; 61
    1218:	de b7       	in	r29, 0x3e	; 62
    121a:	89 83       	std	Y+1, r24	; 0x01
	PORTB_set_pin_dir(5, dir);
    121c:	69 81       	ldd	r22, Y+1	; 0x01
    121e:	85 e0       	ldi	r24, 0x05	; 5
    1220:	0e 94 29 07 	call	0xe52	; 0xe52 <PORTB_set_pin_dir>
}
    1224:	00 00       	nop
    1226:	0f 90       	pop	r0
    1228:	df 91       	pop	r29
    122a:	cf 91       	pop	r28
    122c:	08 95       	ret

0000122e <LED_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void LED_set_dir(const enum port_dir dir)
{
    122e:	cf 93       	push	r28
    1230:	df 93       	push	r29
    1232:	1f 92       	push	r1
    1234:	cd b7       	in	r28, 0x3d	; 61
    1236:	de b7       	in	r29, 0x3e	; 62
    1238:	89 83       	std	Y+1, r24	; 0x01
	PORTB_set_pin_dir(6, dir);
    123a:	69 81       	ldd	r22, Y+1	; 0x01
    123c:	86 e0       	ldi	r24, 0x06	; 6
    123e:	0e 94 29 07 	call	0xe52	; 0xe52 <PORTB_set_pin_dir>
}
    1242:	00 00       	nop
    1244:	0f 90       	pop	r0
    1246:	df 91       	pop	r29
    1248:	cf 91       	pop	r28
    124a:	08 95       	ret

0000124c <LED_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void LED_set_level(const bool level)
{
    124c:	cf 93       	push	r28
    124e:	df 93       	push	r29
    1250:	1f 92       	push	r1
    1252:	cd b7       	in	r28, 0x3d	; 61
    1254:	de b7       	in	r29, 0x3e	; 62
    1256:	89 83       	std	Y+1, r24	; 0x01
	PORTB_set_pin_level(6, level);
    1258:	69 81       	ldd	r22, Y+1	; 0x01
    125a:	86 e0       	ldi	r24, 0x06	; 6
    125c:	0e 94 7d 07 	call	0xefa	; 0xefa <PORTB_set_pin_level>
}
    1260:	00 00       	nop
    1262:	0f 90       	pop	r0
    1264:	df 91       	pop	r29
    1266:	cf 91       	pop	r28
    1268:	08 95       	ret

0000126a <INPUT_set_pull_mode>:
 * modes are defined by device used
 *
 * \param[in] pull_mode Pin pull mode
 */
static inline void INPUT_set_pull_mode(const enum port_pull_mode pull_mode)
{
    126a:	cf 93       	push	r28
    126c:	df 93       	push	r29
    126e:	1f 92       	push	r1
    1270:	cd b7       	in	r28, 0x3d	; 61
    1272:	de b7       	in	r29, 0x3e	; 62
    1274:	89 83       	std	Y+1, r24	; 0x01
	PORTB_set_pin_pull_mode(7, pull_mode);
    1276:	69 81       	ldd	r22, Y+1	; 0x01
    1278:	87 e0       	ldi	r24, 0x07	; 7
    127a:	0e 94 f8 06 	call	0xdf0	; 0xdf0 <PORTB_set_pin_pull_mode>
}
    127e:	00 00       	nop
    1280:	0f 90       	pop	r0
    1282:	df 91       	pop	r29
    1284:	cf 91       	pop	r28
    1286:	08 95       	ret

00001288 <INPUT_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void INPUT_set_dir(const enum port_dir dir)
{
    1288:	cf 93       	push	r28
    128a:	df 93       	push	r29
    128c:	1f 92       	push	r1
    128e:	cd b7       	in	r28, 0x3d	; 61
    1290:	de b7       	in	r29, 0x3e	; 62
    1292:	89 83       	std	Y+1, r24	; 0x01
	PORTB_set_pin_dir(7, dir);
    1294:	69 81       	ldd	r22, Y+1	; 0x01
    1296:	87 e0       	ldi	r24, 0x07	; 7
    1298:	0e 94 29 07 	call	0xe52	; 0xe52 <PORTB_set_pin_dir>
}
    129c:	00 00       	nop
    129e:	0f 90       	pop	r0
    12a0:	df 91       	pop	r29
    12a2:	cf 91       	pop	r28
    12a4:	08 95       	ret

000012a6 <SHIELD_ENABLE_set_dir>:
 *                      PORT_DIR_OUT = Data direction out
 *                      PORT_DIR_OFF = Disables the pin
 *                      (low power state)
 */
static inline void SHIELD_ENABLE_set_dir(const enum port_dir dir)
{
    12a6:	cf 93       	push	r28
    12a8:	df 93       	push	r29
    12aa:	1f 92       	push	r1
    12ac:	cd b7       	in	r28, 0x3d	; 61
    12ae:	de b7       	in	r29, 0x3e	; 62
    12b0:	89 83       	std	Y+1, r24	; 0x01
	PORTC_set_pin_dir(3, dir);
    12b2:	69 81       	ldd	r22, Y+1	; 0x01
    12b4:	83 e0       	ldi	r24, 0x03	; 3
    12b6:	0e 94 b7 07 	call	0xf6e	; 0xf6e <PORTC_set_pin_dir>
}
    12ba:	00 00       	nop
    12bc:	0f 90       	pop	r0
    12be:	df 91       	pop	r29
    12c0:	cf 91       	pop	r28
    12c2:	08 95       	ret

000012c4 <SHIELD_ENABLE_set_level>:
 *
 * \param[in] level true  = Pin level set to "high" state
 *                  false = Pin level set to "low" state
 */
static inline void SHIELD_ENABLE_set_level(const bool level)
{
    12c4:	cf 93       	push	r28
    12c6:	df 93       	push	r29
    12c8:	1f 92       	push	r1
    12ca:	cd b7       	in	r28, 0x3d	; 61
    12cc:	de b7       	in	r29, 0x3e	; 62
    12ce:	89 83       	std	Y+1, r24	; 0x01
	PORTC_set_pin_level(3, level);
    12d0:	69 81       	ldd	r22, Y+1	; 0x01
    12d2:	83 e0       	ldi	r24, 0x03	; 3
    12d4:	0e 94 0b 08 	call	0x1016	; 0x1016 <PORTC_set_pin_level>
}
    12d8:	00 00       	nop
    12da:	0f 90       	pop	r0
    12dc:	df 91       	pop	r29
    12de:	cf 91       	pop	r28
    12e0:	08 95       	ret

000012e2 <mcu_init>:
#ifdef __cplusplus
extern "C" {
#endif

void mcu_init(void)
{
    12e2:	cf 93       	push	r28
    12e4:	df 93       	push	r29
    12e6:	00 d0       	rcall	.+0      	; 0x12e8 <mcu_init+0x6>
    12e8:	1f 92       	push	r1
    12ea:	cd b7       	in	r28, 0x3d	; 61
    12ec:	de b7       	in	r29, 0x3e	; 62
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
    12ee:	19 82       	std	Y+1, r1	; 0x01
    12f0:	12 c0       	rjmp	.+36     	; 0x1316 <mcu_init+0x34>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    12f2:	89 81       	ldd	r24, Y+1	; 0x01
    12f4:	88 2f       	mov	r24, r24
    12f6:	90 e0       	ldi	r25, 0x00	; 0
    12f8:	80 5f       	subi	r24, 0xF0	; 240
    12fa:	9b 4f       	sbci	r25, 0xFB	; 251
    12fc:	29 81       	ldd	r18, Y+1	; 0x01
    12fe:	22 2f       	mov	r18, r18
    1300:	30 e0       	ldi	r19, 0x00	; 0
    1302:	20 5f       	subi	r18, 0xF0	; 240
    1304:	3b 4f       	sbci	r19, 0xFB	; 251
    1306:	f9 01       	movw	r30, r18
    1308:	20 81       	ld	r18, Z
    130a:	28 60       	ori	r18, 0x08	; 8
    130c:	fc 01       	movw	r30, r24
    130e:	20 83       	st	Z, r18
	 * disables all peripherals to save power. Driver shall enable
	 * peripheral if used */

	/* Set all pins to low power mode */

	for (uint8_t i = 0; i < 8; i++) {
    1310:	89 81       	ldd	r24, Y+1	; 0x01
    1312:	8f 5f       	subi	r24, 0xFF	; 255
    1314:	89 83       	std	Y+1, r24	; 0x01
    1316:	89 81       	ldd	r24, Y+1	; 0x01
    1318:	88 30       	cpi	r24, 0x08	; 8
    131a:	58 f3       	brcs	.-42     	; 0x12f2 <mcu_init+0x10>
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    131c:	1a 82       	std	Y+2, r1	; 0x02
    131e:	12 c0       	rjmp	.+36     	; 0x1344 <mcu_init+0x62>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    1320:	8a 81       	ldd	r24, Y+2	; 0x02
    1322:	88 2f       	mov	r24, r24
    1324:	90 e0       	ldi	r25, 0x00	; 0
    1326:	80 5d       	subi	r24, 0xD0	; 208
    1328:	9b 4f       	sbci	r25, 0xFB	; 251
    132a:	2a 81       	ldd	r18, Y+2	; 0x02
    132c:	22 2f       	mov	r18, r18
    132e:	30 e0       	ldi	r19, 0x00	; 0
    1330:	20 5d       	subi	r18, 0xD0	; 208
    1332:	3b 4f       	sbci	r19, 0xFB	; 251
    1334:	f9 01       	movw	r30, r18
    1336:	20 81       	ld	r18, Z
    1338:	28 60       	ori	r18, 0x08	; 8
    133a:	fc 01       	movw	r30, r24
    133c:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTA + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    133e:	8a 81       	ldd	r24, Y+2	; 0x02
    1340:	8f 5f       	subi	r24, 0xFF	; 255
    1342:	8a 83       	std	Y+2, r24	; 0x02
    1344:	8a 81       	ldd	r24, Y+2	; 0x02
    1346:	88 30       	cpi	r24, 0x08	; 8
    1348:	58 f3       	brcs	.-42     	; 0x1320 <mcu_init+0x3e>
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    134a:	1b 82       	std	Y+3, r1	; 0x03
    134c:	12 c0       	rjmp	.+36     	; 0x1372 <mcu_init+0x90>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
    134e:	8b 81       	ldd	r24, Y+3	; 0x03
    1350:	88 2f       	mov	r24, r24
    1352:	90 e0       	ldi	r25, 0x00	; 0
    1354:	80 5b       	subi	r24, 0xB0	; 176
    1356:	9b 4f       	sbci	r25, 0xFB	; 251
    1358:	2b 81       	ldd	r18, Y+3	; 0x03
    135a:	22 2f       	mov	r18, r18
    135c:	30 e0       	ldi	r19, 0x00	; 0
    135e:	20 5b       	subi	r18, 0xB0	; 176
    1360:	3b 4f       	sbci	r19, 0xFB	; 251
    1362:	f9 01       	movw	r30, r18
    1364:	20 81       	ld	r18, Z
    1366:	28 60       	ori	r18, 0x08	; 8
    1368:	fc 01       	movw	r30, r24
    136a:	20 83       	st	Z, r18

	for (uint8_t i = 0; i < 8; i++) {
		*((uint8_t *)&PORTB + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}

	for (uint8_t i = 0; i < 8; i++) {
    136c:	8b 81       	ldd	r24, Y+3	; 0x03
    136e:	8f 5f       	subi	r24, 0xFF	; 255
    1370:	8b 83       	std	Y+3, r24	; 0x03
    1372:	8b 81       	ldd	r24, Y+3	; 0x03
    1374:	88 30       	cpi	r24, 0x08	; 8
    1376:	58 f3       	brcs	.-42     	; 0x134e <mcu_init+0x6c>
		*((uint8_t *)&PORTC + 0x10 + i) |= 1 << PORT_PULLUPEN_bp;
	}
}
    1378:	00 00       	nop
    137a:	23 96       	adiw	r28, 0x03	; 3
    137c:	cd bf       	out	0x3d, r28	; 61
    137e:	de bf       	out	0x3e, r29	; 62
    1380:	df 91       	pop	r29
    1382:	cf 91       	pop	r28
    1384:	08 95       	ret

00001386 <USART_initialization>:
#include "driver_init.h"
#include <system.h>

/* configure the pins and initialize the registers */
void USART_initialization(void)
{
    1386:	cf 93       	push	r28
    1388:	df 93       	push	r29
    138a:	cd b7       	in	r28, 0x3d	; 61
    138c:	de b7       	in	r29, 0x3e	; 62

	// Set pin direction to input
	PB3_set_dir(PORT_DIR_IN);
    138e:	80 e0       	ldi	r24, 0x00	; 0
    1390:	0e 94 ea 08 	call	0x11d4	; 0x11d4 <PB3_set_dir>

	PB3_set_pull_mode(
    1394:	80 e0       	ldi	r24, 0x00	; 0
    1396:	0e 94 db 08 	call	0x11b6	; 0x11b6 <PB3_set_pull_mode>
	    // <PORT_PULL_OFF"> Off
	    // <PORT_PULL_UP"> Pull-up
	    PORT_PULL_OFF);

	// Set pin direction to output
	PB2_set_dir(PORT_DIR_OUT);
    139a:	81 e0       	ldi	r24, 0x01	; 1
    139c:	0e 94 bd 08 	call	0x117a	; 0x117a <PB2_set_dir>

	PB2_set_level(
    13a0:	80 e0       	ldi	r24, 0x00	; 0
    13a2:	0e 94 cc 08 	call	0x1198	; 0x1198 <PB2_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	USART_init();
    13a6:	0e 94 44 0a 	call	0x1488	; 0x1488 <USART_init>
}
    13aa:	00 00       	nop
    13ac:	df 91       	pop	r29
    13ae:	cf 91       	pop	r28
    13b0:	08 95       	ret

000013b2 <system_init>:

/**
 * \brief System initialization
 */
void system_init()
{
    13b2:	cf 93       	push	r28
    13b4:	df 93       	push	r29
    13b6:	cd b7       	in	r28, 0x3d	; 61
    13b8:	de b7       	in	r29, 0x3e	; 62
	mcu_init();
    13ba:	0e 94 71 09 	call	0x12e2	; 0x12e2 <mcu_init>

	/* PORT setting on PA4 */

	// Set pin direction to output
	LED3_set_dir(PORT_DIR_OUT);
    13be:	81 e0       	ldi	r24, 0x01	; 1
    13c0:	0e 94 45 08 	call	0x108a	; 0x108a <LED3_set_dir>

	LED3_set_level(
    13c4:	81 e0       	ldi	r24, 0x01	; 1
    13c6:	0e 94 54 08 	call	0x10a8	; 0x10a8 <LED3_set_level>
	    true);

	/* PORT setting on PA5 */

	// Set pin direction to output
	LED2_set_dir(PORT_DIR_OUT);
    13ca:	81 e0       	ldi	r24, 0x01	; 1
    13cc:	0e 94 63 08 	call	0x10c6	; 0x10c6 <LED2_set_dir>

	LED2_set_level(
    13d0:	81 e0       	ldi	r24, 0x01	; 1
    13d2:	0e 94 72 08 	call	0x10e4	; 0x10e4 <LED2_set_level>
	    true);

	/* PORT setting on PB0 */

	// Set pin direction to output
	LED0_set_dir(PORT_DIR_OUT);
    13d6:	81 e0       	ldi	r24, 0x01	; 1
    13d8:	0e 94 81 08 	call	0x1102	; 0x1102 <LED0_set_dir>

	LED0_set_level(
    13dc:	81 e0       	ldi	r24, 0x01	; 1
    13de:	0e 94 90 08 	call	0x1120	; 0x1120 <LED0_set_level>
	    true);

	/* PORT setting on PB1 */

	// Set pin direction to output
	LED1_set_dir(PORT_DIR_OUT);
    13e2:	81 e0       	ldi	r24, 0x01	; 1
    13e4:	0e 94 9f 08 	call	0x113e	; 0x113e <LED1_set_dir>

	LED1_set_level(
    13e8:	81 e0       	ldi	r24, 0x01	; 1
    13ea:	0e 94 ae 08 	call	0x115c	; 0x115c <LED1_set_level>
	    true);

	/* PORT setting on PB5 */

	// Set pin direction to input
	PB5_set_dir(PORT_DIR_IN);
    13ee:	80 e0       	ldi	r24, 0x00	; 0
    13f0:	0e 94 08 09 	call	0x1210	; 0x1210 <PB5_set_dir>

	PB5_set_pull_mode(
    13f4:	81 e0       	ldi	r24, 0x01	; 1
    13f6:	0e 94 f9 08 	call	0x11f2	; 0x11f2 <PB5_set_pull_mode>
	    PORT_PULL_UP);

	/* PORT setting on PB6 */

	// Set pin direction to output
	LED_set_dir(PORT_DIR_OUT);
    13fa:	81 e0       	ldi	r24, 0x01	; 1
    13fc:	0e 94 17 09 	call	0x122e	; 0x122e <LED_set_dir>

	LED_set_level(
    1400:	81 e0       	ldi	r24, 0x01	; 1
    1402:	0e 94 26 09 	call	0x124c	; 0x124c <LED_set_level>
	    true);

	/* PORT setting on PB7 */

	// Set pin direction to input
	INPUT_set_dir(PORT_DIR_IN);
    1406:	80 e0       	ldi	r24, 0x00	; 0
    1408:	0e 94 44 09 	call	0x1288	; 0x1288 <INPUT_set_dir>

	INPUT_set_pull_mode(
    140c:	80 e0       	ldi	r24, 0x00	; 0
    140e:	0e 94 35 09 	call	0x126a	; 0x126a <INPUT_set_pull_mode>
	    PORT_PULL_OFF);

	/* PORT setting on PC3 */

	// Set pin direction to output
	SHIELD_ENABLE_set_dir(PORT_DIR_OUT);
    1412:	81 e0       	ldi	r24, 0x01	; 1
    1414:	0e 94 53 09 	call	0x12a6	; 0x12a6 <SHIELD_ENABLE_set_dir>

	SHIELD_ENABLE_set_level(
    1418:	80 e0       	ldi	r24, 0x00	; 0
    141a:	0e 94 62 09 	call	0x12c4	; 0x12c4 <SHIELD_ENABLE_set_level>
	    // <id> pad_initial_level
	    // <false"> Low
	    // <true"> High
	    false);

	CLKCTRL_init();
    141e:	0e 94 54 06 	call	0xca8	; 0xca8 <CLKCTRL_init>

	Timer_init();
    1422:	0e 94 23 0a 	call	0x1446	; 0x1446 <Timer_init>

	USART_initialization();
    1426:	0e 94 c3 09 	call	0x1386	; 0x1386 <USART_initialization>

	CPUINT_init();
    142a:	0e 94 61 06 	call	0xcc2	; 0xcc2 <CPUINT_init>

	SLPCTRL_init();
    142e:	0e 94 3c 0a 	call	0x1478	; 0x1478 <SLPCTRL_init>

	BOD_init();
    1432:	0e 94 36 06 	call	0xc6c	; 0xc6c <BOD_init>
}
    1436:	00 00       	nop
    1438:	df 91       	pop	r29
    143a:	cf 91       	pop	r28
    143c:	08 95       	ret

0000143e <protected_write_io>:
#if defined(__GNUC__)
  
#ifdef RAMPZ
	out     _SFR_IO_ADDR(RAMPZ), r1         // Clear bits 23:16 of Z
#endif
	movw    r30, r24                // Load addr into Z
    143e:	fc 01       	movw	r30, r24
	out     CCP, r22                // Start CCP handshake
    1440:	64 bf       	out	0x34, r22	; 52
	st      Z, r20                  // Write value to I/O register
    1442:	40 83       	st	Z, r20
	ret                             // Return to caller
    1444:	08 95       	ret

00001446 <Timer_init>:
/**
 * \brief Initialize rtc interface
 * \return Initialization status.
 */
int8_t Timer_init()
{
    1446:	cf 93       	push	r28
    1448:	df 93       	push	r29
    144a:	cd b7       	in	r28, 0x3d	; 61
    144c:	de b7       	in	r29, 0x3e	; 62

	while (RTC.STATUS > 0) { /* Wait for all register to be synchronized */
    144e:	00 00       	nop
    1450:	80 e4       	ldi	r24, 0x40	; 64
    1452:	91 e0       	ldi	r25, 0x01	; 1
    1454:	fc 01       	movw	r30, r24
    1456:	81 81       	ldd	r24, Z+1	; 0x01
    1458:	88 23       	and	r24, r24
    145a:	d1 f7       	brne	.-12     	; 0x1450 <Timer_init+0xa>

	// RTC.CMP = 0x0; /* Compare: 0x0 */

	// RTC.CNT = 0x0; /* Counter: 0x0 */

	RTC.CTRLA = RTC_PRESCALER_DIV1_gc   /* 1 */
    145c:	80 e4       	ldi	r24, 0x40	; 64
    145e:	91 e0       	ldi	r25, 0x01	; 1
    1460:	21 e8       	ldi	r18, 0x81	; 129
    1462:	fc 01       	movw	r30, r24
    1464:	20 83       	st	Z, r18

	// RTC.CLKSEL = RTC_CLKSEL_INT32K_gc; /* 32KHz Internal Ultra Low Power Oscillator (OSCULP32K) */

	// RTC.DBGCTRL = 0 << RTC_DBGRUN_bp; /* Run in debug: disabled */

	RTC.INTCTRL = 1 << RTC_CMP_bp    /* Compare Match Interrupt enable: enabled */
    1466:	80 e4       	ldi	r24, 0x40	; 64
    1468:	91 e0       	ldi	r25, 0x01	; 1
    146a:	22 e0       	ldi	r18, 0x02	; 2
    146c:	fc 01       	movw	r30, r24
    146e:	22 83       	std	Z+2, r18	; 0x02

	// RTC.PITDBGCTRL = 0 << RTC_DBGRUN_bp; /* Run in debug: disabled */

	// RTC.PITINTCTRL = 0 << RTC_PI_bp; /* Periodic Interrupt: disabled */

	return 0;
    1470:	80 e0       	ldi	r24, 0x00	; 0
}
    1472:	df 91       	pop	r29
    1474:	cf 91       	pop	r28
    1476:	08 95       	ret

00001478 <SLPCTRL_init>:
 * \brief Initialize Sleep Controller
 *
 * \return Initialization status.
 */
int8_t SLPCTRL_init()
{
    1478:	cf 93       	push	r28
    147a:	df 93       	push	r29
    147c:	cd b7       	in	r28, 0x3d	; 61
    147e:	de b7       	in	r29, 0x3e	; 62

	// SLPCTRL.CTRLA = 0 << SLPCTRL_SEN_bp /* Sleep enable: disabled */
	//		 | SLPCTRL_SMODE_IDLE_gc; /* Idle mode */

	return 0;
    1480:	80 e0       	ldi	r24, 0x00	; 0
}
    1482:	df 91       	pop	r29
    1484:	cf 91       	pop	r28
    1486:	08 95       	ret

00001488 <USART_init>:
uint8_t USART_read()
{
	while (!(USART0.STATUS & USART_RXCIF_bm))
		;
	return USART0.RXDATAL;
}
    1488:	cf 93       	push	r28
    148a:	df 93       	push	r29
    148c:	cd b7       	in	r28, 0x3d	; 61
    148e:	de b7       	in	r29, 0x3e	; 62
    1490:	80 e0       	ldi	r24, 0x00	; 0
    1492:	98 e0       	ldi	r25, 0x08	; 8
    1494:	22 e1       	ldi	r18, 0x12	; 18
    1496:	34 e0       	ldi	r19, 0x04	; 4
    1498:	fc 01       	movw	r30, r24
    149a:	20 87       	std	Z+8, r18	; 0x08
    149c:	31 87       	std	Z+9, r19	; 0x09
    149e:	80 e0       	ldi	r24, 0x00	; 0
    14a0:	98 e0       	ldi	r25, 0x08	; 8
    14a2:	20 ec       	ldi	r18, 0xC0	; 192
    14a4:	fc 01       	movw	r30, r24
    14a6:	26 83       	std	Z+6, r18	; 0x06
    14a8:	80 e0       	ldi	r24, 0x00	; 0
    14aa:	df 91       	pop	r29
    14ac:	cf 91       	pop	r28
    14ae:	08 95       	ret

000014b0 <USART_is_tx_ready>:
    14b0:	cf 93       	push	r28
    14b2:	df 93       	push	r29
    14b4:	cd b7       	in	r28, 0x3d	; 61
    14b6:	de b7       	in	r29, 0x3e	; 62
    14b8:	80 e0       	ldi	r24, 0x00	; 0
    14ba:	98 e0       	ldi	r25, 0x08	; 8
    14bc:	fc 01       	movw	r30, r24
    14be:	84 81       	ldd	r24, Z+4	; 0x04
    14c0:	88 2f       	mov	r24, r24
    14c2:	90 e0       	ldi	r25, 0x00	; 0
    14c4:	80 72       	andi	r24, 0x20	; 32
    14c6:	99 27       	eor	r25, r25
    14c8:	21 e0       	ldi	r18, 0x01	; 1
    14ca:	89 2b       	or	r24, r25
    14cc:	09 f4       	brne	.+2      	; 0x14d0 <USART_is_tx_ready+0x20>
    14ce:	20 e0       	ldi	r18, 0x00	; 0
    14d0:	82 2f       	mov	r24, r18
    14d2:	df 91       	pop	r29
    14d4:	cf 91       	pop	r28
    14d6:	08 95       	ret

000014d8 <USART_is_tx_busy>:
    14d8:	cf 93       	push	r28
    14da:	df 93       	push	r29
    14dc:	cd b7       	in	r28, 0x3d	; 61
    14de:	de b7       	in	r29, 0x3e	; 62
    14e0:	80 e0       	ldi	r24, 0x00	; 0
    14e2:	98 e0       	ldi	r25, 0x08	; 8
    14e4:	fc 01       	movw	r30, r24
    14e6:	84 81       	ldd	r24, Z+4	; 0x04
    14e8:	88 2f       	mov	r24, r24
    14ea:	90 e0       	ldi	r25, 0x00	; 0
    14ec:	80 74       	andi	r24, 0x40	; 64
    14ee:	99 27       	eor	r25, r25
    14f0:	21 e0       	ldi	r18, 0x01	; 1
    14f2:	89 2b       	or	r24, r25
    14f4:	09 f0       	breq	.+2      	; 0x14f8 <USART_is_tx_busy+0x20>
    14f6:	20 e0       	ldi	r18, 0x00	; 0
    14f8:	82 2f       	mov	r24, r18
    14fa:	df 91       	pop	r29
    14fc:	cf 91       	pop	r28
    14fe:	08 95       	ret

00001500 <USART_write>:
 * \param[in] data The character to write to the USART
 *
 * \return Nothing
 */
void USART_write(const uint8_t data)
{
    1500:	cf 93       	push	r28
    1502:	df 93       	push	r29
    1504:	1f 92       	push	r1
    1506:	cd b7       	in	r28, 0x3d	; 61
    1508:	de b7       	in	r29, 0x3e	; 62
    150a:	89 83       	std	Y+1, r24	; 0x01
	while (!(USART0.STATUS & USART_DREIF_bm))
    150c:	00 00       	nop
    150e:	80 e0       	ldi	r24, 0x00	; 0
    1510:	98 e0       	ldi	r25, 0x08	; 8
    1512:	fc 01       	movw	r30, r24
    1514:	84 81       	ldd	r24, Z+4	; 0x04
    1516:	88 2f       	mov	r24, r24
    1518:	90 e0       	ldi	r25, 0x00	; 0
    151a:	80 72       	andi	r24, 0x20	; 32
    151c:	99 27       	eor	r25, r25
    151e:	89 2b       	or	r24, r25
    1520:	b1 f3       	breq	.-20     	; 0x150e <USART_write+0xe>
		;
	USART0.TXDATAL = data;
    1522:	80 e0       	ldi	r24, 0x00	; 0
    1524:	98 e0       	ldi	r25, 0x08	; 8
    1526:	29 81       	ldd	r18, Y+1	; 0x01
    1528:	fc 01       	movw	r30, r24
    152a:	22 83       	std	Z+2, r18	; 0x02
}
    152c:	00 00       	nop
    152e:	0f 90       	pop	r0
    1530:	df 91       	pop	r29
    1532:	cf 91       	pop	r28
    1534:	08 95       	ret

00001536 <check_for_aks_block>:
    1536:	cf 92       	push	r12
    1538:	df 92       	push	r13
    153a:	ff 92       	push	r15
    153c:	0f 93       	push	r16
    153e:	1f 93       	push	r17
    1540:	cf 93       	push	r28
    1542:	df 93       	push	r29
    1544:	ec 01       	movw	r28, r24
    1546:	ae 81       	ldd	r26, Y+6	; 0x06
    1548:	bf 81       	ldd	r27, Y+7	; 0x07
    154a:	eb 01       	movw	r28, r22
    154c:	cc 0f       	add	r28, r28
    154e:	dd 1f       	adc	r29, r29
    1550:	c6 0f       	add	r28, r22
    1552:	d7 1f       	adc	r29, r23
    1554:	ca 0f       	add	r28, r26
    1556:	db 1f       	adc	r29, r27
    1558:	fa 80       	ldd	r15, Y+2	; 0x02
    155a:	fc 01       	movw	r30, r24
    155c:	44 81       	ldd	r20, Z+4	; 0x04
    155e:	55 81       	ldd	r21, Z+5	; 0x05
    1560:	e6 e0       	ldi	r30, 0x06	; 6
    1562:	e6 9f       	mul	r30, r22
    1564:	90 01       	movw	r18, r0
    1566:	e7 9f       	mul	r30, r23
    1568:	30 0d       	add	r19, r0
    156a:	11 24       	eor	r1, r1
    156c:	8a 01       	movw	r16, r20
    156e:	02 0f       	add	r16, r18
    1570:	13 1f       	adc	r17, r19
    1572:	f8 01       	movw	r30, r16
    1574:	22 81       	ldd	r18, Z+2	; 0x02
    1576:	33 81       	ldd	r19, Z+3	; 0x03
    1578:	f9 01       	movw	r30, r18
    157a:	21 81       	ldd	r18, Z+1	; 0x01
    157c:	32 81       	ldd	r19, Z+2	; 0x02
    157e:	f8 01       	movw	r30, r16
    1580:	04 81       	ldd	r16, Z+4	; 0x04
    1582:	15 81       	ldd	r17, Z+5	; 0x05
    1584:	20 1b       	sub	r18, r16
    1586:	31 0b       	sbc	r19, r17
    1588:	e8 81       	ld	r30, Y
    158a:	2e 1b       	sub	r18, r30
    158c:	31 09       	sbc	r19, r1
    158e:	ec 01       	movw	r28, r24
    1590:	ea 81       	ldd	r30, Y+2	; 0x02
    1592:	fb 81       	ldd	r31, Y+3	; 0x03
    1594:	00 81       	ld	r16, Z
    1596:	11 81       	ldd	r17, Z+1	; 0x01
    1598:	fa 01       	movw	r30, r20
    159a:	40 e0       	ldi	r20, 0x00	; 0
    159c:	50 e0       	ldi	r21, 0x00	; 0
    159e:	40 17       	cp	r20, r16
    15a0:	51 07       	cpc	r21, r17
    15a2:	39 f1       	breq	.+78     	; 0x15f2 <check_for_aks_block+0xbc>
    15a4:	46 17       	cp	r20, r22
    15a6:	57 07       	cpc	r21, r23
    15a8:	f9 f0       	breq	.+62     	; 0x15e8 <check_for_aks_block+0xb2>
    15aa:	12 96       	adiw	r26, 0x02	; 2
    15ac:	8c 91       	ld	r24, X
    15ae:	12 97       	sbiw	r26, 0x02	; 2
    15b0:	f8 12       	cpse	r15, r24
    15b2:	1a c0       	rjmp	.+52     	; 0x15e8 <check_for_aks_block+0xb2>
    15b4:	80 81       	ld	r24, Z
    15b6:	85 58       	subi	r24, 0x85	; 133
    15b8:	82 30       	cpi	r24, 0x02	; 2
    15ba:	e8 f0       	brcs	.+58     	; 0x15f6 <check_for_aks_block+0xc0>
    15bc:	c4 80       	ldd	r12, Z+4	; 0x04
    15be:	d5 80       	ldd	r13, Z+5	; 0x05
    15c0:	82 81       	ldd	r24, Z+2	; 0x02
    15c2:	93 81       	ldd	r25, Z+3	; 0x03
    15c4:	ec 01       	movw	r28, r24
    15c6:	89 81       	ldd	r24, Y+1	; 0x01
    15c8:	9a 81       	ldd	r25, Y+2	; 0x02
    15ca:	c8 16       	cp	r12, r24
    15cc:	d9 06       	cpc	r13, r25
    15ce:	60 f4       	brcc	.+24     	; 0x15e8 <check_for_aks_block+0xb2>
    15d0:	8c 19       	sub	r24, r12
    15d2:	9d 09       	sbc	r25, r13
    15d4:	cc 91       	ld	r28, X
    15d6:	d0 e0       	ldi	r29, 0x00	; 0
    15d8:	c8 17       	cp	r28, r24
    15da:	d9 07       	cpc	r29, r25
    15dc:	28 f4       	brcc	.+10     	; 0x15e8 <check_for_aks_block+0xb2>
    15de:	8c 1b       	sub	r24, r28
    15e0:	9d 0b       	sbc	r25, r29
    15e2:	28 17       	cp	r18, r24
    15e4:	39 07       	cpc	r19, r25
    15e6:	38 f0       	brcs	.+14     	; 0x15f6 <check_for_aks_block+0xc0>
    15e8:	4f 5f       	subi	r20, 0xFF	; 255
    15ea:	5f 4f       	sbci	r21, 0xFF	; 255
    15ec:	13 96       	adiw	r26, 0x03	; 3
    15ee:	36 96       	adiw	r30, 0x06	; 6
    15f0:	d6 cf       	rjmp	.-84     	; 0x159e <check_for_aks_block+0x68>
    15f2:	80 e0       	ldi	r24, 0x00	; 0
    15f4:	01 c0       	rjmp	.+2      	; 0x15f8 <check_for_aks_block+0xc2>
    15f6:	81 e0       	ldi	r24, 0x01	; 1
    15f8:	df 91       	pop	r29
    15fa:	cf 91       	pop	r28
    15fc:	1f 91       	pop	r17
    15fe:	0f 91       	pop	r16
    1600:	ff 90       	pop	r15
    1602:	df 90       	pop	r13
    1604:	cf 90       	pop	r12
    1606:	08 95       	ret

00001608 <qtm_update_qtlib_timer>:
    1608:	20 91 7d 38 	lds	r18, 0x387D	; 0x80387d <qtm_local_ms_timecount>
    160c:	30 91 7e 38 	lds	r19, 0x387E	; 0x80387e <qtm_local_ms_timecount+0x1>
    1610:	82 0f       	add	r24, r18
    1612:	93 1f       	adc	r25, r19
    1614:	80 93 7d 38 	sts	0x387D, r24	; 0x80387d <qtm_local_ms_timecount>
    1618:	90 93 7e 38 	sts	0x387E, r25	; 0x80387e <qtm_local_ms_timecount+0x1>
    161c:	08 95       	ret

0000161e <qtm_init_sensor_key>:
    161e:	00 97       	sbiw	r24, 0x00	; 0
    1620:	d9 f0       	breq	.+54     	; 0x1658 <qtm_init_sensor_key+0x3a>
    1622:	41 15       	cp	r20, r1
    1624:	51 05       	cpc	r21, r1
    1626:	c1 f0       	breq	.+48     	; 0x1658 <qtm_init_sensor_key+0x3a>
    1628:	26 e0       	ldi	r18, 0x06	; 6
    162a:	62 9f       	mul	r22, r18
    162c:	b0 01       	movw	r22, r0
    162e:	11 24       	eor	r1, r1
    1630:	dc 01       	movw	r26, r24
    1632:	14 96       	adiw	r26, 0x04	; 4
    1634:	ed 91       	ld	r30, X+
    1636:	fc 91       	ld	r31, X
    1638:	15 97       	sbiw	r26, 0x05	; 5
    163a:	e6 0f       	add	r30, r22
    163c:	f7 1f       	adc	r31, r23
    163e:	21 e0       	ldi	r18, 0x01	; 1
    1640:	20 83       	st	Z, r18
    1642:	14 96       	adiw	r26, 0x04	; 4
    1644:	8d 91       	ld	r24, X+
    1646:	9c 91       	ld	r25, X
    1648:	15 97       	sbiw	r26, 0x05	; 5
    164a:	fc 01       	movw	r30, r24
    164c:	e6 0f       	add	r30, r22
    164e:	f7 1f       	adc	r31, r23
    1650:	42 83       	std	Z+2, r20	; 0x02
    1652:	53 83       	std	Z+3, r21	; 0x03
    1654:	80 e0       	ldi	r24, 0x00	; 0
    1656:	08 95       	ret
    1658:	8b e0       	ldi	r24, 0x0B	; 11
    165a:	08 95       	ret

0000165c <qtm_key_sensors_process>:
    165c:	2f 92       	push	r2
    165e:	3f 92       	push	r3
    1660:	4f 92       	push	r4
    1662:	5f 92       	push	r5
    1664:	6f 92       	push	r6
    1666:	7f 92       	push	r7
    1668:	8f 92       	push	r8
    166a:	9f 92       	push	r9
    166c:	af 92       	push	r10
    166e:	bf 92       	push	r11
    1670:	cf 92       	push	r12
    1672:	df 92       	push	r13
    1674:	ef 92       	push	r14
    1676:	ff 92       	push	r15
    1678:	0f 93       	push	r16
    167a:	1f 93       	push	r17
    167c:	cf 93       	push	r28
    167e:	df 93       	push	r29
    1680:	00 97       	sbiw	r24, 0x00	; 0
    1682:	09 f4       	brne	.+2      	; 0x1686 <qtm_key_sensors_process+0x2a>
    1684:	7d c3       	rjmp	.+1786   	; 0x1d80 <qtm_key_sensors_process+0x724>
    1686:	ec 01       	movw	r28, r24
    1688:	a1 2c       	mov	r10, r1
    168a:	b1 2c       	mov	r11, r1
    168c:	81 2c       	mov	r8, r1
    168e:	91 2c       	mov	r9, r1
    1690:	21 2c       	mov	r2, r1
    1692:	d1 2c       	mov	r13, r1
    1694:	33 e0       	ldi	r19, 0x03	; 3
    1696:	c3 2e       	mov	r12, r19
    1698:	45 e8       	ldi	r20, 0x85	; 133
    169a:	64 2e       	mov	r6, r20
    169c:	56 e8       	ldi	r21, 0x86	; 134
    169e:	75 2e       	mov	r7, r21
    16a0:	67 e0       	ldi	r22, 0x07	; 7
    16a2:	36 2e       	mov	r3, r22
    16a4:	72 e0       	ldi	r23, 0x02	; 2
    16a6:	47 2e       	mov	r4, r23
    16a8:	e8 e0       	ldi	r30, 0x08	; 8
    16aa:	5e 2e       	mov	r5, r30
    16ac:	ea 81       	ldd	r30, Y+2	; 0x02
    16ae:	fb 81       	ldd	r31, Y+3	; 0x03
    16b0:	80 81       	ld	r24, Z
    16b2:	91 81       	ldd	r25, Z+1	; 0x01
    16b4:	88 16       	cp	r8, r24
    16b6:	99 06       	cpc	r9, r25
    16b8:	08 f0       	brcs	.+2      	; 0x16bc <qtm_key_sensors_process+0x60>
    16ba:	a5 c1       	rjmp	.+842    	; 0x1a06 <qtm_key_sensors_process+0x3aa>
    16bc:	75 01       	movw	r14, r10
    16be:	ee 0c       	add	r14, r14
    16c0:	ff 1c       	adc	r15, r15
    16c2:	0c 81       	ldd	r16, Y+4	; 0x04
    16c4:	1d 81       	ldd	r17, Y+5	; 0x05
    16c6:	0e 0d       	add	r16, r14
    16c8:	1f 1d       	adc	r17, r15
    16ca:	d8 01       	movw	r26, r16
    16cc:	8c 91       	ld	r24, X
    16ce:	84 30       	cpi	r24, 0x04	; 4
    16d0:	09 f4       	brne	.+2      	; 0x16d4 <qtm_key_sensors_process+0x78>
    16d2:	a2 c0       	rjmp	.+324    	; 0x1818 <qtm_key_sensors_process+0x1bc>
    16d4:	38 f4       	brcc	.+14     	; 0x16e4 <qtm_key_sensors_process+0x88>
    16d6:	82 30       	cpi	r24, 0x02	; 2
    16d8:	01 f1       	breq	.+64     	; 0x171a <qtm_key_sensors_process+0xbe>
    16da:	08 f0       	brcs	.+2      	; 0x16de <qtm_key_sensors_process+0x82>
    16dc:	49 c0       	rjmp	.+146    	; 0x1770 <qtm_key_sensors_process+0x114>
    16de:	81 30       	cpi	r24, 0x01	; 1
    16e0:	59 f0       	breq	.+22     	; 0x16f8 <qtm_key_sensors_process+0x9c>
    16e2:	8a c1       	rjmp	.+788    	; 0x19f8 <qtm_key_sensors_process+0x39c>
    16e4:	85 38       	cpi	r24, 0x85	; 133
    16e6:	09 f4       	brne	.+2      	; 0x16ea <qtm_key_sensors_process+0x8e>
    16e8:	c2 c0       	rjmp	.+388    	; 0x186e <qtm_key_sensors_process+0x212>
    16ea:	86 38       	cpi	r24, 0x86	; 134
    16ec:	09 f4       	brne	.+2      	; 0x16f0 <qtm_key_sensors_process+0x94>
    16ee:	f6 c0       	rjmp	.+492    	; 0x18dc <qtm_key_sensors_process+0x280>
    16f0:	87 30       	cpi	r24, 0x07	; 7
    16f2:	09 f0       	breq	.+2      	; 0x16f6 <qtm_key_sensors_process+0x9a>
    16f4:	81 c1       	rjmp	.+770    	; 0x19f8 <qtm_key_sensors_process+0x39c>
    16f6:	37 c1       	rjmp	.+622    	; 0x1966 <qtm_key_sensors_process+0x30a>
    16f8:	d8 01       	movw	r26, r16
    16fa:	12 96       	adiw	r26, 0x02	; 2
    16fc:	ed 91       	ld	r30, X+
    16fe:	fc 91       	ld	r31, X
    1700:	13 97       	sbiw	r26, 0x03	; 3
    1702:	80 81       	ld	r24, Z
    1704:	8e 71       	andi	r24, 0x1E	; 30
    1706:	09 f0       	breq	.+2      	; 0x170a <qtm_key_sensors_process+0xae>
    1708:	69 c1       	rjmp	.+722    	; 0x19dc <qtm_key_sensors_process+0x380>
    170a:	4c 92       	st	X, r4
    170c:	8c 81       	ldd	r24, Y+4	; 0x04
    170e:	9d 81       	ldd	r25, Y+5	; 0x05
    1710:	fc 01       	movw	r30, r24
    1712:	ee 0d       	add	r30, r14
    1714:	ff 1d       	adc	r31, r15
    1716:	51 82       	std	Z+1, r5	; 0x01
    1718:	61 c1       	rjmp	.+706    	; 0x19dc <qtm_key_sensors_process+0x380>
    171a:	f8 01       	movw	r30, r16
    171c:	21 81       	ldd	r18, Z+1	; 0x01
    171e:	22 23       	and	r18, r18
    1720:	29 f1       	breq	.+74     	; 0x176c <qtm_key_sensors_process+0x110>
    1722:	02 80       	ldd	r0, Z+2	; 0x02
    1724:	f3 81       	ldd	r31, Z+3	; 0x03
    1726:	e0 2d       	mov	r30, r0
    1728:	25 30       	cpi	r18, 0x05	; 5
    172a:	20 f0       	brcs	.+8      	; 0x1734 <qtm_key_sensors_process+0xd8>
    172c:	81 81       	ldd	r24, Z+1	; 0x01
    172e:	92 81       	ldd	r25, Z+2	; 0x02
    1730:	d8 01       	movw	r26, r16
    1732:	0e c0       	rjmp	.+28     	; 0x1750 <qtm_key_sensors_process+0xf4>
    1734:	d8 01       	movw	r26, r16
    1736:	14 96       	adiw	r26, 0x04	; 4
    1738:	8d 91       	ld	r24, X+
    173a:	9c 91       	ld	r25, X
    173c:	15 97       	sbiw	r26, 0x05	; 5
    173e:	41 81       	ldd	r20, Z+1	; 0x01
    1740:	52 81       	ldd	r21, Z+2	; 0x02
    1742:	84 17       	cp	r24, r20
    1744:	95 07       	cpc	r25, r21
    1746:	69 f0       	breq	.+26     	; 0x1762 <qtm_key_sensors_process+0x106>
    1748:	48 17       	cp	r20, r24
    174a:	59 07       	cpc	r21, r25
    174c:	30 f4       	brcc	.+12     	; 0x175a <qtm_key_sensors_process+0xfe>
    174e:	01 97       	sbiw	r24, 0x01	; 1
    1750:	14 96       	adiw	r26, 0x04	; 4
    1752:	8d 93       	st	X+, r24
    1754:	9c 93       	st	X, r25
    1756:	15 97       	sbiw	r26, 0x05	; 5
    1758:	04 c0       	rjmp	.+8      	; 0x1762 <qtm_key_sensors_process+0x106>
    175a:	01 96       	adiw	r24, 0x01	; 1
    175c:	f8 01       	movw	r30, r16
    175e:	84 83       	std	Z+4, r24	; 0x04
    1760:	95 83       	std	Z+5, r25	; 0x05
    1762:	21 50       	subi	r18, 0x01	; 1
    1764:	d8 01       	movw	r26, r16
    1766:	11 96       	adiw	r26, 0x01	; 1
    1768:	2c 93       	st	X, r18
    176a:	38 c1       	rjmp	.+624    	; 0x19dc <qtm_key_sensors_process+0x380>
    176c:	f8 01       	movw	r30, r16
    176e:	31 c1       	rjmp	.+610    	; 0x19d2 <qtm_key_sensors_process+0x376>
    1770:	d8 01       	movw	r26, r16
    1772:	14 96       	adiw	r26, 0x04	; 4
    1774:	2d 91       	ld	r18, X+
    1776:	3c 91       	ld	r19, X
    1778:	15 97       	sbiw	r26, 0x05	; 5
    177a:	12 96       	adiw	r26, 0x02	; 2
    177c:	8d 91       	ld	r24, X+
    177e:	9c 91       	ld	r25, X
    1780:	13 97       	sbiw	r26, 0x03	; 3
    1782:	dc 01       	movw	r26, r24
    1784:	11 96       	adiw	r26, 0x01	; 1
    1786:	4d 91       	ld	r20, X+
    1788:	5c 91       	ld	r21, X
    178a:	12 97       	sbiw	r26, 0x02	; 2
    178c:	24 17       	cp	r18, r20
    178e:	35 07       	cpc	r19, r21
    1790:	09 f4       	brne	.+2      	; 0x1794 <qtm_key_sensors_process+0x138>
    1792:	32 c1       	rjmp	.+612    	; 0x19f8 <qtm_key_sensors_process+0x39c>
    1794:	8e 81       	ldd	r24, Y+6	; 0x06
    1796:	9f 81       	ldd	r25, Y+7	; 0x07
    1798:	42 17       	cp	r20, r18
    179a:	53 07       	cpc	r21, r19
    179c:	e0 f4       	brcc	.+56     	; 0x17d6 <qtm_key_sensors_process+0x17a>
    179e:	24 1b       	sub	r18, r20
    17a0:	35 0b       	sbc	r19, r21
    17a2:	dc 01       	movw	r26, r24
    17a4:	aa 0d       	add	r26, r10
    17a6:	bb 1d       	adc	r27, r11
    17a8:	8c 91       	ld	r24, X
    17aa:	90 e0       	ldi	r25, 0x00	; 0
    17ac:	05 80       	ldd	r0, Z+5	; 0x05
    17ae:	02 c0       	rjmp	.+4      	; 0x17b4 <qtm_key_sensors_process+0x158>
    17b0:	95 95       	asr	r25
    17b2:	87 95       	ror	r24
    17b4:	0a 94       	dec	r0
    17b6:	e2 f7       	brpl	.-8      	; 0x17b0 <qtm_key_sensors_process+0x154>
    17b8:	99 27       	eor	r25, r25
    17ba:	28 17       	cp	r18, r24
    17bc:	39 07       	cpc	r19, r25
    17be:	08 f4       	brcc	.+2      	; 0x17c2 <qtm_key_sensors_process+0x166>
    17c0:	1b c1       	rjmp	.+566    	; 0x19f8 <qtm_key_sensors_process+0x39c>
    17c2:	84 81       	ldd	r24, Z+4	; 0x04
    17c4:	88 23       	and	r24, r24
    17c6:	09 f4       	brne	.+2      	; 0x17ca <qtm_key_sensors_process+0x16e>
    17c8:	17 c1       	rjmp	.+558    	; 0x19f8 <qtm_key_sensors_process+0x39c>
    17ca:	f8 01       	movw	r30, r16
    17cc:	30 82       	st	Z, r3
    17ce:	ea 81       	ldd	r30, Y+2	; 0x02
    17d0:	fb 81       	ldd	r31, Y+3	; 0x03
    17d2:	24 81       	ldd	r18, Z+4	; 0x04
    17d4:	1a c0       	rjmp	.+52     	; 0x180a <qtm_key_sensors_process+0x1ae>
    17d6:	fc 01       	movw	r30, r24
    17d8:	ea 0d       	add	r30, r10
    17da:	fb 1d       	adc	r31, r11
    17dc:	42 1b       	sub	r20, r18
    17de:	53 0b       	sbc	r21, r19
    17e0:	80 81       	ld	r24, Z
    17e2:	90 e0       	ldi	r25, 0x00	; 0
    17e4:	48 17       	cp	r20, r24
    17e6:	59 07       	cpc	r21, r25
    17e8:	08 f4       	brcc	.+2      	; 0x17ec <qtm_key_sensors_process+0x190>
    17ea:	06 c1       	rjmp	.+524    	; 0x19f8 <qtm_key_sensors_process+0x39c>
    17ec:	82 81       	ldd	r24, Z+2	; 0x02
    17ee:	88 23       	and	r24, r24
    17f0:	31 f0       	breq	.+12     	; 0x17fe <qtm_key_sensors_process+0x1a2>
    17f2:	b4 01       	movw	r22, r8
    17f4:	ce 01       	movw	r24, r28
    17f6:	0e 94 9b 0a 	call	0x1536	; 0x1536 <check_for_aks_block>
    17fa:	81 11       	cpse	r24, r1
    17fc:	fd c0       	rjmp	.+506    	; 0x19f8 <qtm_key_sensors_process+0x39c>
    17fe:	e4 e0       	ldi	r30, 0x04	; 4
    1800:	d8 01       	movw	r26, r16
    1802:	ec 93       	st	X, r30
    1804:	ea 81       	ldd	r30, Y+2	; 0x02
    1806:	fb 81       	ldd	r31, Y+3	; 0x03
    1808:	22 81       	ldd	r18, Z+2	; 0x02
    180a:	8c 81       	ldd	r24, Y+4	; 0x04
    180c:	9d 81       	ldd	r25, Y+5	; 0x05
    180e:	fc 01       	movw	r30, r24
    1810:	ee 0d       	add	r30, r14
    1812:	ff 1d       	adc	r31, r15
    1814:	21 83       	std	Z+1, r18	; 0x01
    1816:	e2 c0       	rjmp	.+452    	; 0x19dc <qtm_key_sensors_process+0x380>
    1818:	d8 01       	movw	r26, r16
    181a:	14 96       	adiw	r26, 0x04	; 4
    181c:	2d 91       	ld	r18, X+
    181e:	3c 91       	ld	r19, X
    1820:	15 97       	sbiw	r26, 0x05	; 5
    1822:	12 96       	adiw	r26, 0x02	; 2
    1824:	ed 91       	ld	r30, X+
    1826:	fc 91       	ld	r31, X
    1828:	13 97       	sbiw	r26, 0x03	; 3
    182a:	81 81       	ldd	r24, Z+1	; 0x01
    182c:	92 81       	ldd	r25, Z+2	; 0x02
    182e:	82 17       	cp	r24, r18
    1830:	93 07       	cpc	r25, r19
    1832:	08 f4       	brcc	.+2      	; 0x1836 <qtm_key_sensors_process+0x1da>
    1834:	d7 c0       	rjmp	.+430    	; 0x19e4 <qtm_key_sensors_process+0x388>
    1836:	ee 81       	ldd	r30, Y+6	; 0x06
    1838:	ff 81       	ldd	r31, Y+7	; 0x07
    183a:	ea 0d       	add	r30, r10
    183c:	fb 1d       	adc	r31, r11
    183e:	82 1b       	sub	r24, r18
    1840:	93 0b       	sbc	r25, r19
    1842:	20 81       	ld	r18, Z
    1844:	30 e0       	ldi	r19, 0x00	; 0
    1846:	28 17       	cp	r18, r24
    1848:	39 07       	cpc	r19, r25
    184a:	08 f0       	brcs	.+2      	; 0x184e <qtm_key_sensors_process+0x1f2>
    184c:	af c0       	rjmp	.+350    	; 0x19ac <qtm_key_sensors_process+0x350>
    184e:	82 81       	ldd	r24, Z+2	; 0x02
    1850:	88 23       	and	r24, r24
    1852:	31 f0       	breq	.+12     	; 0x1860 <qtm_key_sensors_process+0x204>
    1854:	b4 01       	movw	r22, r8
    1856:	ce 01       	movw	r24, r28
    1858:	0e 94 9b 0a 	call	0x1536	; 0x1536 <check_for_aks_block>
    185c:	81 11       	cpse	r24, r1
    185e:	cc c0       	rjmp	.+408    	; 0x19f8 <qtm_key_sensors_process+0x39c>
    1860:	f8 01       	movw	r30, r16
    1862:	81 81       	ldd	r24, Z+1	; 0x01
    1864:	88 23       	and	r24, r24
    1866:	09 f4       	brne	.+2      	; 0x186a <qtm_key_sensors_process+0x20e>
    1868:	67 c0       	rjmp	.+206    	; 0x1938 <qtm_key_sensors_process+0x2dc>
    186a:	81 50       	subi	r24, 0x01	; 1
    186c:	b6 c0       	rjmp	.+364    	; 0x19da <qtm_key_sensors_process+0x37e>
    186e:	a8 81       	ld	r26, Y
    1870:	b9 81       	ldd	r27, Y+1	; 0x01
    1872:	80 85       	ldd	r24, Z+8	; 0x08
    1874:	13 96       	adiw	r26, 0x03	; 3
    1876:	8c 93       	st	X, r24
    1878:	ec 81       	ldd	r30, Y+4	; 0x04
    187a:	fd 81       	ldd	r31, Y+5	; 0x05
    187c:	ee 0d       	add	r30, r14
    187e:	ff 1d       	adc	r31, r15
    1880:	44 81       	ldd	r20, Z+4	; 0x04
    1882:	55 81       	ldd	r21, Z+5	; 0x05
    1884:	a2 81       	ldd	r26, Z+2	; 0x02
    1886:	b3 81       	ldd	r27, Z+3	; 0x03
    1888:	11 96       	adiw	r26, 0x01	; 1
    188a:	8d 91       	ld	r24, X+
    188c:	9c 91       	ld	r25, X
    188e:	12 97       	sbiw	r26, 0x02	; 2
    1890:	84 17       	cp	r24, r20
    1892:	95 07       	cpc	r25, r21
    1894:	c0 f0       	brcs	.+48     	; 0x18c6 <qtm_key_sensors_process+0x26a>
    1896:	ae 81       	ldd	r26, Y+6	; 0x06
    1898:	bf 81       	ldd	r27, Y+7	; 0x07
    189a:	aa 0d       	add	r26, r10
    189c:	bb 1d       	adc	r27, r11
    189e:	6c 91       	ld	r22, X
    18a0:	26 2f       	mov	r18, r22
    18a2:	30 e0       	ldi	r19, 0x00	; 0
    18a4:	11 96       	adiw	r26, 0x01	; 1
    18a6:	7c 91       	ld	r23, X
    18a8:	7f 5f       	subi	r23, 0xFF	; 255
    18aa:	02 c0       	rjmp	.+4      	; 0x18b0 <qtm_key_sensors_process+0x254>
    18ac:	35 95       	asr	r19
    18ae:	27 95       	ror	r18
    18b0:	7a 95       	dec	r23
    18b2:	e2 f7       	brpl	.-8      	; 0x18ac <qtm_key_sensors_process+0x250>
    18b4:	84 1b       	sub	r24, r20
    18b6:	95 0b       	sbc	r25, r21
    18b8:	62 1b       	sub	r22, r18
    18ba:	26 2f       	mov	r18, r22
    18bc:	30 e0       	ldi	r19, 0x00	; 0
    18be:	28 17       	cp	r18, r24
    18c0:	39 07       	cpc	r19, r25
    18c2:	08 f4       	brcc	.+2      	; 0x18c6 <qtm_key_sensors_process+0x26a>
    18c4:	97 c0       	rjmp	.+302    	; 0x19f4 <qtm_key_sensors_process+0x398>
    18c6:	70 82       	st	Z, r7
    18c8:	ea 81       	ldd	r30, Y+2	; 0x02
    18ca:	fb 81       	ldd	r31, Y+3	; 0x03
    18cc:	22 81       	ldd	r18, Z+2	; 0x02
    18ce:	8c 81       	ldd	r24, Y+4	; 0x04
    18d0:	9d 81       	ldd	r25, Y+5	; 0x05
    18d2:	fc 01       	movw	r30, r24
    18d4:	ee 0d       	add	r30, r14
    18d6:	ff 1d       	adc	r31, r15
    18d8:	21 83       	std	Z+1, r18	; 0x01
    18da:	42 c0       	rjmp	.+132    	; 0x1960 <qtm_key_sensors_process+0x304>
    18dc:	d8 01       	movw	r26, r16
    18de:	14 96       	adiw	r26, 0x04	; 4
    18e0:	6d 91       	ld	r22, X+
    18e2:	7c 91       	ld	r23, X
    18e4:	15 97       	sbiw	r26, 0x05	; 5
    18e6:	12 96       	adiw	r26, 0x02	; 2
    18e8:	ed 91       	ld	r30, X+
    18ea:	fc 91       	ld	r31, X
    18ec:	13 97       	sbiw	r26, 0x03	; 3
    18ee:	21 81       	ldd	r18, Z+1	; 0x01
    18f0:	32 81       	ldd	r19, Z+2	; 0x02
    18f2:	26 17       	cp	r18, r22
    18f4:	37 07       	cpc	r19, r23
    18f6:	58 f4       	brcc	.+22     	; 0x190e <qtm_key_sensors_process+0x2b2>
    18f8:	11 96       	adiw	r26, 0x01	; 1
    18fa:	8c 91       	ld	r24, X
    18fc:	11 97       	sbiw	r26, 0x01	; 1
    18fe:	81 11       	cpse	r24, r1
    1900:	02 c0       	rjmp	.+4      	; 0x1906 <qtm_key_sensors_process+0x2aa>
    1902:	cc 92       	st	X, r12
    1904:	77 c0       	rjmp	.+238    	; 0x19f4 <qtm_key_sensors_process+0x398>
    1906:	81 50       	subi	r24, 0x01	; 1
    1908:	f8 01       	movw	r30, r16
    190a:	81 83       	std	Z+1, r24	; 0x01
    190c:	73 c0       	rjmp	.+230    	; 0x19f4 <qtm_key_sensors_process+0x398>
    190e:	ee 81       	ldd	r30, Y+6	; 0x06
    1910:	ff 81       	ldd	r31, Y+7	; 0x07
    1912:	ea 0d       	add	r30, r10
    1914:	fb 1d       	adc	r31, r11
    1916:	80 81       	ld	r24, Z
    1918:	48 2f       	mov	r20, r24
    191a:	50 e0       	ldi	r21, 0x00	; 0
    191c:	91 81       	ldd	r25, Z+1	; 0x01
    191e:	9f 5f       	subi	r25, 0xFF	; 255
    1920:	02 c0       	rjmp	.+4      	; 0x1926 <qtm_key_sensors_process+0x2ca>
    1922:	55 95       	asr	r21
    1924:	47 95       	ror	r20
    1926:	9a 95       	dec	r25
    1928:	e2 f7       	brpl	.-8      	; 0x1922 <qtm_key_sensors_process+0x2c6>
    192a:	26 1b       	sub	r18, r22
    192c:	37 0b       	sbc	r19, r23
    192e:	84 1b       	sub	r24, r20
    1930:	90 e0       	ldi	r25, 0x00	; 0
    1932:	82 17       	cp	r24, r18
    1934:	93 07       	cpc	r25, r19
    1936:	60 f4       	brcc	.+24     	; 0x1950 <qtm_key_sensors_process+0x2f4>
    1938:	d8 01       	movw	r26, r16
    193a:	6c 92       	st	X, r6
    193c:	ea 81       	ldd	r30, Y+2	; 0x02
    193e:	fb 81       	ldd	r31, Y+3	; 0x03
    1940:	23 81       	ldd	r18, Z+3	; 0x03
    1942:	8c 81       	ldd	r24, Y+4	; 0x04
    1944:	9d 81       	ldd	r25, Y+5	; 0x05
    1946:	fc 01       	movw	r30, r24
    1948:	ee 0d       	add	r30, r14
    194a:	ff 1d       	adc	r31, r15
    194c:	21 83       	std	Z+1, r18	; 0x01
    194e:	52 c0       	rjmp	.+164    	; 0x19f4 <qtm_key_sensors_process+0x398>
    1950:	f8 01       	movw	r30, r16
    1952:	81 81       	ldd	r24, Z+1	; 0x01
    1954:	81 11       	cpse	r24, r1
    1956:	02 c0       	rjmp	.+4      	; 0x195c <qtm_key_sensors_process+0x300>
    1958:	c0 82       	st	Z, r12
    195a:	4c c0       	rjmp	.+152    	; 0x19f4 <qtm_key_sensors_process+0x398>
    195c:	81 50       	subi	r24, 0x01	; 1
    195e:	81 83       	std	Z+1, r24	; 0x01
    1960:	22 24       	eor	r2, r2
    1962:	23 94       	inc	r2
    1964:	3b c0       	rjmp	.+118    	; 0x19dc <qtm_key_sensors_process+0x380>
    1966:	d8 01       	movw	r26, r16
    1968:	14 96       	adiw	r26, 0x04	; 4
    196a:	2d 91       	ld	r18, X+
    196c:	3c 91       	ld	r19, X
    196e:	15 97       	sbiw	r26, 0x05	; 5
    1970:	12 96       	adiw	r26, 0x02	; 2
    1972:	8d 91       	ld	r24, X+
    1974:	9c 91       	ld	r25, X
    1976:	13 97       	sbiw	r26, 0x03	; 3
    1978:	dc 01       	movw	r26, r24
    197a:	11 96       	adiw	r26, 0x01	; 1
    197c:	8d 91       	ld	r24, X+
    197e:	9c 91       	ld	r25, X
    1980:	12 97       	sbiw	r26, 0x02	; 2
    1982:	82 17       	cp	r24, r18
    1984:	93 07       	cpc	r25, r19
    1986:	68 f5       	brcc	.+90     	; 0x19e2 <qtm_key_sensors_process+0x386>
    1988:	28 1b       	sub	r18, r24
    198a:	39 0b       	sbc	r19, r25
    198c:	ae 81       	ldd	r26, Y+6	; 0x06
    198e:	bf 81       	ldd	r27, Y+7	; 0x07
    1990:	aa 0d       	add	r26, r10
    1992:	bb 1d       	adc	r27, r11
    1994:	8c 91       	ld	r24, X
    1996:	90 e0       	ldi	r25, 0x00	; 0
    1998:	05 80       	ldd	r0, Z+5	; 0x05
    199a:	02 c0       	rjmp	.+4      	; 0x19a0 <qtm_key_sensors_process+0x344>
    199c:	95 95       	asr	r25
    199e:	87 95       	ror	r24
    19a0:	0a 94       	dec	r0
    19a2:	e2 f7       	brpl	.-8      	; 0x199c <qtm_key_sensors_process+0x340>
    19a4:	99 27       	eor	r25, r25
    19a6:	28 17       	cp	r18, r24
    19a8:	39 07       	cpc	r19, r25
    19aa:	18 f4       	brcc	.+6      	; 0x19b2 <qtm_key_sensors_process+0x356>
    19ac:	f8 01       	movw	r30, r16
    19ae:	c0 82       	st	Z, r12
    19b0:	1a c0       	rjmp	.+52     	; 0x19e6 <qtm_key_sensors_process+0x38a>
    19b2:	d8 01       	movw	r26, r16
    19b4:	11 96       	adiw	r26, 0x01	; 1
    19b6:	8c 91       	ld	r24, X
    19b8:	11 97       	sbiw	r26, 0x01	; 1
    19ba:	81 11       	cpse	r24, r1
    19bc:	0c c0       	rjmp	.+24     	; 0x19d6 <qtm_key_sensors_process+0x37a>
    19be:	81 e0       	ldi	r24, 0x01	; 1
    19c0:	8c 93       	st	X, r24
    19c2:	8c 81       	ldd	r24, Y+4	; 0x04
    19c4:	9d 81       	ldd	r25, Y+5	; 0x05
    19c6:	fc 01       	movw	r30, r24
    19c8:	ee 0d       	add	r30, r14
    19ca:	ff 1d       	adc	r31, r15
    19cc:	02 80       	ldd	r0, Z+2	; 0x02
    19ce:	f3 81       	ldd	r31, Z+3	; 0x03
    19d0:	e0 2d       	mov	r30, r0
    19d2:	c0 82       	st	Z, r12
    19d4:	11 c0       	rjmp	.+34     	; 0x19f8 <qtm_key_sensors_process+0x39c>
    19d6:	81 50       	subi	r24, 0x01	; 1
    19d8:	f8 01       	movw	r30, r16
    19da:	81 83       	std	Z+1, r24	; 0x01
    19dc:	dd 24       	eor	r13, r13
    19de:	d3 94       	inc	r13
    19e0:	0b c0       	rjmp	.+22     	; 0x19f8 <qtm_key_sensors_process+0x39c>
    19e2:	d8 01       	movw	r26, r16
    19e4:	cc 92       	st	X, r12
    19e6:	8c 81       	ldd	r24, Y+4	; 0x04
    19e8:	9d 81       	ldd	r25, Y+5	; 0x05
    19ea:	fc 01       	movw	r30, r24
    19ec:	ee 0d       	add	r30, r14
    19ee:	ff 1d       	adc	r31, r15
    19f0:	11 82       	std	Z+1, r1	; 0x01
    19f2:	02 c0       	rjmp	.+4      	; 0x19f8 <qtm_key_sensors_process+0x39c>
    19f4:	22 24       	eor	r2, r2
    19f6:	23 94       	inc	r2
    19f8:	bf ef       	ldi	r27, 0xFF	; 255
    19fa:	8b 1a       	sub	r8, r27
    19fc:	9b 0a       	sbc	r9, r27
    19fe:	e3 e0       	ldi	r30, 0x03	; 3
    1a00:	ae 0e       	add	r10, r30
    1a02:	b1 1c       	adc	r11, r1
    1a04:	53 ce       	rjmp	.-858    	; 0x16ac <qtm_key_sensors_process+0x50>
    1a06:	e8 81       	ld	r30, Y
    1a08:	f9 81       	ldd	r31, Y+1	; 0x01
    1a0a:	80 81       	ld	r24, Z
    1a0c:	87 ff       	sbrs	r24, 7
    1a0e:	23 c0       	rjmp	.+70     	; 0x1a56 <qtm_key_sensors_process+0x3fa>
    1a10:	40 e0       	ldi	r20, 0x00	; 0
    1a12:	50 e0       	ldi	r21, 0x00	; 0
    1a14:	20 e0       	ldi	r18, 0x00	; 0
    1a16:	30 e0       	ldi	r19, 0x00	; 0
    1a18:	ea 81       	ldd	r30, Y+2	; 0x02
    1a1a:	fb 81       	ldd	r31, Y+3	; 0x03
    1a1c:	80 81       	ld	r24, Z
    1a1e:	91 81       	ldd	r25, Z+1	; 0x01
    1a20:	28 17       	cp	r18, r24
    1a22:	39 07       	cpc	r19, r25
    1a24:	98 f4       	brcc	.+38     	; 0x1a4c <qtm_key_sensors_process+0x3f0>
    1a26:	ec 81       	ldd	r30, Y+4	; 0x04
    1a28:	fd 81       	ldd	r31, Y+5	; 0x05
    1a2a:	e4 0f       	add	r30, r20
    1a2c:	f5 1f       	adc	r31, r21
    1a2e:	a2 81       	ldd	r26, Z+2	; 0x02
    1a30:	b3 81       	ldd	r27, Z+3	; 0x03
    1a32:	8c 91       	ld	r24, X
    1a34:	80 fd       	sbrc	r24, 0
    1a36:	05 c0       	rjmp	.+10     	; 0x1a42 <qtm_key_sensors_process+0x3e6>
    1a38:	90 81       	ld	r25, Z
    1a3a:	97 7f       	andi	r25, 0xF7	; 247
    1a3c:	11 f0       	breq	.+4      	; 0x1a42 <qtm_key_sensors_process+0x3e6>
    1a3e:	81 60       	ori	r24, 0x01	; 1
    1a40:	8c 93       	st	X, r24
    1a42:	2f 5f       	subi	r18, 0xFF	; 255
    1a44:	3f 4f       	sbci	r19, 0xFF	; 255
    1a46:	4a 5f       	subi	r20, 0xFA	; 250
    1a48:	5f 4f       	sbci	r21, 0xFF	; 255
    1a4a:	e6 cf       	rjmp	.-52     	; 0x1a18 <qtm_key_sensors_process+0x3bc>
    1a4c:	e8 81       	ld	r30, Y
    1a4e:	f9 81       	ldd	r31, Y+1	; 0x01
    1a50:	80 81       	ld	r24, Z
    1a52:	8f 77       	andi	r24, 0x7F	; 127
    1a54:	80 83       	st	Z, r24
    1a56:	d1 10       	cpse	r13, r1
    1a58:	07 c0       	rjmp	.+14     	; 0x1a68 <qtm_key_sensors_process+0x40c>
    1a5a:	e8 81       	ld	r30, Y
    1a5c:	f9 81       	ldd	r31, Y+1	; 0x01
    1a5e:	21 10       	cpse	r2, r1
    1a60:	6f c0       	rjmp	.+222    	; 0x1b40 <qtm_key_sensors_process+0x4e4>
    1a62:	80 81       	ld	r24, Z
    1a64:	8e 7f       	andi	r24, 0xFE	; 254
    1a66:	6e c0       	rjmp	.+220    	; 0x1b44 <qtm_key_sensors_process+0x4e8>
    1a68:	ea 81       	ldd	r30, Y+2	; 0x02
    1a6a:	fb 81       	ldd	r31, Y+3	; 0x03
    1a6c:	81 85       	ldd	r24, Z+9	; 0x09
    1a6e:	88 23       	and	r24, r24
    1a70:	a1 f3       	breq	.-24     	; 0x1a5a <qtm_key_sensors_process+0x3fe>
    1a72:	e8 81       	ld	r30, Y
    1a74:	f9 81       	ldd	r31, Y+1	; 0x01
    1a76:	80 81       	ld	r24, Z
    1a78:	80 68       	ori	r24, 0x80	; 128
    1a7a:	80 83       	st	Z, r24
    1a7c:	ea 81       	ldd	r30, Y+2	; 0x02
    1a7e:	fb 81       	ldd	r31, Y+3	; 0x03
    1a80:	81 85       	ldd	r24, Z+9	; 0x09
    1a82:	81 30       	cpi	r24, 0x01	; 1
    1a84:	51 f7       	brne	.-44     	; 0x1a5a <qtm_key_sensors_process+0x3fe>
    1a86:	40 e0       	ldi	r20, 0x00	; 0
    1a88:	50 e0       	ldi	r21, 0x00	; 0
    1a8a:	20 e0       	ldi	r18, 0x00	; 0
    1a8c:	30 e0       	ldi	r19, 0x00	; 0
    1a8e:	96 e0       	ldi	r25, 0x06	; 6
    1a90:	d9 2e       	mov	r13, r25
    1a92:	ea 81       	ldd	r30, Y+2	; 0x02
    1a94:	fb 81       	ldd	r31, Y+3	; 0x03
    1a96:	60 81       	ld	r22, Z
    1a98:	71 81       	ldd	r23, Z+1	; 0x01
    1a9a:	26 17       	cp	r18, r22
    1a9c:	37 07       	cpc	r19, r23
    1a9e:	e8 f6       	brcc	.-70     	; 0x1a5a <qtm_key_sensors_process+0x3fe>
    1aa0:	0c 81       	ldd	r16, Y+4	; 0x04
    1aa2:	1d 81       	ldd	r17, Y+5	; 0x05
    1aa4:	fa 01       	movw	r30, r20
    1aa6:	ee 0f       	add	r30, r30
    1aa8:	ff 1f       	adc	r31, r31
    1aaa:	e0 0f       	add	r30, r16
    1aac:	f1 1f       	adc	r31, r17
    1aae:	80 81       	ld	r24, Z
    1ab0:	98 2f       	mov	r25, r24
    1ab2:	97 7f       	andi	r25, 0xF7	; 247
    1ab4:	a1 f1       	breq	.+104    	; 0x1b1e <qtm_key_sensors_process+0x4c2>
    1ab6:	85 38       	cpi	r24, 0x85	; 133
    1ab8:	11 f0       	breq	.+4      	; 0x1abe <qtm_key_sensors_process+0x462>
    1aba:	83 30       	cpi	r24, 0x03	; 3
    1abc:	b1 f5       	brne	.+108    	; 0x1b2a <qtm_key_sensors_process+0x4ce>
    1abe:	ee 80       	ldd	r14, Y+6	; 0x06
    1ac0:	ff 80       	ldd	r15, Y+7	; 0x07
    1ac2:	d7 01       	movw	r26, r14
    1ac4:	a4 0f       	add	r26, r20
    1ac6:	b5 1f       	adc	r27, r21
    1ac8:	12 96       	adiw	r26, 0x02	; 2
    1aca:	bc 90       	ld	r11, X
    1acc:	bb 20       	and	r11, r11
    1ace:	39 f1       	breq	.+78     	; 0x1b1e <qtm_key_sensors_process+0x4c2>
    1ad0:	80 e0       	ldi	r24, 0x00	; 0
    1ad2:	90 e0       	ldi	r25, 0x00	; 0
    1ad4:	c1 2c       	mov	r12, r1
    1ad6:	86 17       	cp	r24, r22
    1ad8:	97 07       	cpc	r25, r23
    1ada:	f8 f4       	brcc	.+62     	; 0x1b1a <qtm_key_sensors_process+0x4be>
    1adc:	28 17       	cp	r18, r24
    1ade:	39 07       	cpc	r19, r25
    1ae0:	d1 f0       	breq	.+52     	; 0x1b16 <qtm_key_sensors_process+0x4ba>
    1ae2:	d8 9e       	mul	r13, r24
    1ae4:	d0 01       	movw	r26, r0
    1ae6:	d9 9e       	mul	r13, r25
    1ae8:	b0 0d       	add	r27, r0
    1aea:	11 24       	eor	r1, r1
    1aec:	a0 0f       	add	r26, r16
    1aee:	b1 1f       	adc	r27, r17
    1af0:	ac 91       	ld	r26, X
    1af2:	a4 30       	cpi	r26, 0x04	; 4
    1af4:	11 f0       	breq	.+4      	; 0x1afa <qtm_key_sensors_process+0x49e>
    1af6:	a6 38       	cpi	r26, 0x86	; 134
    1af8:	71 f4       	brne	.+28     	; 0x1b16 <qtm_key_sensors_process+0x4ba>
    1afa:	dc 01       	movw	r26, r24
    1afc:	aa 0f       	add	r26, r26
    1afe:	bb 1f       	adc	r27, r27
    1b00:	a8 0f       	add	r26, r24
    1b02:	b9 1f       	adc	r27, r25
    1b04:	ae 0d       	add	r26, r14
    1b06:	bf 1d       	adc	r27, r15
    1b08:	12 96       	adiw	r26, 0x02	; 2
    1b0a:	ac 91       	ld	r26, X
    1b0c:	ba 12       	cpse	r11, r26
    1b0e:	03 c0       	rjmp	.+6      	; 0x1b16 <qtm_key_sensors_process+0x4ba>
    1b10:	cb 01       	movw	r24, r22
    1b12:	cc 24       	eor	r12, r12
    1b14:	c3 94       	inc	r12
    1b16:	01 96       	adiw	r24, 0x01	; 1
    1b18:	de cf       	rjmp	.-68     	; 0x1ad6 <qtm_key_sensors_process+0x47a>
    1b1a:	c1 10       	cpse	r12, r1
    1b1c:	06 c0       	rjmp	.+12     	; 0x1b2a <qtm_key_sensors_process+0x4ce>
    1b1e:	02 80       	ldd	r0, Z+2	; 0x02
    1b20:	f3 81       	ldd	r31, Z+3	; 0x03
    1b22:	e0 2d       	mov	r30, r0
    1b24:	80 81       	ld	r24, Z
    1b26:	8e 7f       	andi	r24, 0xFE	; 254
    1b28:	05 c0       	rjmp	.+10     	; 0x1b34 <qtm_key_sensors_process+0x4d8>
    1b2a:	02 80       	ldd	r0, Z+2	; 0x02
    1b2c:	f3 81       	ldd	r31, Z+3	; 0x03
    1b2e:	e0 2d       	mov	r30, r0
    1b30:	80 81       	ld	r24, Z
    1b32:	81 60       	ori	r24, 0x01	; 1
    1b34:	80 83       	st	Z, r24
    1b36:	2f 5f       	subi	r18, 0xFF	; 255
    1b38:	3f 4f       	sbci	r19, 0xFF	; 255
    1b3a:	4d 5f       	subi	r20, 0xFD	; 253
    1b3c:	5f 4f       	sbci	r21, 0xFF	; 255
    1b3e:	a9 cf       	rjmp	.-174    	; 0x1a92 <qtm_key_sensors_process+0x436>
    1b40:	80 81       	ld	r24, Z
    1b42:	81 60       	ori	r24, 0x01	; 1
    1b44:	80 83       	st	Z, r24
    1b46:	80 91 7d 38 	lds	r24, 0x387D	; 0x80387d <qtm_local_ms_timecount>
    1b4a:	90 91 7e 38 	lds	r25, 0x387E	; 0x80387e <qtm_local_ms_timecount+0x1>
    1b4e:	e8 81       	ld	r30, Y
    1b50:	f9 81       	ldd	r31, Y+1	; 0x01
    1b52:	21 81       	ldd	r18, Z+1	; 0x01
    1b54:	32 81       	ldd	r19, Z+2	; 0x02
    1b56:	a9 01       	movw	r20, r18
    1b58:	48 53       	subi	r20, 0x38	; 56
    1b5a:	5f 4f       	sbci	r21, 0xFF	; 255
    1b5c:	48 17       	cp	r20, r24
    1b5e:	59 07       	cpc	r21, r25
    1b60:	38 f4       	brcc	.+14     	; 0x1b70 <qtm_key_sensors_process+0x514>
    1b62:	82 1b       	sub	r24, r18
    1b64:	93 0b       	sbc	r25, r19
    1b66:	aa 24       	eor	r10, r10
    1b68:	a3 94       	inc	r10
    1b6a:	a3 e0       	ldi	r26, 0x03	; 3
    1b6c:	ba 2e       	mov	r11, r26
    1b6e:	44 c0       	rjmp	.+136    	; 0x1bf8 <qtm_key_sensors_process+0x59c>
    1b70:	82 17       	cp	r24, r18
    1b72:	93 07       	cpc	r25, r19
    1b74:	10 f0       	brcs	.+4      	; 0x1b7a <qtm_key_sensors_process+0x51e>
    1b76:	80 e0       	ldi	r24, 0x00	; 0
    1b78:	04 c1       	rjmp	.+520    	; 0x1d82 <qtm_key_sensors_process+0x726>
    1b7a:	82 1b       	sub	r24, r18
    1b7c:	93 0b       	sbc	r25, r19
    1b7e:	01 97       	sbiw	r24, 0x01	; 1
    1b80:	89 3c       	cpi	r24, 0xC9	; 201
    1b82:	91 05       	cpc	r25, r1
    1b84:	c0 f3       	brcs	.-16     	; 0x1b76 <qtm_key_sensors_process+0x51a>
    1b86:	ef cf       	rjmp	.-34     	; 0x1b66 <qtm_key_sensors_process+0x50a>
    1b88:	88 5c       	subi	r24, 0xC8	; 200
    1b8a:	91 09       	sbc	r25, r1
    1b8c:	e8 81       	ld	r30, Y
    1b8e:	f9 81       	ldd	r31, Y+1	; 0x01
    1b90:	21 81       	ldd	r18, Z+1	; 0x01
    1b92:	32 81       	ldd	r19, Z+2	; 0x02
    1b94:	28 53       	subi	r18, 0x38	; 56
    1b96:	3f 4f       	sbci	r19, 0xFF	; 255
    1b98:	21 83       	std	Z+1, r18	; 0x01
    1b9a:	32 83       	std	Z+2, r19	; 0x02
    1b9c:	23 81       	ldd	r18, Z+3	; 0x03
    1b9e:	21 11       	cpse	r18, r1
    1ba0:	96 c0       	rjmp	.+300    	; 0x1cce <qtm_key_sensors_process+0x672>
    1ba2:	24 81       	ldd	r18, Z+4	; 0x04
    1ba4:	22 23       	and	r18, r18
    1ba6:	11 f0       	breq	.+4      	; 0x1bac <qtm_key_sensors_process+0x550>
    1ba8:	21 50       	subi	r18, 0x01	; 1
    1baa:	24 83       	std	Z+4, r18	; 0x04
    1bac:	e8 81       	ld	r30, Y
    1bae:	f9 81       	ldd	r31, Y+1	; 0x01
    1bb0:	25 81       	ldd	r18, Z+5	; 0x05
    1bb2:	22 23       	and	r18, r18
    1bb4:	11 f0       	breq	.+4      	; 0x1bba <qtm_key_sensors_process+0x55e>
    1bb6:	21 50       	subi	r18, 0x01	; 1
    1bb8:	25 83       	std	Z+5, r18	; 0x05
    1bba:	8a 80       	ldd	r8, Y+2	; 0x02
    1bbc:	9b 80       	ldd	r9, Y+3	; 0x03
    1bbe:	d4 01       	movw	r26, r8
    1bc0:	16 96       	adiw	r26, 0x06	; 6
    1bc2:	2c 91       	ld	r18, X
    1bc4:	16 97       	sbiw	r26, 0x06	; 6
    1bc6:	21 11       	cpse	r18, r1
    1bc8:	1b c0       	rjmp	.+54     	; 0x1c00 <qtm_key_sensors_process+0x5a4>
    1bca:	8a 80       	ldd	r8, Y+2	; 0x02
    1bcc:	9b 80       	ldd	r9, Y+3	; 0x03
    1bce:	f4 01       	movw	r30, r8
    1bd0:	27 81       	ldd	r18, Z+7	; 0x07
    1bd2:	21 11       	cpse	r18, r1
    1bd4:	48 c0       	rjmp	.+144    	; 0x1c66 <qtm_key_sensors_process+0x60a>
    1bd6:	ea 81       	ldd	r30, Y+2	; 0x02
    1bd8:	fb 81       	ldd	r31, Y+3	; 0x03
    1bda:	23 81       	ldd	r18, Z+3	; 0x03
    1bdc:	22 23       	and	r18, r18
    1bde:	61 f0       	breq	.+24     	; 0x1bf8 <qtm_key_sensors_process+0x59c>
    1be0:	20 e0       	ldi	r18, 0x00	; 0
    1be2:	30 e0       	ldi	r19, 0x00	; 0
    1be4:	a0 e0       	ldi	r26, 0x00	; 0
    1be6:	b0 e0       	ldi	r27, 0x00	; 0
    1be8:	ea 81       	ldd	r30, Y+2	; 0x02
    1bea:	fb 81       	ldd	r31, Y+3	; 0x03
    1bec:	40 81       	ld	r20, Z
    1bee:	51 81       	ldd	r21, Z+1	; 0x01
    1bf0:	a4 17       	cp	r26, r20
    1bf2:	b5 07       	cpc	r27, r21
    1bf4:	08 f4       	brcc	.+2      	; 0x1bf8 <qtm_key_sensors_process+0x59c>
    1bf6:	6e c0       	rjmp	.+220    	; 0x1cd4 <qtm_key_sensors_process+0x678>
    1bf8:	89 3c       	cpi	r24, 0xC9	; 201
    1bfa:	91 05       	cpc	r25, r1
    1bfc:	28 f6       	brcc	.-118    	; 0x1b88 <qtm_key_sensors_process+0x52c>
    1bfe:	bb cf       	rjmp	.-138    	; 0x1b76 <qtm_key_sensors_process+0x51a>
    1c00:	08 81       	ld	r16, Y
    1c02:	19 81       	ldd	r17, Y+1	; 0x01
    1c04:	f8 01       	movw	r30, r16
    1c06:	24 81       	ldd	r18, Z+4	; 0x04
    1c08:	21 11       	cpse	r18, r1
    1c0a:	df cf       	rjmp	.-66     	; 0x1bca <qtm_key_sensors_process+0x56e>
    1c0c:	ed 90       	ld	r14, X+
    1c0e:	fc 90       	ld	r15, X
    1c10:	60 e0       	ldi	r22, 0x00	; 0
    1c12:	70 e0       	ldi	r23, 0x00	; 0
    1c14:	40 e0       	ldi	r20, 0x00	; 0
    1c16:	50 e0       	ldi	r21, 0x00	; 0
    1c18:	4e 15       	cp	r20, r14
    1c1a:	5f 05       	cpc	r21, r15
    1c1c:	f1 f0       	breq	.+60     	; 0x1c5a <qtm_key_sensors_process+0x5fe>
    1c1e:	ec 81       	ldd	r30, Y+4	; 0x04
    1c20:	fd 81       	ldd	r31, Y+5	; 0x05
    1c22:	e6 0f       	add	r30, r22
    1c24:	f7 1f       	adc	r31, r23
    1c26:	20 81       	ld	r18, Z
    1c28:	23 30       	cpi	r18, 0x03	; 3
    1c2a:	11 f0       	breq	.+4      	; 0x1c30 <qtm_key_sensors_process+0x5d4>
    1c2c:	28 30       	cpi	r18, 0x08	; 8
    1c2e:	81 f4       	brne	.+32     	; 0x1c50 <qtm_key_sensors_process+0x5f4>
    1c30:	24 81       	ldd	r18, Z+4	; 0x04
    1c32:	35 81       	ldd	r19, Z+5	; 0x05
    1c34:	c2 80       	ldd	r12, Z+2	; 0x02
    1c36:	d3 80       	ldd	r13, Z+3	; 0x03
    1c38:	d6 01       	movw	r26, r12
    1c3a:	11 96       	adiw	r26, 0x01	; 1
    1c3c:	cd 90       	ld	r12, X+
    1c3e:	dc 90       	ld	r13, X
    1c40:	12 97       	sbiw	r26, 0x02	; 2
    1c42:	2c 15       	cp	r18, r12
    1c44:	3d 05       	cpc	r19, r13
    1c46:	20 f4       	brcc	.+8      	; 0x1c50 <qtm_key_sensors_process+0x5f4>
    1c48:	2f 5f       	subi	r18, 0xFF	; 255
    1c4a:	3f 4f       	sbci	r19, 0xFF	; 255
    1c4c:	24 83       	std	Z+4, r18	; 0x04
    1c4e:	35 83       	std	Z+5, r19	; 0x05
    1c50:	4f 5f       	subi	r20, 0xFF	; 255
    1c52:	5f 4f       	sbci	r21, 0xFF	; 255
    1c54:	6a 5f       	subi	r22, 0xFA	; 250
    1c56:	7f 4f       	sbci	r23, 0xFF	; 255
    1c58:	df cf       	rjmp	.-66     	; 0x1c18 <qtm_key_sensors_process+0x5bc>
    1c5a:	f4 01       	movw	r30, r8
    1c5c:	26 81       	ldd	r18, Z+6	; 0x06
    1c5e:	d8 01       	movw	r26, r16
    1c60:	14 96       	adiw	r26, 0x04	; 4
    1c62:	2c 93       	st	X, r18
    1c64:	b2 cf       	rjmp	.-156    	; 0x1bca <qtm_key_sensors_process+0x56e>
    1c66:	08 81       	ld	r16, Y
    1c68:	19 81       	ldd	r17, Y+1	; 0x01
    1c6a:	d8 01       	movw	r26, r16
    1c6c:	15 96       	adiw	r26, 0x05	; 5
    1c6e:	2c 91       	ld	r18, X
    1c70:	21 11       	cpse	r18, r1
    1c72:	b1 cf       	rjmp	.-158    	; 0x1bd6 <qtm_key_sensors_process+0x57a>
    1c74:	e0 80       	ld	r14, Z
    1c76:	f1 80       	ldd	r15, Z+1	; 0x01
    1c78:	60 e0       	ldi	r22, 0x00	; 0
    1c7a:	70 e0       	ldi	r23, 0x00	; 0
    1c7c:	40 e0       	ldi	r20, 0x00	; 0
    1c7e:	50 e0       	ldi	r21, 0x00	; 0
    1c80:	4e 15       	cp	r20, r14
    1c82:	5f 05       	cpc	r21, r15
    1c84:	f1 f0       	breq	.+60     	; 0x1cc2 <qtm_key_sensors_process+0x666>
    1c86:	ec 81       	ldd	r30, Y+4	; 0x04
    1c88:	fd 81       	ldd	r31, Y+5	; 0x05
    1c8a:	e6 0f       	add	r30, r22
    1c8c:	f7 1f       	adc	r31, r23
    1c8e:	20 81       	ld	r18, Z
    1c90:	23 30       	cpi	r18, 0x03	; 3
    1c92:	11 f0       	breq	.+4      	; 0x1c98 <qtm_key_sensors_process+0x63c>
    1c94:	28 30       	cpi	r18, 0x08	; 8
    1c96:	81 f4       	brne	.+32     	; 0x1cb8 <qtm_key_sensors_process+0x65c>
    1c98:	24 81       	ldd	r18, Z+4	; 0x04
    1c9a:	35 81       	ldd	r19, Z+5	; 0x05
    1c9c:	c2 80       	ldd	r12, Z+2	; 0x02
    1c9e:	d3 80       	ldd	r13, Z+3	; 0x03
    1ca0:	d6 01       	movw	r26, r12
    1ca2:	11 96       	adiw	r26, 0x01	; 1
    1ca4:	cd 90       	ld	r12, X+
    1ca6:	dc 90       	ld	r13, X
    1ca8:	12 97       	sbiw	r26, 0x02	; 2
    1caa:	c2 16       	cp	r12, r18
    1cac:	d3 06       	cpc	r13, r19
    1cae:	20 f4       	brcc	.+8      	; 0x1cb8 <qtm_key_sensors_process+0x65c>
    1cb0:	21 50       	subi	r18, 0x01	; 1
    1cb2:	31 09       	sbc	r19, r1
    1cb4:	24 83       	std	Z+4, r18	; 0x04
    1cb6:	35 83       	std	Z+5, r19	; 0x05
    1cb8:	4f 5f       	subi	r20, 0xFF	; 255
    1cba:	5f 4f       	sbci	r21, 0xFF	; 255
    1cbc:	6a 5f       	subi	r22, 0xFA	; 250
    1cbe:	7f 4f       	sbci	r23, 0xFF	; 255
    1cc0:	df cf       	rjmp	.-66     	; 0x1c80 <qtm_key_sensors_process+0x624>
    1cc2:	f4 01       	movw	r30, r8
    1cc4:	27 81       	ldd	r18, Z+7	; 0x07
    1cc6:	d8 01       	movw	r26, r16
    1cc8:	15 96       	adiw	r26, 0x05	; 5
    1cca:	2c 93       	st	X, r18
    1ccc:	84 cf       	rjmp	.-248    	; 0x1bd6 <qtm_key_sensors_process+0x57a>
    1cce:	21 50       	subi	r18, 0x01	; 1
    1cd0:	23 83       	std	Z+3, r18	; 0x03
    1cd2:	81 cf       	rjmp	.-254    	; 0x1bd6 <qtm_key_sensors_process+0x57a>
    1cd4:	a9 01       	movw	r20, r18
    1cd6:	44 0f       	add	r20, r20
    1cd8:	55 1f       	adc	r21, r21
    1cda:	ec 81       	ldd	r30, Y+4	; 0x04
    1cdc:	fd 81       	ldd	r31, Y+5	; 0x05
    1cde:	e4 0f       	add	r30, r20
    1ce0:	f5 1f       	adc	r31, r21
    1ce2:	60 81       	ld	r22, Z
    1ce4:	65 38       	cpi	r22, 0x85	; 133
    1ce6:	09 f0       	breq	.+2      	; 0x1cea <qtm_key_sensors_process+0x68e>
    1ce8:	47 c0       	rjmp	.+142    	; 0x1d78 <qtm_key_sensors_process+0x71c>
    1cea:	61 81       	ldd	r22, Z+1	; 0x01
    1cec:	66 23       	and	r22, r22
    1cee:	19 f0       	breq	.+6      	; 0x1cf6 <qtm_key_sensors_process+0x69a>
    1cf0:	61 50       	subi	r22, 0x01	; 1
    1cf2:	61 83       	std	Z+1, r22	; 0x01
    1cf4:	41 c0       	rjmp	.+130    	; 0x1d78 <qtm_key_sensors_process+0x71c>
    1cf6:	a0 82       	st	Z, r10
    1cf8:	6c 81       	ldd	r22, Y+4	; 0x04
    1cfa:	7d 81       	ldd	r23, Y+5	; 0x05
    1cfc:	fb 01       	movw	r30, r22
    1cfe:	e4 0f       	add	r30, r20
    1d00:	f5 1f       	adc	r31, r21
    1d02:	02 80       	ldd	r0, Z+2	; 0x02
    1d04:	f3 81       	ldd	r31, Z+3	; 0x03
    1d06:	e0 2d       	mov	r30, r0
    1d08:	b0 82       	st	Z, r11
    1d0a:	ee 81       	ldd	r30, Y+6	; 0x06
    1d0c:	ff 81       	ldd	r31, Y+7	; 0x07
    1d0e:	e2 0f       	add	r30, r18
    1d10:	f3 1f       	adc	r31, r19
    1d12:	d2 80       	ldd	r13, Z+2	; 0x02
    1d14:	dd 20       	and	r13, r13
    1d16:	81 f1       	breq	.+96     	; 0x1d78 <qtm_key_sensors_process+0x71c>
    1d18:	40 e0       	ldi	r20, 0x00	; 0
    1d1a:	50 e0       	ldi	r21, 0x00	; 0
    1d1c:	00 e0       	ldi	r16, 0x00	; 0
    1d1e:	10 e0       	ldi	r17, 0x00	; 0
    1d20:	ea 81       	ldd	r30, Y+2	; 0x02
    1d22:	fb 81       	ldd	r31, Y+3	; 0x03
    1d24:	60 81       	ld	r22, Z
    1d26:	71 81       	ldd	r23, Z+1	; 0x01
    1d28:	06 17       	cp	r16, r22
    1d2a:	17 07       	cpc	r17, r23
    1d2c:	28 f5       	brcc	.+74     	; 0x1d78 <qtm_key_sensors_process+0x71c>
    1d2e:	ee 81       	ldd	r30, Y+6	; 0x06
    1d30:	ff 81       	ldd	r31, Y+7	; 0x07
    1d32:	e4 0f       	add	r30, r20
    1d34:	f5 1f       	adc	r31, r21
    1d36:	62 81       	ldd	r22, Z+2	; 0x02
    1d38:	d6 12       	cpse	r13, r22
    1d3a:	19 c0       	rjmp	.+50     	; 0x1d6e <qtm_key_sensors_process+0x712>
    1d3c:	ba 01       	movw	r22, r20
    1d3e:	66 0f       	add	r22, r22
    1d40:	77 1f       	adc	r23, r23
    1d42:	ec 81       	ldd	r30, Y+4	; 0x04
    1d44:	fd 81       	ldd	r31, Y+5	; 0x05
    1d46:	4f 01       	movw	r8, r30
    1d48:	86 0e       	add	r8, r22
    1d4a:	97 1e       	adc	r9, r23
    1d4c:	f4 01       	movw	r30, r8
    1d4e:	e2 80       	ldd	r14, Z+2	; 0x02
    1d50:	f3 80       	ldd	r15, Z+3	; 0x03
    1d52:	f7 01       	movw	r30, r14
    1d54:	f0 80       	ld	r15, Z
    1d56:	f0 fe       	sbrs	r15, 0
    1d58:	0a c0       	rjmp	.+20     	; 0x1d6e <qtm_key_sensors_process+0x712>
    1d5a:	f4 01       	movw	r30, r8
    1d5c:	a0 82       	st	Z, r10
    1d5e:	ec 81       	ldd	r30, Y+4	; 0x04
    1d60:	fd 81       	ldd	r31, Y+5	; 0x05
    1d62:	e6 0f       	add	r30, r22
    1d64:	f7 1f       	adc	r31, r23
    1d66:	02 80       	ldd	r0, Z+2	; 0x02
    1d68:	f3 81       	ldd	r31, Z+3	; 0x03
    1d6a:	e0 2d       	mov	r30, r0
    1d6c:	b0 82       	st	Z, r11
    1d6e:	0f 5f       	subi	r16, 0xFF	; 255
    1d70:	1f 4f       	sbci	r17, 0xFF	; 255
    1d72:	4d 5f       	subi	r20, 0xFD	; 253
    1d74:	5f 4f       	sbci	r21, 0xFF	; 255
    1d76:	d4 cf       	rjmp	.-88     	; 0x1d20 <qtm_key_sensors_process+0x6c4>
    1d78:	11 96       	adiw	r26, 0x01	; 1
    1d7a:	2d 5f       	subi	r18, 0xFD	; 253
    1d7c:	3f 4f       	sbci	r19, 0xFF	; 255
    1d7e:	34 cf       	rjmp	.-408    	; 0x1be8 <qtm_key_sensors_process+0x58c>
    1d80:	8b e0       	ldi	r24, 0x0B	; 11
    1d82:	df 91       	pop	r29
    1d84:	cf 91       	pop	r28
    1d86:	1f 91       	pop	r17
    1d88:	0f 91       	pop	r16
    1d8a:	ff 90       	pop	r15
    1d8c:	ef 90       	pop	r14
    1d8e:	df 90       	pop	r13
    1d90:	cf 90       	pop	r12
    1d92:	bf 90       	pop	r11
    1d94:	af 90       	pop	r10
    1d96:	9f 90       	pop	r9
    1d98:	8f 90       	pop	r8
    1d9a:	7f 90       	pop	r7
    1d9c:	6f 90       	pop	r6
    1d9e:	5f 90       	pop	r5
    1da0:	4f 90       	pop	r4
    1da2:	3f 90       	pop	r3
    1da4:	2f 90       	pop	r2
    1da6:	08 95       	ret

00001da8 <qtm_freq_hop_autotune>:
    1da8:	2f 92       	push	r2
    1daa:	3f 92       	push	r3
    1dac:	4f 92       	push	r4
    1dae:	5f 92       	push	r5
    1db0:	6f 92       	push	r6
    1db2:	7f 92       	push	r7
    1db4:	8f 92       	push	r8
    1db6:	9f 92       	push	r9
    1db8:	af 92       	push	r10
    1dba:	bf 92       	push	r11
    1dbc:	cf 92       	push	r12
    1dbe:	df 92       	push	r13
    1dc0:	ef 92       	push	r14
    1dc2:	ff 92       	push	r15
    1dc4:	0f 93       	push	r16
    1dc6:	1f 93       	push	r17
    1dc8:	cf 93       	push	r28
    1dca:	df 93       	push	r29
    1dcc:	cd b7       	in	r28, 0x3d	; 61
    1dce:	de b7       	in	r29, 0x3e	; 62
    1dd0:	2c 97       	sbiw	r28, 0x0c	; 12
    1dd2:	cd bf       	out	0x3d, r28	; 61
    1dd4:	de bf       	out	0x3e, r29	; 62
    1dd6:	2c 01       	movw	r4, r24
    1dd8:	00 97       	sbiw	r24, 0x00	; 0
    1dda:	09 f4       	brne	.+2      	; 0x1dde <qtm_freq_hop_autotune+0x36>
    1ddc:	63 c1       	rjmp	.+710    	; 0x20a4 <qtm_freq_hop_autotune+0x2fc>
    1dde:	dc 01       	movw	r26, r24
    1de0:	12 96       	adiw	r26, 0x02	; 2
    1de2:	2d 90       	ld	r2, X+
    1de4:	3c 90       	ld	r3, X
    1de6:	13 97       	sbiw	r26, 0x03	; 3
    1de8:	f1 01       	movw	r30, r2
    1dea:	72 80       	ldd	r7, Z+2	; 0x02
    1dec:	ed 91       	ld	r30, X+
    1dee:	fc 91       	ld	r31, X
    1df0:	61 80       	ldd	r6, Z+1	; 0x01
    1df2:	d1 01       	movw	r26, r2
    1df4:	17 96       	adiw	r26, 0x07	; 7
    1df6:	8c 91       	ld	r24, X
    1df8:	17 97       	sbiw	r26, 0x07	; 7
    1dfa:	e7 2c       	mov	r14, r7
    1dfc:	f1 2c       	mov	r15, r1
    1dfe:	eb 82       	std	Y+3, r14	; 0x03
    1e00:	fc 82       	std	Y+4, r15	; 0x04
    1e02:	26 2d       	mov	r18, r6
    1e04:	30 e0       	ldi	r19, 0x00	; 0
    1e06:	88 23       	and	r24, r24
    1e08:	09 f4       	brne	.+2      	; 0x1e0c <qtm_freq_hop_autotune+0x64>
    1e0a:	a9 c0       	rjmp	.+338    	; 0x1f5e <qtm_freq_hop_autotune+0x1b6>
    1e0c:	8d 90       	ld	r8, X+
    1e0e:	9c 90       	ld	r9, X
    1e10:	57 01       	movw	r10, r14
    1e12:	aa 0c       	add	r10, r10
    1e14:	bb 1c       	adc	r11, r11
    1e16:	69 01       	movw	r12, r18
    1e18:	cc 0c       	add	r12, r12
    1e1a:	dd 1c       	adc	r13, r13
    1e1c:	e1 2c       	mov	r14, r1
    1e1e:	f1 2c       	mov	r15, r1
    1e20:	40 e0       	ldi	r20, 0x00	; 0
    1e22:	50 e0       	ldi	r21, 0x00	; 0
    1e24:	00 e0       	ldi	r16, 0x00	; 0
    1e26:	10 e0       	ldi	r17, 0x00	; 0
    1e28:	08 15       	cp	r16, r8
    1e2a:	19 05       	cpc	r17, r9
    1e2c:	49 f1       	breq	.+82     	; 0x1e80 <qtm_freq_hop_autotune+0xd8>
    1e2e:	84 81       	ldd	r24, Z+4	; 0x04
    1e30:	95 81       	ldd	r25, Z+5	; 0x05
    1e32:	8e 0d       	add	r24, r14
    1e34:	9f 1d       	adc	r25, r15
    1e36:	dc 01       	movw	r26, r24
    1e38:	11 96       	adiw	r26, 0x01	; 1
    1e3a:	6d 91       	ld	r22, X+
    1e3c:	7c 91       	ld	r23, X
    1e3e:	12 97       	sbiw	r26, 0x02	; 2
    1e40:	82 81       	ldd	r24, Z+2	; 0x02
    1e42:	93 81       	ldd	r25, Z+3	; 0x03
    1e44:	8c 0d       	add	r24, r12
    1e46:	9d 1d       	adc	r25, r13
    1e48:	dc 01       	movw	r26, r24
    1e4a:	8d 91       	ld	r24, X+
    1e4c:	9c 91       	ld	r25, X
    1e4e:	86 17       	cp	r24, r22
    1e50:	97 07       	cpc	r25, r23
    1e52:	28 f4       	brcc	.+10     	; 0x1e5e <qtm_freq_hop_autotune+0xb6>
    1e54:	db 01       	movw	r26, r22
    1e56:	a8 1b       	sub	r26, r24
    1e58:	b9 0b       	sbc	r27, r25
    1e5a:	cd 01       	movw	r24, r26
    1e5c:	05 c0       	rjmp	.+10     	; 0x1e68 <qtm_freq_hop_autotune+0xc0>
    1e5e:	68 17       	cp	r22, r24
    1e60:	79 07       	cpc	r23, r25
    1e62:	30 f4       	brcc	.+12     	; 0x1e70 <qtm_freq_hop_autotune+0xc8>
    1e64:	86 1b       	sub	r24, r22
    1e66:	97 0b       	sbc	r25, r23
    1e68:	48 17       	cp	r20, r24
    1e6a:	59 07       	cpc	r21, r25
    1e6c:	08 f4       	brcc	.+2      	; 0x1e70 <qtm_freq_hop_autotune+0xc8>
    1e6e:	ac 01       	movw	r20, r24
    1e70:	0f 5f       	subi	r16, 0xFF	; 255
    1e72:	1f 4f       	sbci	r17, 0xFF	; 255
    1e74:	b5 e0       	ldi	r27, 0x05	; 5
    1e76:	eb 0e       	add	r14, r27
    1e78:	f1 1c       	adc	r15, r1
    1e7a:	ca 0c       	add	r12, r10
    1e7c:	db 1c       	adc	r13, r11
    1e7e:	d4 cf       	rjmp	.-88     	; 0x1e28 <qtm_freq_hop_autotune+0x80>
    1e80:	d1 01       	movw	r26, r2
    1e82:	18 96       	adiw	r26, 0x08	; 8
    1e84:	8c 91       	ld	r24, X
    1e86:	68 2f       	mov	r22, r24
    1e88:	70 e0       	ldi	r23, 0x00	; 0
    1e8a:	64 17       	cp	r22, r20
    1e8c:	75 07       	cpc	r23, r21
    1e8e:	08 f0       	brcs	.+2      	; 0x1e92 <qtm_freq_hop_autotune+0xea>
    1e90:	57 c0       	rjmp	.+174    	; 0x1f40 <qtm_freq_hop_autotune+0x198>
    1e92:	06 80       	ldd	r0, Z+6	; 0x06
    1e94:	f7 81       	ldd	r31, Z+7	; 0x07
    1e96:	e0 2d       	mov	r30, r0
    1e98:	e2 0f       	add	r30, r18
    1e9a:	f3 1f       	adc	r31, r19
    1e9c:	80 81       	ld	r24, Z
    1e9e:	8f 5f       	subi	r24, 0xFF	; 255
    1ea0:	80 83       	st	Z, r24
    1ea2:	f2 01       	movw	r30, r4
    1ea4:	40 81       	ld	r20, Z
    1ea6:	51 81       	ldd	r21, Z+1	; 0x01
    1ea8:	a2 81       	ldd	r26, Z+2	; 0x02
    1eaa:	b3 81       	ldd	r27, Z+3	; 0x03
    1eac:	fa 01       	movw	r30, r20
    1eae:	81 81       	ldd	r24, Z+1	; 0x01
    1eb0:	46 81       	ldd	r20, Z+6	; 0x06
    1eb2:	57 81       	ldd	r21, Z+7	; 0x07
    1eb4:	fa 01       	movw	r30, r20
    1eb6:	e8 0f       	add	r30, r24
    1eb8:	f1 1d       	adc	r31, r1
    1eba:	90 81       	ld	r25, Z
    1ebc:	19 96       	adiw	r26, 0x09	; 9
    1ebe:	8c 91       	ld	r24, X
    1ec0:	19 97       	sbiw	r26, 0x09	; 9
    1ec2:	98 13       	cpse	r25, r24
    1ec4:	4c c0       	rjmp	.+152    	; 0x1f5e <qtm_freq_hop_autotune+0x1b6>
    1ec6:	15 96       	adiw	r26, 0x05	; 5
    1ec8:	0d 91       	ld	r16, X+
    1eca:	1c 91       	ld	r17, X
    1ecc:	16 97       	sbiw	r26, 0x06	; 6
    1ece:	d8 01       	movw	r26, r16
    1ed0:	a2 0f       	add	r26, r18
    1ed2:	b3 1f       	adc	r27, r19
    1ed4:	8c 91       	ld	r24, X
    1ed6:	88 23       	and	r24, r24
    1ed8:	11 f0       	breq	.+4      	; 0x1ede <qtm_freq_hop_autotune+0x136>
    1eda:	81 50       	subi	r24, 0x01	; 1
    1edc:	01 c0       	rjmp	.+2      	; 0x1ee0 <qtm_freq_hop_autotune+0x138>
    1ede:	8f e0       	ldi	r24, 0x0F	; 15
    1ee0:	f8 01       	movw	r30, r16
    1ee2:	61 e0       	ldi	r22, 0x01	; 1
    1ee4:	70 e0       	ldi	r23, 0x00	; 0
    1ee6:	40 e0       	ldi	r20, 0x00	; 0
    1ee8:	50 e0       	ldi	r21, 0x00	; 0
    1eea:	eb 80       	ldd	r14, Y+3	; 0x03
    1eec:	fc 80       	ldd	r15, Y+4	; 0x04
    1eee:	4e 15       	cp	r20, r14
    1ef0:	5f 05       	cpc	r21, r15
    1ef2:	60 f4       	brcc	.+24     	; 0x1f0c <qtm_freq_hop_autotune+0x164>
    1ef4:	42 17       	cp	r20, r18
    1ef6:	53 07       	cpc	r21, r19
    1ef8:	29 f0       	breq	.+10     	; 0x1f04 <qtm_freq_hop_autotune+0x15c>
    1efa:	90 81       	ld	r25, Z
    1efc:	98 13       	cpse	r25, r24
    1efe:	02 c0       	rjmp	.+4      	; 0x1f04 <qtm_freq_hop_autotune+0x15c>
    1f00:	60 e0       	ldi	r22, 0x00	; 0
    1f02:	70 e0       	ldi	r23, 0x00	; 0
    1f04:	4f 5f       	subi	r20, 0xFF	; 255
    1f06:	5f 4f       	sbci	r21, 0xFF	; 255
    1f08:	31 96       	adiw	r30, 0x01	; 1
    1f0a:	ef cf       	rjmp	.-34     	; 0x1eea <qtm_freq_hop_autotune+0x142>
    1f0c:	67 2b       	or	r22, r23
    1f0e:	19 f3       	breq	.-58     	; 0x1ed6 <qtm_freq_hop_autotune+0x12e>
    1f10:	8c 93       	st	X, r24
    1f12:	80 e0       	ldi	r24, 0x00	; 0
    1f14:	90 e0       	ldi	r25, 0x00	; 0
    1f16:	d2 01       	movw	r26, r4
    1f18:	12 96       	adiw	r26, 0x02	; 2
    1f1a:	ed 91       	ld	r30, X+
    1f1c:	fc 91       	ld	r31, X
    1f1e:	13 97       	sbiw	r26, 0x03	; 3
    1f20:	42 81       	ldd	r20, Z+2	; 0x02
    1f22:	50 e0       	ldi	r21, 0x00	; 0
    1f24:	84 17       	cp	r24, r20
    1f26:	95 07       	cpc	r25, r21
    1f28:	d0 f4       	brcc	.+52     	; 0x1f5e <qtm_freq_hop_autotune+0x1b6>
    1f2a:	d2 01       	movw	r26, r4
    1f2c:	ed 91       	ld	r30, X+
    1f2e:	fc 91       	ld	r31, X
    1f30:	06 80       	ldd	r0, Z+6	; 0x06
    1f32:	f7 81       	ldd	r31, Z+7	; 0x07
    1f34:	e0 2d       	mov	r30, r0
    1f36:	e8 0f       	add	r30, r24
    1f38:	f9 1f       	adc	r31, r25
    1f3a:	10 82       	st	Z, r1
    1f3c:	01 96       	adiw	r24, 0x01	; 1
    1f3e:	eb cf       	rjmp	.-42     	; 0x1f16 <qtm_freq_hop_autotune+0x16e>
    1f40:	86 95       	lsr	r24
    1f42:	90 e0       	ldi	r25, 0x00	; 0
    1f44:	48 17       	cp	r20, r24
    1f46:	59 07       	cpc	r21, r25
    1f48:	50 f4       	brcc	.+20     	; 0x1f5e <qtm_freq_hop_autotune+0x1b6>
    1f4a:	06 80       	ldd	r0, Z+6	; 0x06
    1f4c:	f7 81       	ldd	r31, Z+7	; 0x07
    1f4e:	e0 2d       	mov	r30, r0
    1f50:	e2 0f       	add	r30, r18
    1f52:	f3 1f       	adc	r31, r19
    1f54:	80 81       	ld	r24, Z
    1f56:	88 23       	and	r24, r24
    1f58:	11 f0       	breq	.+4      	; 0x1f5e <qtm_freq_hop_autotune+0x1b6>
    1f5a:	81 50       	subi	r24, 0x01	; 1
    1f5c:	80 83       	st	Z, r24
    1f5e:	f2 01       	movw	r30, r4
    1f60:	02 80       	ldd	r0, Z+2	; 0x02
    1f62:	f3 81       	ldd	r31, Z+3	; 0x03
    1f64:	e0 2d       	mov	r30, r0
    1f66:	e9 83       	std	Y+1, r30	; 0x01
    1f68:	fa 83       	std	Y+2, r31	; 0x02
    1f6a:	eb 80       	ldd	r14, Y+3	; 0x03
    1f6c:	fc 80       	ldd	r15, Y+4	; 0x04
    1f6e:	ee 0c       	add	r14, r14
    1f70:	ff 1c       	adc	r15, r15
    1f72:	eb 82       	std	Y+3, r14	; 0x03
    1f74:	fc 82       	std	Y+4, r15	; 0x04
    1f76:	b9 01       	movw	r22, r18
    1f78:	66 0f       	add	r22, r22
    1f7a:	77 1f       	adc	r23, r23
    1f7c:	6d 83       	std	Y+5, r22	; 0x05
    1f7e:	7e 83       	std	Y+6, r23	; 0x06
    1f80:	d7 2c       	mov	r13, r7
    1f82:	d6 94       	lsr	r13
    1f84:	d3 94       	inc	r13
    1f86:	40 e0       	ldi	r20, 0x00	; 0
    1f88:	50 e0       	ldi	r21, 0x00	; 0
    1f8a:	20 e0       	ldi	r18, 0x00	; 0
    1f8c:	30 e0       	ldi	r19, 0x00	; 0
    1f8e:	e1 2c       	mov	r14, r1
    1f90:	f1 2c       	mov	r15, r1
    1f92:	8d 2d       	mov	r24, r13
    1f94:	90 e0       	ldi	r25, 0x00	; 0
    1f96:	8f 83       	std	Y+7, r24	; 0x07
    1f98:	98 87       	std	Y+8, r25	; 0x08
    1f9a:	a9 81       	ldd	r26, Y+1	; 0x01
    1f9c:	ba 81       	ldd	r27, Y+2	; 0x02
    1f9e:	8d 91       	ld	r24, X+
    1fa0:	9c 91       	ld	r25, X
    1fa2:	e8 16       	cp	r14, r24
    1fa4:	f9 06       	cpc	r15, r25
    1fa6:	08 f0       	brcs	.+2      	; 0x1faa <qtm_freq_hop_autotune+0x202>
    1fa8:	68 c0       	rjmp	.+208    	; 0x207a <qtm_freq_hop_autotune+0x2d2>
    1faa:	d2 01       	movw	r26, r4
    1fac:	ed 91       	ld	r30, X+
    1fae:	fc 91       	ld	r31, X
    1fb0:	a4 81       	ldd	r26, Z+4	; 0x04
    1fb2:	b5 81       	ldd	r27, Z+5	; 0x05
    1fb4:	bd 01       	movw	r22, r26
    1fb6:	62 0f       	add	r22, r18
    1fb8:	73 1f       	adc	r23, r19
    1fba:	6b 87       	std	Y+11, r22	; 0x0b
    1fbc:	7c 87       	std	Y+12, r23	; 0x0c
    1fbe:	db 01       	movw	r26, r22
    1fc0:	8c 91       	ld	r24, X
    1fc2:	8c 71       	andi	r24, 0x1C	; 28
    1fc4:	09 f0       	breq	.+2      	; 0x1fc8 <qtm_freq_hop_autotune+0x220>
    1fc6:	4f c0       	rjmp	.+158    	; 0x2066 <qtm_freq_hop_autotune+0x2be>
    1fc8:	11 96       	adiw	r26, 0x01	; 1
    1fca:	6d 91       	ld	r22, X+
    1fcc:	7c 91       	ld	r23, X
    1fce:	12 97       	sbiw	r26, 0x02	; 2
    1fd0:	82 81       	ldd	r24, Z+2	; 0x02
    1fd2:	93 81       	ldd	r25, Z+3	; 0x03
    1fd4:	84 0f       	add	r24, r20
    1fd6:	95 1f       	adc	r25, r21
    1fd8:	ed 81       	ldd	r30, Y+5	; 0x05
    1fda:	fe 81       	ldd	r31, Y+6	; 0x06
    1fdc:	e8 0f       	add	r30, r24
    1fde:	f9 1f       	adc	r31, r25
    1fe0:	60 83       	st	Z, r22
    1fe2:	71 83       	std	Z+1, r23	; 0x01
    1fe4:	a1 2c       	mov	r10, r1
    1fe6:	b1 2c       	mov	r11, r1
    1fe8:	c1 2c       	mov	r12, r1
    1fea:	c7 14       	cp	r12, r7
    1fec:	c0 f5       	brcc	.+112    	; 0x205e <qtm_freq_hop_autotune+0x2b6>
    1fee:	fc 01       	movw	r30, r24
    1ff0:	ec 0d       	add	r30, r12
    1ff2:	f1 1d       	adc	r31, r1
    1ff4:	ec 0d       	add	r30, r12
    1ff6:	f1 1d       	adc	r31, r1
    1ff8:	89 87       	std	Y+9, r24	; 0x09
    1ffa:	9a 87       	std	Y+10, r25	; 0x0a
    1ffc:	99 24       	eor	r9, r9
    1ffe:	93 94       	inc	r9
    2000:	81 2c       	mov	r8, r1
    2002:	31 2c       	mov	r3, r1
    2004:	73 14       	cp	r7, r3
    2006:	c9 f0       	breq	.+50     	; 0x203a <qtm_freq_hop_autotune+0x292>
    2008:	c3 14       	cp	r12, r3
    200a:	79 f0       	breq	.+30     	; 0x202a <qtm_freq_hop_autotune+0x282>
    200c:	a9 85       	ldd	r26, Y+9	; 0x09
    200e:	ba 85       	ldd	r27, Y+10	; 0x0a
    2010:	0d 91       	ld	r16, X+
    2012:	1c 91       	ld	r17, X
    2014:	60 81       	ld	r22, Z
    2016:	71 81       	ldd	r23, Z+1	; 0x01
    2018:	06 17       	cp	r16, r22
    201a:	17 07       	cpc	r17, r23
    201c:	11 f4       	brne	.+4      	; 0x2022 <qtm_freq_hop_autotune+0x27a>
    201e:	93 94       	inc	r9
    2020:	04 c0       	rjmp	.+8      	; 0x202a <qtm_freq_hop_autotune+0x282>
    2022:	06 17       	cp	r16, r22
    2024:	17 07       	cpc	r17, r23
    2026:	08 f4       	brcc	.+2      	; 0x202a <qtm_freq_hop_autotune+0x282>
    2028:	83 94       	inc	r8
    202a:	33 94       	inc	r3
    202c:	69 85       	ldd	r22, Y+9	; 0x09
    202e:	7a 85       	ldd	r23, Y+10	; 0x0a
    2030:	6e 5f       	subi	r22, 0xFE	; 254
    2032:	7f 4f       	sbci	r23, 0xFF	; 255
    2034:	69 87       	std	Y+9, r22	; 0x09
    2036:	7a 87       	std	Y+10, r23	; 0x0a
    2038:	e5 cf       	rjmp	.-54     	; 0x2004 <qtm_freq_hop_autotune+0x25c>
    203a:	9d 14       	cp	r9, r13
    203c:	58 f4       	brcc	.+22     	; 0x2054 <qtm_freq_hop_autotune+0x2ac>
    203e:	8d 14       	cp	r8, r13
    2040:	60 f4       	brcc	.+24     	; 0x205a <qtm_freq_hop_autotune+0x2b2>
    2042:	69 2d       	mov	r22, r9
    2044:	70 e0       	ldi	r23, 0x00	; 0
    2046:	68 0d       	add	r22, r8
    2048:	71 1d       	adc	r23, r1
    204a:	af 81       	ldd	r26, Y+7	; 0x07
    204c:	b8 85       	ldd	r27, Y+8	; 0x08
    204e:	6a 17       	cp	r22, r26
    2050:	7b 07       	cpc	r23, r27
    2052:	1c f0       	brlt	.+6      	; 0x205a <qtm_freq_hop_autotune+0x2b2>
    2054:	a0 80       	ld	r10, Z
    2056:	b1 80       	ldd	r11, Z+1	; 0x01
    2058:	c7 2c       	mov	r12, r7
    205a:	c3 94       	inc	r12
    205c:	c6 cf       	rjmp	.-116    	; 0x1fea <qtm_freq_hop_autotune+0x242>
    205e:	eb 85       	ldd	r30, Y+11	; 0x0b
    2060:	fc 85       	ldd	r31, Y+12	; 0x0c
    2062:	a1 82       	std	Z+1, r10	; 0x01
    2064:	b2 82       	std	Z+2, r11	; 0x02
    2066:	ff ef       	ldi	r31, 0xFF	; 255
    2068:	ef 1a       	sub	r14, r31
    206a:	ff 0a       	sbc	r15, r31
    206c:	2b 5f       	subi	r18, 0xFB	; 251
    206e:	3f 4f       	sbci	r19, 0xFF	; 255
    2070:	6b 81       	ldd	r22, Y+3	; 0x03
    2072:	7c 81       	ldd	r23, Y+4	; 0x04
    2074:	46 0f       	add	r20, r22
    2076:	57 1f       	adc	r21, r23
    2078:	90 cf       	rjmp	.-224    	; 0x1f9a <qtm_freq_hop_autotune+0x1f2>
    207a:	63 94       	inc	r6
    207c:	67 14       	cp	r6, r7
    207e:	08 f0       	brcs	.+2      	; 0x2082 <qtm_freq_hop_autotune+0x2da>
    2080:	61 2c       	mov	r6, r1
    2082:	e9 81       	ldd	r30, Y+1	; 0x01
    2084:	fa 81       	ldd	r31, Y+2	; 0x02
    2086:	a3 81       	ldd	r26, Z+3	; 0x03
    2088:	b4 81       	ldd	r27, Z+4	; 0x04
    208a:	85 81       	ldd	r24, Z+5	; 0x05
    208c:	96 81       	ldd	r25, Z+6	; 0x06
    208e:	fc 01       	movw	r30, r24
    2090:	e6 0d       	add	r30, r6
    2092:	f1 1d       	adc	r31, r1
    2094:	80 81       	ld	r24, Z
    2096:	8c 93       	st	X, r24
    2098:	d2 01       	movw	r26, r4
    209a:	ed 91       	ld	r30, X+
    209c:	fc 91       	ld	r31, X
    209e:	61 82       	std	Z+1, r6	; 0x01
    20a0:	80 e0       	ldi	r24, 0x00	; 0
    20a2:	01 c0       	rjmp	.+2      	; 0x20a6 <qtm_freq_hop_autotune+0x2fe>
    20a4:	8b e0       	ldi	r24, 0x0B	; 11
    20a6:	2c 96       	adiw	r28, 0x0c	; 12
    20a8:	cd bf       	out	0x3d, r28	; 61
    20aa:	de bf       	out	0x3e, r29	; 62
    20ac:	df 91       	pop	r29
    20ae:	cf 91       	pop	r28
    20b0:	1f 91       	pop	r17
    20b2:	0f 91       	pop	r16
    20b4:	ff 90       	pop	r15
    20b6:	ef 90       	pop	r14
    20b8:	df 90       	pop	r13
    20ba:	cf 90       	pop	r12
    20bc:	bf 90       	pop	r11
    20be:	af 90       	pop	r10
    20c0:	9f 90       	pop	r9
    20c2:	8f 90       	pop	r8
    20c4:	7f 90       	pop	r7
    20c6:	6f 90       	pop	r6
    20c8:	5f 90       	pop	r5
    20ca:	4f 90       	pop	r4
    20cc:	3f 90       	pop	r3
    20ce:	2f 90       	pop	r2
    20d0:	08 95       	ret

000020d2 <select_next_channel_to_measure>:
    20d2:	80 91 82 38 	lds	r24, 0x3882	; 0x803882 <current_measure_channel>
    20d6:	90 91 83 38 	lds	r25, 0x3883	; 0x803883 <current_measure_channel+0x1>
    20da:	a0 91 da 38 	lds	r26, 0x38DA	; 0x8038da <qtm_acquisition_control_working_set_ptr>
    20de:	b0 91 db 38 	lds	r27, 0x38DB	; 0x8038db <qtm_acquisition_control_working_set_ptr+0x1>
    20e2:	ed 91       	ld	r30, X+
    20e4:	fc 91       	ld	r31, X
    20e6:	11 97       	sbiw	r26, 0x01	; 1
    20e8:	40 81       	ld	r20, Z
    20ea:	51 81       	ldd	r21, Z+1	; 0x01
    20ec:	25 e0       	ldi	r18, 0x05	; 5
    20ee:	28 9f       	mul	r18, r24
    20f0:	b0 01       	movw	r22, r0
    20f2:	29 9f       	mul	r18, r25
    20f4:	70 0d       	add	r23, r0
    20f6:	11 24       	eor	r1, r1
    20f8:	20 e0       	ldi	r18, 0x00	; 0
    20fa:	30 e0       	ldi	r19, 0x00	; 0
    20fc:	84 17       	cp	r24, r20
    20fe:	95 07       	cpc	r25, r21
    2100:	a8 f4       	brcc	.+42     	; 0x212c <select_next_channel_to_measure+0x5a>
    2102:	14 96       	adiw	r26, 0x04	; 4
    2104:	ed 91       	ld	r30, X+
    2106:	fc 91       	ld	r31, X
    2108:	15 97       	sbiw	r26, 0x05	; 5
    210a:	e2 0f       	add	r30, r18
    210c:	f3 1f       	adc	r31, r19
    210e:	e6 0f       	add	r30, r22
    2110:	f7 1f       	adc	r31, r23
    2112:	e0 81       	ld	r30, Z
    2114:	2b 5f       	subi	r18, 0xFB	; 251
    2116:	3f 4f       	sbci	r19, 0xFF	; 255
    2118:	e0 fd       	sbrc	r30, 0
    211a:	02 c0       	rjmp	.+4      	; 0x2120 <select_next_channel_to_measure+0x4e>
    211c:	01 96       	adiw	r24, 0x01	; 1
    211e:	ee cf       	rjmp	.-36     	; 0x20fc <select_next_channel_to_measure+0x2a>
    2120:	80 93 82 38 	sts	0x3882, r24	; 0x803882 <current_measure_channel>
    2124:	90 93 83 38 	sts	0x3883, r25	; 0x803883 <current_measure_channel+0x1>
    2128:	80 e0       	ldi	r24, 0x00	; 0
    212a:	08 95       	ret
    212c:	10 92 82 38 	sts	0x3882, r1	; 0x803882 <current_measure_channel>
    2130:	10 92 83 38 	sts	0x3883, r1	; 0x803883 <current_measure_channel+0x1>
    2134:	81 e0       	ldi	r24, 0x01	; 1
    2136:	08 95       	ret

00002138 <qtm_measure_node>:
    2138:	bc 01       	movw	r22, r24
    213a:	e0 91 da 38 	lds	r30, 0x38DA	; 0x8038da <qtm_acquisition_control_working_set_ptr>
    213e:	f0 91 db 38 	lds	r31, 0x38DB	; 0x8038db <qtm_acquisition_control_working_set_ptr+0x1>
    2142:	9c 01       	movw	r18, r24
    2144:	83 e0       	ldi	r24, 0x03	; 3
    2146:	22 0f       	add	r18, r18
    2148:	33 1f       	adc	r19, r19
    214a:	8a 95       	dec	r24
    214c:	e1 f7       	brne	.-8      	; 0x2146 <qtm_measure_node+0xe>
    214e:	a2 81       	ldd	r26, Z+2	; 0x02
    2150:	b3 81       	ldd	r27, Z+3	; 0x03
    2152:	a2 0f       	add	r26, r18
    2154:	b3 1f       	adc	r27, r19
    2156:	12 96       	adiw	r26, 0x02	; 2
    2158:	9c 91       	ld	r25, X
    215a:	12 97       	sbiw	r26, 0x02	; 2
    215c:	13 96       	adiw	r26, 0x03	; 3
    215e:	8c 91       	ld	r24, X
    2160:	90 93 2a 06 	sts	0x062A, r25	; 0x80062a <gain_setting_int_cap+0x7f5e50>
    2164:	80 93 2b 06 	sts	0x062B, r24	; 0x80062b <gain_setting_int_cap+0x7f5e51>
    2168:	a2 81       	ldd	r26, Z+2	; 0x02
    216a:	b3 81       	ldd	r27, Z+3	; 0x03
    216c:	a2 0f       	add	r26, r18
    216e:	b3 1f       	adc	r27, r19
    2170:	9c 91       	ld	r25, X
    2172:	11 96       	adiw	r26, 0x01	; 1
    2174:	8c 91       	ld	r24, X
    2176:	90 93 26 06 	sts	0x0626, r25	; 0x800626 <gain_setting_int_cap+0x7f5e4c>
    217a:	80 93 27 06 	sts	0x0627, r24	; 0x800627 <gain_setting_int_cap+0x7f5e4d>
    217e:	95 e0       	ldi	r25, 0x05	; 5
    2180:	96 9f       	mul	r25, r22
    2182:	a0 01       	movw	r20, r0
    2184:	97 9f       	mul	r25, r23
    2186:	50 0d       	add	r21, r0
    2188:	11 24       	eor	r1, r1
    218a:	a4 81       	ldd	r26, Z+4	; 0x04
    218c:	b5 81       	ldd	r27, Z+5	; 0x05
    218e:	a4 0f       	add	r26, r20
    2190:	b5 1f       	adc	r27, r21
    2192:	13 96       	adiw	r26, 0x03	; 3
    2194:	8c 91       	ld	r24, X
    2196:	80 93 1a 06 	sts	0x061A, r24	; 0x80061a <gain_setting_int_cap+0x7f5e40>
    219a:	a4 81       	ldd	r26, Z+4	; 0x04
    219c:	b5 81       	ldd	r27, Z+5	; 0x05
    219e:	a4 0f       	add	r26, r20
    21a0:	b5 1f       	adc	r27, r21
    21a2:	14 96       	adiw	r26, 0x04	; 4
    21a4:	8c 91       	ld	r24, X
    21a6:	80 93 1b 06 	sts	0x061B, r24	; 0x80061b <gain_setting_int_cap+0x7f5e41>
    21aa:	a4 81       	ldd	r26, Z+4	; 0x04
    21ac:	b5 81       	ldd	r27, Z+5	; 0x05
    21ae:	a4 0f       	add	r26, r20
    21b0:	b5 1f       	adc	r27, r21
    21b2:	8c 91       	ld	r24, X
    21b4:	81 fd       	sbrc	r24, 1
    21b6:	9c 93       	st	X, r25
    21b8:	84 81       	ldd	r24, Z+4	; 0x04
    21ba:	95 81       	ldd	r25, Z+5	; 0x05
    21bc:	dc 01       	movw	r26, r24
    21be:	a4 0f       	add	r26, r20
    21c0:	b5 1f       	adc	r27, r21
    21c2:	8c 91       	ld	r24, X
    21c4:	8c 71       	andi	r24, 0x1C	; 28
    21c6:	69 f4       	brne	.+26     	; 0x21e2 <qtm_measure_node+0xaa>
    21c8:	a2 81       	ldd	r26, Z+2	; 0x02
    21ca:	b3 81       	ldd	r27, Z+3	; 0x03
    21cc:	a2 0f       	add	r26, r18
    21ce:	b3 1f       	adc	r27, r19
    21d0:	16 96       	adiw	r26, 0x06	; 6
    21d2:	ac 91       	ld	r26, X
    21d4:	a2 95       	swap	r26
    21d6:	af 70       	andi	r26, 0x0F	; 15
    21d8:	b0 e0       	ldi	r27, 0x00	; 0
    21da:	a6 52       	subi	r26, 0x26	; 38
    21dc:	b8 45       	sbci	r27, 0x58	; 88
    21de:	8c 91       	ld	r24, X
    21e0:	01 c0       	rjmp	.+2      	; 0x21e4 <qtm_measure_node+0xac>
    21e2:	8f e3       	ldi	r24, 0x3F	; 63
    21e4:	80 93 1c 06 	sts	0x061C, r24	; 0x80061c <gain_setting_int_cap+0x7f5e42>
    21e8:	a2 81       	ldd	r26, Z+2	; 0x02
    21ea:	b3 81       	ldd	r27, Z+3	; 0x03
    21ec:	a2 0f       	add	r26, r18
    21ee:	b3 1f       	adc	r27, r19
    21f0:	14 96       	adiw	r26, 0x04	; 4
    21f2:	8c 91       	ld	r24, X
    21f4:	8b 31       	cpi	r24, 0x1B	; 27
    21f6:	10 f4       	brcc	.+4      	; 0x21fc <qtm_measure_node+0xc4>
    21f8:	8c 5f       	subi	r24, 0xFC	; 252
    21fa:	01 c0       	rjmp	.+2      	; 0x21fe <qtm_measure_node+0xc6>
    21fc:	8f e1       	ldi	r24, 0x1F	; 31
    21fe:	80 93 05 06 	sts	0x0605, r24	; 0x800605 <gain_setting_int_cap+0x7f5e2b>
    2202:	a2 81       	ldd	r26, Z+2	; 0x02
    2204:	b3 81       	ldd	r27, Z+3	; 0x03
    2206:	a2 0f       	add	r26, r18
    2208:	b3 1f       	adc	r27, r19
    220a:	17 96       	adiw	r26, 0x07	; 7
    220c:	8c 91       	ld	r24, X
    220e:	80 93 01 06 	sts	0x0601, r24	; 0x800601 <gain_setting_int_cap+0x7f5e27>
    2212:	a2 81       	ldd	r26, Z+2	; 0x02
    2214:	b3 81       	ldd	r27, Z+3	; 0x03
    2216:	a2 0f       	add	r26, r18
    2218:	b3 1f       	adc	r27, r19
    221a:	15 96       	adiw	r26, 0x05	; 5
    221c:	8c 91       	ld	r24, X
    221e:	82 95       	swap	r24
    2220:	8f 70       	andi	r24, 0x0F	; 15
    2222:	80 93 19 06 	sts	0x0619, r24	; 0x800619 <gain_setting_int_cap+0x7f5e3f>
    2226:	82 81       	ldd	r24, Z+2	; 0x02
    2228:	93 81       	ldd	r25, Z+3	; 0x03
    222a:	fc 01       	movw	r30, r24
    222c:	e2 0f       	add	r30, r18
    222e:	f3 1f       	adc	r31, r19
    2230:	85 81       	ldd	r24, Z+5	; 0x05
    2232:	8f 70       	andi	r24, 0x0F	; 15
    2234:	80 61       	ori	r24, 0x10	; 16
    2236:	80 93 02 06 	sts	0x0602, r24	; 0x800602 <gain_setting_int_cap+0x7f5e28>
    223a:	80 91 18 06 	lds	r24, 0x0618	; 0x800618 <gain_setting_int_cap+0x7f5e3e>
    223e:	83 60       	ori	r24, 0x03	; 3
    2240:	80 93 18 06 	sts	0x0618, r24	; 0x800618 <gain_setting_int_cap+0x7f5e3e>
    2244:	81 e8       	ldi	r24, 0x81	; 129
    2246:	80 93 00 06 	sts	0x0600, r24	; 0x800600 <gain_setting_int_cap+0x7f5e26>
    224a:	81 e0       	ldi	r24, 0x01	; 1
    224c:	80 93 08 06 	sts	0x0608, r24	; 0x800608 <gain_setting_int_cap+0x7f5e2e>
    2250:	08 95       	ret

00002252 <qtm_acquisition_process>:
    2252:	3f 92       	push	r3
    2254:	4f 92       	push	r4
    2256:	5f 92       	push	r5
    2258:	6f 92       	push	r6
    225a:	7f 92       	push	r7
    225c:	8f 92       	push	r8
    225e:	9f 92       	push	r9
    2260:	af 92       	push	r10
    2262:	bf 92       	push	r11
    2264:	cf 92       	push	r12
    2266:	df 92       	push	r13
    2268:	ef 92       	push	r14
    226a:	ff 92       	push	r15
    226c:	0f 93       	push	r16
    226e:	1f 93       	push	r17
    2270:	cf 93       	push	r28
    2272:	df 93       	push	r29
    2274:	80 91 81 38 	lds	r24, 0x3881	; 0x803881 <touch_seq_lib_state>
    2278:	88 23       	and	r24, r24
    227a:	09 f4       	brne	.+2      	; 0x227e <qtm_acquisition_process+0x2c>
    227c:	48 c1       	rjmp	.+656    	; 0x250e <qtm_acquisition_process+0x2bc>
    227e:	a0 91 da 38 	lds	r26, 0x38DA	; 0x8038da <qtm_acquisition_control_working_set_ptr>
    2282:	b0 91 db 38 	lds	r27, 0x38DB	; 0x8038db <qtm_acquisition_control_working_set_ptr+0x1>
    2286:	c0 90 dc 38 	lds	r12, 0x38DC	; 0x8038dc <qtm_raw_data_measurements_ptr>
    228a:	d0 90 dd 38 	lds	r13, 0x38DD	; 0x8038dd <qtm_raw_data_measurements_ptr+0x1>
    228e:	00 e0       	ldi	r16, 0x00	; 0
    2290:	10 e0       	ldi	r17, 0x00	; 0
    2292:	60 e0       	ldi	r22, 0x00	; 0
    2294:	70 e0       	ldi	r23, 0x00	; 0
    2296:	e1 2c       	mov	r14, r1
    2298:	f1 2c       	mov	r15, r1
    229a:	80 e0       	ldi	r24, 0x00	; 0
    229c:	33 24       	eor	r3, r3
    229e:	33 94       	inc	r3
    22a0:	d1 e8       	ldi	r29, 0x81	; 129
    22a2:	4d 2e       	mov	r4, r29
    22a4:	88 24       	eor	r8, r8
    22a6:	8a 94       	dec	r8
    22a8:	99 24       	eor	r9, r9
    22aa:	93 94       	inc	r9
    22ac:	6d 90       	ld	r6, X+
    22ae:	7c 90       	ld	r7, X
    22b0:	11 97       	sbiw	r26, 0x01	; 1
    22b2:	f3 01       	movw	r30, r6
    22b4:	20 81       	ld	r18, Z
    22b6:	31 81       	ldd	r19, Z+1	; 0x01
    22b8:	e2 16       	cp	r14, r18
    22ba:	f3 06       	cpc	r15, r19
    22bc:	08 f0       	brcs	.+2      	; 0x22c0 <qtm_acquisition_process+0x6e>
    22be:	23 c1       	rjmp	.+582    	; 0x2506 <qtm_acquisition_process+0x2b4>
    22c0:	e6 01       	movw	r28, r12
    22c2:	29 91       	ld	r18, Y+
    22c4:	39 91       	ld	r19, Y+
    22c6:	6e 01       	movw	r12, r28
    22c8:	14 96       	adiw	r26, 0x04	; 4
    22ca:	ed 91       	ld	r30, X+
    22cc:	fc 91       	ld	r31, X
    22ce:	15 97       	sbiw	r26, 0x05	; 5
    22d0:	e6 0f       	add	r30, r22
    22d2:	f7 1f       	adc	r31, r23
    22d4:	40 81       	ld	r20, Z
    22d6:	4c 71       	andi	r20, 0x1C	; 28
    22d8:	50 e0       	ldi	r21, 0x00	; 0
    22da:	56 95       	lsr	r21
    22dc:	47 95       	ror	r20
    22de:	56 95       	lsr	r21
    22e0:	47 95       	ror	r20
    22e2:	41 15       	cp	r20, r1
    22e4:	51 05       	cpc	r21, r1
    22e6:	21 f0       	breq	.+8      	; 0x22f0 <qtm_acquisition_process+0x9e>
    22e8:	41 30       	cpi	r20, 0x01	; 1
    22ea:	51 05       	cpc	r21, r1
    22ec:	b9 f0       	breq	.+46     	; 0x231c <qtm_acquisition_process+0xca>
    22ee:	02 c1       	rjmp	.+516    	; 0x24f4 <qtm_acquisition_process+0x2a2>
    22f0:	12 96       	adiw	r26, 0x02	; 2
    22f2:	cd 91       	ld	r28, X+
    22f4:	dc 91       	ld	r29, X
    22f6:	13 97       	sbiw	r26, 0x03	; 3
    22f8:	c0 0f       	add	r28, r16
    22fa:	d1 1f       	adc	r29, r17
    22fc:	4e 81       	ldd	r20, Y+6	; 0x06
    22fe:	4f 70       	andi	r20, 0x0F	; 15
    2300:	9f 81       	ldd	r25, Y+7	; 0x07
    2302:	49 17       	cp	r20, r25
    2304:	10 f4       	brcc	.+4      	; 0x230a <qtm_acquisition_process+0xb8>
    2306:	94 1b       	sub	r25, r20
    2308:	01 c0       	rjmp	.+2      	; 0x230c <qtm_acquisition_process+0xba>
    230a:	90 e0       	ldi	r25, 0x00	; 0
    230c:	02 c0       	rjmp	.+4      	; 0x2312 <qtm_acquisition_process+0xc0>
    230e:	36 95       	lsr	r19
    2310:	27 95       	ror	r18
    2312:	9a 95       	dec	r25
    2314:	e2 f7       	brpl	.-8      	; 0x230e <qtm_acquisition_process+0xbc>
    2316:	21 83       	std	Z+1, r18	; 0x01
    2318:	32 83       	std	Z+2, r19	; 0x02
    231a:	ed c0       	rjmp	.+474    	; 0x24f6 <qtm_acquisition_process+0x2a4>
    231c:	12 96       	adiw	r26, 0x02	; 2
    231e:	4d 91       	ld	r20, X+
    2320:	5c 91       	ld	r21, X
    2322:	13 97       	sbiw	r26, 0x03	; 3
    2324:	40 0f       	add	r20, r16
    2326:	51 1f       	adc	r21, r17
    2328:	ea 01       	movw	r28, r20
    232a:	0f 80       	ldd	r0, Y+7	; 0x07
    232c:	02 c0       	rjmp	.+4      	; 0x2332 <qtm_acquisition_process+0xe0>
    232e:	36 95       	lsr	r19
    2330:	27 95       	ror	r18
    2332:	0a 94       	dec	r0
    2334:	e2 f7       	brpl	.-8      	; 0x232e <qtm_acquisition_process+0xdc>
    2336:	21 83       	std	Z+1, r18	; 0x01
    2338:	32 83       	std	Z+2, r19	; 0x02
    233a:	a3 80       	ldd	r10, Z+3	; 0x03
    233c:	b4 80       	ldd	r11, Z+4	; 0x04
    233e:	21 15       	cp	r18, r1
    2340:	d2 e0       	ldi	r29, 0x02	; 2
    2342:	3d 07       	cpc	r19, r29
    2344:	20 f0       	brcs	.+8      	; 0x234e <qtm_acquisition_process+0xfc>
    2346:	2f 5f       	subi	r18, 0xFF	; 255
    2348:	31 40       	sbci	r19, 0x01	; 1
    234a:	91 e0       	ldi	r25, 0x01	; 1
    234c:	05 c0       	rjmp	.+10     	; 0x2358 <qtm_acquisition_process+0x106>
    234e:	a4 01       	movw	r20, r8
    2350:	42 1b       	sub	r20, r18
    2352:	53 0b       	sbc	r21, r19
    2354:	9a 01       	movw	r18, r20
    2356:	90 e0       	ldi	r25, 0x00	; 0
    2358:	e3 01       	movw	r28, r6
    235a:	5a 80       	ldd	r5, Y+2	; 0x02
    235c:	d0 e4       	ldi	r29, 0x40	; 64
    235e:	5d 12       	cpse	r5, r29
    2360:	05 c0       	rjmp	.+10     	; 0x236c <qtm_acquisition_process+0x11a>
    2362:	36 95       	lsr	r19
    2364:	27 95       	ror	r18
    2366:	99 23       	and	r25, r25
    2368:	19 f0       	breq	.+6      	; 0x2370 <qtm_acquisition_process+0x11e>
    236a:	09 c0       	rjmp	.+18     	; 0x237e <qtm_acquisition_process+0x12c>
    236c:	99 23       	and	r25, r25
    236e:	39 f0       	breq	.+14     	; 0x237e <qtm_acquisition_process+0x12c>
    2370:	4f ef       	ldi	r20, 0xFF	; 255
    2372:	a4 16       	cp	r10, r20
    2374:	b4 06       	cpc	r11, r20
    2376:	31 f4       	brne	.+12     	; 0x2384 <qtm_acquisition_process+0x132>
    2378:	40 82       	st	Z, r4
    237a:	8e e0       	ldi	r24, 0x0E	; 14
    237c:	07 c0       	rjmp	.+14     	; 0x238c <qtm_acquisition_process+0x13a>
    237e:	77 24       	eor	r7, r7
    2380:	73 94       	inc	r7
    2382:	01 c0       	rjmp	.+2      	; 0x2386 <qtm_acquisition_process+0x134>
    2384:	71 2c       	mov	r7, r1
    2386:	2a 30       	cpi	r18, 0x0A	; 10
    2388:	31 05       	cpc	r19, r1
    238a:	90 f4       	brcc	.+36     	; 0x23b0 <qtm_acquisition_process+0x15e>
    238c:	14 96       	adiw	r26, 0x04	; 4
    238e:	ed 91       	ld	r30, X+
    2390:	fc 91       	ld	r31, X
    2392:	15 97       	sbiw	r26, 0x05	; 5
    2394:	e6 0f       	add	r30, r22
    2396:	f7 1f       	adc	r31, r23
    2398:	90 81       	ld	r25, Z
    239a:	97 ff       	sbrs	r25, 7
    239c:	30 82       	st	Z, r3
    239e:	14 96       	adiw	r26, 0x04	; 4
    23a0:	ed 91       	ld	r30, X+
    23a2:	fc 91       	ld	r31, X
    23a4:	15 97       	sbiw	r26, 0x05	; 5
    23a6:	e6 0f       	add	r30, r22
    23a8:	f7 1f       	adc	r31, r23
    23aa:	a3 82       	std	Z+3, r10	; 0x03
    23ac:	b4 82       	std	Z+4, r11	; 0x04
    23ae:	a3 c0       	rjmp	.+326    	; 0x24f6 <qtm_acquisition_process+0x2a4>
    23b0:	e5 01       	movw	r28, r10
    23b2:	cd 2f       	mov	r28, r29
    23b4:	dd 27       	eor	r29, r29
    23b6:	c2 95       	swap	r28
    23b8:	cf 70       	andi	r28, 0x0F	; 15
    23ba:	9c 2f       	mov	r25, r28
    23bc:	a5 01       	movw	r20, r10
    23be:	44 27       	eor	r20, r20
    23c0:	5f 70       	andi	r21, 0x0F	; 15
    23c2:	65 2e       	mov	r6, r21
    23c4:	a5 01       	movw	r20, r10
    23c6:	40 7f       	andi	r20, 0xF0	; 240
    23c8:	55 27       	eor	r21, r21
    23ca:	52 95       	swap	r21
    23cc:	42 95       	swap	r20
    23ce:	4f 70       	andi	r20, 0x0F	; 15
    23d0:	45 27       	eor	r20, r21
    23d2:	5f 70       	andi	r21, 0x0F	; 15
    23d4:	45 27       	eor	r20, r21
    23d6:	5a 2d       	mov	r21, r10
    23d8:	5f 70       	andi	r21, 0x0F	; 15
    23da:	a5 2e       	mov	r10, r21
    23dc:	c4 30       	cpi	r28, 0x04	; 4
    23de:	30 f0       	brcs	.+12     	; 0x23ec <qtm_acquisition_process+0x19a>
    23e0:	93 70       	andi	r25, 0x03	; 3
    23e2:	d6 95       	lsr	r29
    23e4:	c7 95       	ror	r28
    23e6:	d6 95       	lsr	r29
    23e8:	c7 95       	ror	r28
    23ea:	9c 0f       	add	r25, r28
    23ec:	71 10       	cpse	r7, r1
    23ee:	3c c0       	rjmp	.+120    	; 0x2468 <qtm_acquisition_process+0x216>
    23f0:	50 e8       	ldi	r21, 0x80	; 128
    23f2:	55 0d       	add	r21, r5
    23f4:	52 30       	cpi	r21, 0x02	; 2
    23f6:	10 f4       	brcc	.+4      	; 0x23fc <qtm_acquisition_process+0x1aa>
    23f8:	56 e0       	ldi	r21, 0x06	; 6
    23fa:	07 c0       	rjmp	.+14     	; 0x240a <qtm_acquisition_process+0x1b8>
    23fc:	53 e0       	ldi	r21, 0x03	; 3
    23fe:	05 c0       	rjmp	.+10     	; 0x240a <qtm_acquisition_process+0x1b8>
    2400:	95 17       	cp	r25, r21
    2402:	68 f4       	brcc	.+26     	; 0x241e <qtm_acquisition_process+0x1cc>
    2404:	9f 5f       	subi	r25, 0xFF	; 255
    2406:	2f 5c       	subi	r18, 0xCF	; 207
    2408:	31 09       	sbc	r19, r1
    240a:	20 3d       	cpi	r18, 0xD0	; 208
    240c:	31 05       	cpc	r19, r1
    240e:	c0 f7       	brcc	.-16     	; 0x2400 <qtm_acquisition_process+0x1ae>
    2410:	06 c0       	rjmp	.+12     	; 0x241e <qtm_acquisition_process+0x1cc>
    2412:	cf e0       	ldi	r28, 0x0F	; 15
    2414:	6c 16       	cp	r6, r28
    2416:	49 f0       	breq	.+18     	; 0x242a <qtm_acquisition_process+0x1d8>
    2418:	63 94       	inc	r6
    241a:	25 51       	subi	r18, 0x15	; 21
    241c:	31 09       	sbc	r19, r1
    241e:	26 31       	cpi	r18, 0x16	; 22
    2420:	31 05       	cpc	r19, r1
    2422:	b8 f7       	brcc	.-18     	; 0x2412 <qtm_acquisition_process+0x1c0>
    2424:	df e0       	ldi	r29, 0x0F	; 15
    2426:	6d 12       	cpse	r6, r29
    2428:	0e c0       	rjmp	.+28     	; 0x2446 <qtm_acquisition_process+0x1f4>
    242a:	95 17       	cp	r25, r21
    242c:	20 f4       	brcc	.+8      	; 0x2436 <qtm_acquisition_process+0x1e4>
    242e:	9f 5f       	subi	r25, 0xFF	; 255
    2430:	d5 e0       	ldi	r29, 0x05	; 5
    2432:	6d 2e       	mov	r6, r29
    2434:	08 c0       	rjmp	.+16     	; 0x2446 <qtm_acquisition_process+0x1f4>
    2436:	cf e0       	ldi	r28, 0x0F	; 15
    2438:	6c 2e       	mov	r6, r28
    243a:	05 c0       	rjmp	.+10     	; 0x2446 <qtm_acquisition_process+0x1f4>
    243c:	4f 30       	cpi	r20, 0x0F	; 15
    243e:	49 f0       	breq	.+18     	; 0x2452 <qtm_acquisition_process+0x200>
    2440:	4f 5f       	subi	r20, 0xFF	; 255
    2442:	22 50       	subi	r18, 0x02	; 2
    2444:	31 09       	sbc	r19, r1
    2446:	23 30       	cpi	r18, 0x03	; 3
    2448:	31 05       	cpc	r19, r1
    244a:	c0 f7       	brcc	.-16     	; 0x243c <qtm_acquisition_process+0x1ea>
    244c:	4f 30       	cpi	r20, 0x0F	; 15
    244e:	09 f0       	breq	.+2      	; 0x2452 <qtm_acquisition_process+0x200>
    2450:	65 c0       	rjmp	.+202    	; 0x251c <qtm_acquisition_process+0x2ca>
    2452:	4f e0       	ldi	r20, 0x0F	; 15
    2454:	64 16       	cp	r6, r20
    2456:	81 f1       	breq	.+96     	; 0x24b8 <qtm_acquisition_process+0x266>
    2458:	63 94       	inc	r6
    245a:	45 e0       	ldi	r20, 0x05	; 5
    245c:	5f c0       	rjmp	.+190    	; 0x251c <qtm_acquisition_process+0x2ca>
    245e:	99 23       	and	r25, r25
    2460:	61 f0       	breq	.+24     	; 0x247a <qtm_acquisition_process+0x228>
    2462:	91 50       	subi	r25, 0x01	; 1
    2464:	2f 5c       	subi	r18, 0xCF	; 207
    2466:	31 09       	sbc	r19, r1
    2468:	20 3d       	cpi	r18, 0xD0	; 208
    246a:	31 05       	cpc	r19, r1
    246c:	c0 f7       	brcc	.-16     	; 0x245e <qtm_acquisition_process+0x20c>
    246e:	05 c0       	rjmp	.+10     	; 0x247a <qtm_acquisition_process+0x228>
    2470:	66 20       	and	r6, r6
    2472:	41 f0       	breq	.+16     	; 0x2484 <qtm_acquisition_process+0x232>
    2474:	6a 94       	dec	r6
    2476:	25 51       	subi	r18, 0x15	; 21
    2478:	31 09       	sbc	r19, r1
    247a:	26 31       	cpi	r18, 0x16	; 22
    247c:	31 05       	cpc	r19, r1
    247e:	c0 f7       	brcc	.-16     	; 0x2470 <qtm_acquisition_process+0x21e>
    2480:	61 10       	cpse	r6, r1
    2482:	0d c0       	rjmp	.+26     	; 0x249e <qtm_acquisition_process+0x24c>
    2484:	99 23       	and	r25, r25
    2486:	21 f0       	breq	.+8      	; 0x2490 <qtm_acquisition_process+0x23e>
    2488:	91 50       	subi	r25, 0x01	; 1
    248a:	5a e0       	ldi	r21, 0x0A	; 10
    248c:	65 2e       	mov	r6, r21
    248e:	07 c0       	rjmp	.+14     	; 0x249e <qtm_acquisition_process+0x24c>
    2490:	61 2c       	mov	r6, r1
    2492:	05 c0       	rjmp	.+10     	; 0x249e <qtm_acquisition_process+0x24c>
    2494:	44 23       	and	r20, r20
    2496:	41 f0       	breq	.+16     	; 0x24a8 <qtm_acquisition_process+0x256>
    2498:	41 50       	subi	r20, 0x01	; 1
    249a:	22 50       	subi	r18, 0x02	; 2
    249c:	31 09       	sbc	r19, r1
    249e:	23 30       	cpi	r18, 0x03	; 3
    24a0:	31 05       	cpc	r19, r1
    24a2:	c0 f7       	brcc	.-16     	; 0x2494 <qtm_acquisition_process+0x242>
    24a4:	41 11       	cpse	r20, r1
    24a6:	10 c0       	rjmp	.+32     	; 0x24c8 <qtm_acquisition_process+0x276>
    24a8:	66 20       	and	r6, r6
    24aa:	e9 f1       	breq	.+122    	; 0x2526 <qtm_acquisition_process+0x2d4>
    24ac:	6a 94       	dec	r6
    24ae:	4a e0       	ldi	r20, 0x0A	; 10
    24b0:	23 30       	cpi	r18, 0x03	; 3
    24b2:	31 05       	cpc	r19, r1
    24b4:	c8 f6       	brcc	.-78     	; 0x2468 <qtm_acquisition_process+0x216>
    24b6:	08 c0       	rjmp	.+16     	; 0x24c8 <qtm_acquisition_process+0x276>
    24b8:	59 13       	cpse	r21, r25
    24ba:	2f c0       	rjmp	.+94     	; 0x251a <qtm_acquisition_process+0x2c8>
    24bc:	23 30       	cpi	r18, 0x03	; 3
    24be:	31 05       	cpc	r19, r1
    24c0:	40 f1       	brcs	.+80     	; 0x2512 <qtm_acquisition_process+0x2c0>
    24c2:	4f e0       	ldi	r20, 0x0F	; 15
    24c4:	a4 2e       	mov	r10, r20
    24c6:	4f e0       	ldi	r20, 0x0F	; 15
    24c8:	94 30       	cpi	r25, 0x04	; 4
    24ca:	18 f0       	brcs	.+6      	; 0x24d2 <qtm_acquisition_process+0x280>
    24cc:	99 0f       	add	r25, r25
    24ce:	99 0f       	add	r25, r25
    24d0:	99 50       	subi	r25, 0x09	; 9
    24d2:	c0 e1       	ldi	r28, 0x10	; 16
    24d4:	4c 9f       	mul	r20, r28
    24d6:	a0 01       	movw	r20, r0
    24d8:	11 24       	eor	r1, r1
    24da:	56 29       	or	r21, r6
    24dc:	4a 29       	or	r20, r10
    24de:	c9 2f       	mov	r28, r25
    24e0:	d0 e0       	ldi	r29, 0x00	; 0
    24e2:	dc 2f       	mov	r29, r28
    24e4:	cc 27       	eor	r28, r28
    24e6:	d2 95       	swap	r29
    24e8:	d0 7f       	andi	r29, 0xF0	; 240
    24ea:	4c 2b       	or	r20, r28
    24ec:	5d 2b       	or	r21, r29
    24ee:	43 83       	std	Z+3, r20	; 0x03
    24f0:	54 83       	std	Z+4, r21	; 0x04
    24f2:	01 c0       	rjmp	.+2      	; 0x24f6 <qtm_acquisition_process+0x2a4>
    24f4:	ff cf       	rjmp	.-2      	; 0x24f4 <qtm_acquisition_process+0x2a2>
    24f6:	df ef       	ldi	r29, 0xFF	; 255
    24f8:	ed 1a       	sub	r14, r29
    24fa:	fd 0a       	sbc	r15, r29
    24fc:	6b 5f       	subi	r22, 0xFB	; 251
    24fe:	7f 4f       	sbci	r23, 0xFF	; 255
    2500:	08 5f       	subi	r16, 0xF8	; 248
    2502:	1f 4f       	sbci	r17, 0xFF	; 255
    2504:	d3 ce       	rjmp	.-602    	; 0x22ac <qtm_acquisition_process+0x5a>
    2506:	92 e0       	ldi	r25, 0x02	; 2
    2508:	90 93 81 38 	sts	0x3881, r25	; 0x803881 <touch_seq_lib_state>
    250c:	0e c0       	rjmp	.+28     	; 0x252a <qtm_acquisition_process+0x2d8>
    250e:	83 e0       	ldi	r24, 0x03	; 3
    2510:	0c c0       	rjmp	.+24     	; 0x252a <qtm_acquisition_process+0x2d8>
    2512:	4f e0       	ldi	r20, 0x0F	; 15
    2514:	2f e0       	ldi	r18, 0x0F	; 15
    2516:	a2 2e       	mov	r10, r18
    2518:	d7 cf       	rjmp	.-82     	; 0x24c8 <qtm_acquisition_process+0x276>
    251a:	4f e0       	ldi	r20, 0x0F	; 15
    251c:	23 30       	cpi	r18, 0x03	; 3
    251e:	31 05       	cpc	r19, r1
    2520:	08 f0       	brcs	.+2      	; 0x2524 <qtm_acquisition_process+0x2d2>
    2522:	73 cf       	rjmp	.-282    	; 0x240a <qtm_acquisition_process+0x1b8>
    2524:	d1 cf       	rjmp	.-94     	; 0x24c8 <qtm_acquisition_process+0x276>
    2526:	40 e0       	ldi	r20, 0x00	; 0
    2528:	cf cf       	rjmp	.-98     	; 0x24c8 <qtm_acquisition_process+0x276>
    252a:	df 91       	pop	r29
    252c:	cf 91       	pop	r28
    252e:	1f 91       	pop	r17
    2530:	0f 91       	pop	r16
    2532:	ff 90       	pop	r15
    2534:	ef 90       	pop	r14
    2536:	df 90       	pop	r13
    2538:	cf 90       	pop	r12
    253a:	bf 90       	pop	r11
    253c:	af 90       	pop	r10
    253e:	9f 90       	pop	r9
    2540:	8f 90       	pop	r8
    2542:	7f 90       	pop	r7
    2544:	6f 90       	pop	r6
    2546:	5f 90       	pop	r5
    2548:	4f 90       	pop	r4
    254a:	3f 90       	pop	r3
    254c:	08 95       	ret

0000254e <qtm_ptc_init_acquisition_module>:
    254e:	cf 93       	push	r28
    2550:	df 93       	push	r29
    2552:	00 97       	sbiw	r24, 0x00	; 0
    2554:	e1 f1       	breq	.+120    	; 0x25ce <qtm_ptc_init_acquisition_module+0x80>
    2556:	dc 01       	movw	r26, r24
    2558:	ed 91       	ld	r30, X+
    255a:	fc 91       	ld	r31, X
    255c:	a0 81       	ld	r26, Z
    255e:	b1 81       	ldd	r27, Z+1	; 0x01
    2560:	60 e0       	ldi	r22, 0x00	; 0
    2562:	70 e0       	ldi	r23, 0x00	; 0
    2564:	40 e0       	ldi	r20, 0x00	; 0
    2566:	50 e0       	ldi	r21, 0x00	; 0
    2568:	20 e0       	ldi	r18, 0x00	; 0
    256a:	30 e0       	ldi	r19, 0x00	; 0
    256c:	4a 17       	cp	r20, r26
    256e:	5b 07       	cpc	r21, r27
    2570:	99 f0       	breq	.+38     	; 0x2598 <qtm_ptc_init_acquisition_module+0x4a>
    2572:	ec 01       	movw	r28, r24
    2574:	ea 81       	ldd	r30, Y+2	; 0x02
    2576:	fb 81       	ldd	r31, Y+3	; 0x03
    2578:	e6 0f       	add	r30, r22
    257a:	f7 1f       	adc	r31, r23
    257c:	c0 81       	ld	r28, Z
    257e:	d1 81       	ldd	r29, Z+1	; 0x01
    2580:	02 80       	ldd	r0, Z+2	; 0x02
    2582:	f3 81       	ldd	r31, Z+3	; 0x03
    2584:	e0 2d       	mov	r30, r0
    2586:	ec 2b       	or	r30, r28
    2588:	fd 2b       	or	r31, r29
    258a:	2e 2b       	or	r18, r30
    258c:	3f 2b       	or	r19, r31
    258e:	4f 5f       	subi	r20, 0xFF	; 255
    2590:	5f 4f       	sbci	r21, 0xFF	; 255
    2592:	68 5f       	subi	r22, 0xF8	; 248
    2594:	7f 4f       	sbci	r23, 0xFF	; 255
    2596:	ea cf       	rjmp	.-44     	; 0x256c <qtm_ptc_init_acquisition_module+0x1e>
    2598:	21 15       	cp	r18, r1
    259a:	31 05       	cpc	r19, r1
    259c:	d1 f0       	breq	.+52     	; 0x25d2 <qtm_ptc_init_acquisition_module+0x84>
    259e:	80 91 81 38 	lds	r24, 0x3881	; 0x803881 <touch_seq_lib_state>
    25a2:	81 11       	cpse	r24, r1
    25a4:	08 c0       	rjmp	.+16     	; 0x25b6 <qtm_ptc_init_acquisition_module+0x68>
    25a6:	20 93 22 06 	sts	0x0622, r18	; 0x800622 <gain_setting_int_cap+0x7f5e48>
    25aa:	30 93 23 06 	sts	0x0623, r19	; 0x800623 <gain_setting_int_cap+0x7f5e49>
    25ae:	81 e0       	ldi	r24, 0x01	; 1
    25b0:	80 93 81 38 	sts	0x3881, r24	; 0x803881 <touch_seq_lib_state>
    25b4:	0a c0       	rjmp	.+20     	; 0x25ca <qtm_ptc_init_acquisition_module+0x7c>
    25b6:	80 91 22 06 	lds	r24, 0x0622	; 0x800622 <gain_setting_int_cap+0x7f5e48>
    25ba:	82 2b       	or	r24, r18
    25bc:	80 93 22 06 	sts	0x0622, r24	; 0x800622 <gain_setting_int_cap+0x7f5e48>
    25c0:	80 91 23 06 	lds	r24, 0x0623	; 0x800623 <gain_setting_int_cap+0x7f5e49>
    25c4:	83 2b       	or	r24, r19
    25c6:	80 93 23 06 	sts	0x0623, r24	; 0x800623 <gain_setting_int_cap+0x7f5e49>
    25ca:	80 e0       	ldi	r24, 0x00	; 0
    25cc:	03 c0       	rjmp	.+6      	; 0x25d4 <qtm_ptc_init_acquisition_module+0x86>
    25ce:	8b e0       	ldi	r24, 0x0B	; 11
    25d0:	01 c0       	rjmp	.+2      	; 0x25d4 <qtm_ptc_init_acquisition_module+0x86>
    25d2:	82 e0       	ldi	r24, 0x02	; 2
    25d4:	df 91       	pop	r29
    25d6:	cf 91       	pop	r28
    25d8:	08 95       	ret

000025da <qtm_ptc_qtlib_assign_signal_memory>:
    25da:	00 97       	sbiw	r24, 0x00	; 0
    25dc:	31 f0       	breq	.+12     	; 0x25ea <qtm_ptc_qtlib_assign_signal_memory+0x10>
    25de:	80 93 dc 38 	sts	0x38DC, r24	; 0x8038dc <qtm_raw_data_measurements_ptr>
    25e2:	90 93 dd 38 	sts	0x38DD, r25	; 0x8038dd <qtm_raw_data_measurements_ptr+0x1>
    25e6:	80 e0       	ldi	r24, 0x00	; 0
    25e8:	08 95       	ret
    25ea:	8b e0       	ldi	r24, 0x0B	; 11
    25ec:	08 95       	ret

000025ee <qtm_ptc_start_measurement_seq>:
    25ee:	61 15       	cp	r22, r1
    25f0:	71 05       	cpc	r23, r1
    25f2:	a1 f1       	breq	.+104    	; 0x265c <qtm_ptc_start_measurement_seq+0x6e>
    25f4:	00 97       	sbiw	r24, 0x00	; 0
    25f6:	91 f1       	breq	.+100    	; 0x265c <qtm_ptc_start_measurement_seq+0x6e>
    25f8:	20 91 81 38 	lds	r18, 0x3881	; 0x803881 <touch_seq_lib_state>
    25fc:	22 23       	and	r18, r18
    25fe:	81 f1       	breq	.+96     	; 0x2660 <qtm_ptc_start_measurement_seq+0x72>
    2600:	24 30       	cpi	r18, 0x04	; 4
    2602:	81 f1       	breq	.+96     	; 0x2664 <qtm_ptc_start_measurement_seq+0x76>
    2604:	80 93 da 38 	sts	0x38DA, r24	; 0x8038da <qtm_acquisition_control_working_set_ptr>
    2608:	90 93 db 38 	sts	0x38DB, r25	; 0x8038db <qtm_acquisition_control_working_set_ptr+0x1>
    260c:	60 93 7f 38 	sts	0x387F, r22	; 0x80387f <ptc_seq_measure_complete_pointer>
    2610:	70 93 80 38 	sts	0x3880, r23	; 0x803880 <ptc_seq_measure_complete_pointer+0x1>
    2614:	10 92 18 06 	sts	0x0618, r1	; 0x800618 <gain_setting_int_cap+0x7f5e3e>
    2618:	dc 01       	movw	r26, r24
    261a:	ed 91       	ld	r30, X+
    261c:	fc 91       	ld	r31, X
    261e:	22 81       	ldd	r18, Z+2	; 0x02
    2620:	20 34       	cpi	r18, 0x40	; 64
    2622:	39 f4       	brne	.+14     	; 0x2632 <qtm_ptc_start_measurement_seq+0x44>
    2624:	20 ec       	ldi	r18, 0xC0	; 192
    2626:	20 93 18 06 	sts	0x0618, r18	; 0x800618 <gain_setting_int_cap+0x7f5e3e>
    262a:	20 91 18 06 	lds	r18, 0x0618	; 0x800618 <gain_setting_int_cap+0x7f5e3e>
    262e:	20 62       	ori	r18, 0x20	; 32
    2630:	05 c0       	rjmp	.+10     	; 0x263c <qtm_ptc_start_measurement_seq+0x4e>
    2632:	20 38       	cpi	r18, 0x80	; 128
    2634:	41 f4       	brne	.+16     	; 0x2646 <qtm_ptc_start_measurement_seq+0x58>
    2636:	20 91 18 06 	lds	r18, 0x0618	; 0x800618 <gain_setting_int_cap+0x7f5e3e>
    263a:	28 62       	ori	r18, 0x28	; 40
    263c:	20 93 18 06 	sts	0x0618, r18	; 0x800618 <gain_setting_int_cap+0x7f5e3e>
    2640:	10 92 1e 06 	sts	0x061E, r1	; 0x80061e <gain_setting_int_cap+0x7f5e44>
    2644:	13 c0       	rjmp	.+38     	; 0x266c <qtm_ptc_start_measurement_seq+0x7e>
    2646:	21 38       	cpi	r18, 0x81	; 129
    2648:	79 f4       	brne	.+30     	; 0x2668 <qtm_ptc_start_measurement_seq+0x7a>
    264a:	20 91 18 06 	lds	r18, 0x0618	; 0x800618 <gain_setting_int_cap+0x7f5e3e>
    264e:	28 62       	ori	r18, 0x28	; 40
    2650:	20 93 18 06 	sts	0x0618, r18	; 0x800618 <gain_setting_int_cap+0x7f5e3e>
    2654:	26 e8       	ldi	r18, 0x86	; 134
    2656:	20 93 1e 06 	sts	0x061E, r18	; 0x80061e <gain_setting_int_cap+0x7f5e44>
    265a:	08 c0       	rjmp	.+16     	; 0x266c <qtm_ptc_start_measurement_seq+0x7e>
    265c:	8b e0       	ldi	r24, 0x0B	; 11
    265e:	08 95       	ret
    2660:	83 e0       	ldi	r24, 0x03	; 3
    2662:	08 95       	ret
    2664:	81 e0       	ldi	r24, 0x01	; 1
    2666:	08 95       	ret
    2668:	82 e0       	ldi	r24, 0x02	; 2
    266a:	08 95       	ret
    266c:	10 92 00 06 	sts	0x0600, r1	; 0x800600 <gain_setting_int_cap+0x7f5e26>
    2670:	dc 01       	movw	r26, r24
    2672:	ed 91       	ld	r30, X+
    2674:	fc 91       	ld	r31, X
    2676:	84 81       	ldd	r24, Z+4	; 0x04
    2678:	80 31       	cpi	r24, 0x10	; 16
    267a:	08 f0       	brcs	.+2      	; 0x267e <qtm_ptc_start_measurement_seq+0x90>
    267c:	80 e1       	ldi	r24, 0x10	; 16
    267e:	80 93 03 06 	sts	0x0603, r24	; 0x800603 <gain_setting_int_cap+0x7f5e29>
    2682:	81 e0       	ldi	r24, 0x01	; 1
    2684:	80 93 0b 06 	sts	0x060B, r24	; 0x80060b <gain_setting_int_cap+0x7f5e31>
    2688:	80 93 0a 06 	sts	0x060A, r24	; 0x80060a <gain_setting_int_cap+0x7f5e30>
    268c:	80 93 75 38 	sts	0x3875, r24	; 0x803875 <qtm_which_mode_current>
    2690:	10 92 82 38 	sts	0x3882, r1	; 0x803882 <current_measure_channel>
    2694:	10 92 83 38 	sts	0x3883, r1	; 0x803883 <current_measure_channel+0x1>
    2698:	0e 94 69 10 	call	0x20d2	; 0x20d2 <select_next_channel_to_measure>
    269c:	81 11       	cpse	r24, r1
    269e:	0b c0       	rjmp	.+22     	; 0x26b6 <qtm_ptc_start_measurement_seq+0xc8>
    26a0:	84 e0       	ldi	r24, 0x04	; 4
    26a2:	80 93 81 38 	sts	0x3881, r24	; 0x803881 <touch_seq_lib_state>
    26a6:	80 91 82 38 	lds	r24, 0x3882	; 0x803882 <current_measure_channel>
    26aa:	90 91 83 38 	lds	r25, 0x3883	; 0x803883 <current_measure_channel+0x1>
    26ae:	0e 94 9c 10 	call	0x2138	; 0x2138 <qtm_measure_node>
    26b2:	80 e0       	ldi	r24, 0x00	; 0
    26b4:	08 95       	ret
    26b6:	82 e0       	ldi	r24, 0x02	; 2
    26b8:	80 93 81 38 	sts	0x3881, r24	; 0x803881 <touch_seq_lib_state>
    26bc:	08 95       	ret

000026be <qtm_enable_sensor_node>:
    26be:	00 97       	sbiw	r24, 0x00	; 0
    26c0:	c9 f0       	breq	.+50     	; 0x26f4 <qtm_enable_sensor_node+0x36>
    26c2:	dc 01       	movw	r26, r24
    26c4:	ed 91       	ld	r30, X+
    26c6:	fc 91       	ld	r31, X
    26c8:	11 97       	sbiw	r26, 0x01	; 1
    26ca:	20 81       	ld	r18, Z
    26cc:	31 81       	ldd	r19, Z+1	; 0x01
    26ce:	26 17       	cp	r18, r22
    26d0:	37 07       	cpc	r19, r23
    26d2:	90 f0       	brcs	.+36     	; 0x26f8 <qtm_enable_sensor_node+0x3a>
    26d4:	45 e0       	ldi	r20, 0x05	; 5
    26d6:	46 9f       	mul	r20, r22
    26d8:	90 01       	movw	r18, r0
    26da:	47 9f       	mul	r20, r23
    26dc:	30 0d       	add	r19, r0
    26de:	11 24       	eor	r1, r1
    26e0:	14 96       	adiw	r26, 0x04	; 4
    26e2:	ed 91       	ld	r30, X+
    26e4:	fc 91       	ld	r31, X
    26e6:	15 97       	sbiw	r26, 0x05	; 5
    26e8:	e2 0f       	add	r30, r18
    26ea:	f3 1f       	adc	r31, r19
    26ec:	81 e0       	ldi	r24, 0x01	; 1
    26ee:	80 83       	st	Z, r24
    26f0:	80 e0       	ldi	r24, 0x00	; 0
    26f2:	08 95       	ret
    26f4:	8b e0       	ldi	r24, 0x0B	; 11
    26f6:	08 95       	ret
    26f8:	82 e0       	ldi	r24, 0x02	; 2
    26fa:	08 95       	ret

000026fc <qtm_calibrate_sensor_node>:
    26fc:	fc 01       	movw	r30, r24
    26fe:	89 2b       	or	r24, r25
    2700:	d1 f1       	breq	.+116    	; 0x2776 <qtm_calibrate_sensor_node+0x7a>
    2702:	a0 81       	ld	r26, Z
    2704:	b1 81       	ldd	r27, Z+1	; 0x01
    2706:	8d 91       	ld	r24, X+
    2708:	9c 91       	ld	r25, X
    270a:	11 97       	sbiw	r26, 0x01	; 1
    270c:	86 17       	cp	r24, r22
    270e:	97 07       	cpc	r25, r23
    2710:	a0 f1       	brcs	.+104    	; 0x277a <qtm_calibrate_sensor_node+0x7e>
    2712:	12 96       	adiw	r26, 0x02	; 2
    2714:	9c 91       	ld	r25, X
    2716:	04 80       	ldd	r0, Z+4	; 0x04
    2718:	f5 81       	ldd	r31, Z+5	; 0x05
    271a:	e0 2d       	mov	r30, r0
    271c:	90 34       	cpi	r25, 0x40	; 64
    271e:	59 f4       	brne	.+22     	; 0x2736 <qtm_calibrate_sensor_node+0x3a>
    2720:	85 e0       	ldi	r24, 0x05	; 5
    2722:	86 9f       	mul	r24, r22
    2724:	d0 01       	movw	r26, r0
    2726:	87 9f       	mul	r24, r23
    2728:	b0 0d       	add	r27, r0
    272a:	11 24       	eor	r1, r1
    272c:	ae 0f       	add	r26, r30
    272e:	bf 1f       	adc	r27, r31
    2730:	84 e3       	ldi	r24, 0x34	; 52
    2732:	92 e0       	ldi	r25, 0x02	; 2
    2734:	0d c0       	rjmp	.+26     	; 0x2750 <qtm_calibrate_sensor_node+0x54>
    2736:	90 58       	subi	r25, 0x80	; 128
    2738:	92 30       	cpi	r25, 0x02	; 2
    273a:	80 f4       	brcc	.+32     	; 0x275c <qtm_calibrate_sensor_node+0x60>
    273c:	85 e0       	ldi	r24, 0x05	; 5
    273e:	86 9f       	mul	r24, r22
    2740:	d0 01       	movw	r26, r0
    2742:	87 9f       	mul	r24, r23
    2744:	b0 0d       	add	r27, r0
    2746:	11 24       	eor	r1, r1
    2748:	ae 0f       	add	r26, r30
    274a:	bf 1f       	adc	r27, r31
    274c:	87 e6       	ldi	r24, 0x67	; 103
    274e:	95 e0       	ldi	r25, 0x05	; 5
    2750:	13 96       	adiw	r26, 0x03	; 3
    2752:	8d 93       	st	X+, r24
    2754:	9c 93       	st	X, r25
    2756:	14 97       	sbiw	r26, 0x04	; 4
    2758:	80 e0       	ldi	r24, 0x00	; 0
    275a:	01 c0       	rjmp	.+2      	; 0x275e <qtm_calibrate_sensor_node+0x62>
    275c:	82 e0       	ldi	r24, 0x02	; 2
    275e:	95 e0       	ldi	r25, 0x05	; 5
    2760:	96 9f       	mul	r25, r22
    2762:	90 01       	movw	r18, r0
    2764:	97 9f       	mul	r25, r23
    2766:	30 0d       	add	r19, r0
    2768:	11 24       	eor	r1, r1
    276a:	e2 0f       	add	r30, r18
    276c:	f3 1f       	adc	r31, r19
    276e:	90 81       	ld	r25, Z
    2770:	92 60       	ori	r25, 0x02	; 2
    2772:	90 83       	st	Z, r25
    2774:	08 95       	ret
    2776:	8b e0       	ldi	r24, 0x0B	; 11
    2778:	08 95       	ret
    277a:	82 e0       	ldi	r24, 0x02	; 2
    277c:	08 95       	ret

0000277e <qtm_t161x_ptc_handler_eoc>:
    277e:	10 92 00 06 	sts	0x0600, r1	; 0x800600 <gain_setting_int_cap+0x7f5e26>
    2782:	40 91 10 06 	lds	r20, 0x0610	; 0x800610 <gain_setting_int_cap+0x7f5e36>
    2786:	50 91 11 06 	lds	r21, 0x0611	; 0x800611 <gain_setting_int_cap+0x7f5e37>
    278a:	80 91 82 38 	lds	r24, 0x3882	; 0x803882 <current_measure_channel>
    278e:	90 91 83 38 	lds	r25, 0x3883	; 0x803883 <current_measure_channel+0x1>
    2792:	9c 01       	movw	r18, r24
    2794:	22 0f       	add	r18, r18
    2796:	33 1f       	adc	r19, r19
    2798:	e0 91 dc 38 	lds	r30, 0x38DC	; 0x8038dc <qtm_raw_data_measurements_ptr>
    279c:	f0 91 dd 38 	lds	r31, 0x38DD	; 0x8038dd <qtm_raw_data_measurements_ptr+0x1>
    27a0:	e2 0f       	add	r30, r18
    27a2:	f3 1f       	adc	r31, r19
    27a4:	40 83       	st	Z, r20
    27a6:	51 83       	std	Z+1, r21	; 0x01
    27a8:	01 96       	adiw	r24, 0x01	; 1
    27aa:	80 93 82 38 	sts	0x3882, r24	; 0x803882 <current_measure_channel>
    27ae:	90 93 83 38 	sts	0x3883, r25	; 0x803883 <current_measure_channel+0x1>
    27b2:	0e 94 69 10 	call	0x20d2	; 0x20d2 <select_next_channel_to_measure>
    27b6:	81 11       	cpse	r24, r1
    27b8:	09 c0       	rjmp	.+18     	; 0x27cc <qtm_t161x_ptc_handler_eoc+0x4e>
    27ba:	84 e0       	ldi	r24, 0x04	; 4
    27bc:	80 93 81 38 	sts	0x3881, r24	; 0x803881 <touch_seq_lib_state>
    27c0:	80 91 82 38 	lds	r24, 0x3882	; 0x803882 <current_measure_channel>
    27c4:	90 91 83 38 	lds	r25, 0x3883	; 0x803883 <current_measure_channel+0x1>
    27c8:	0c 94 9c 10 	jmp	0x2138	; 0x2138 <qtm_measure_node>
    27cc:	e0 91 7f 38 	lds	r30, 0x387F	; 0x80387f <ptc_seq_measure_complete_pointer>
    27d0:	f0 91 80 38 	lds	r31, 0x3880	; 0x803880 <ptc_seq_measure_complete_pointer+0x1>
    27d4:	09 94       	ijmp

000027d6 <_exit>:
    27d6:	f8 94       	cli

000027d8 <__stop_program>:
    27d8:	ff cf       	rjmp	.-2      	; 0x27d8 <__stop_program>
